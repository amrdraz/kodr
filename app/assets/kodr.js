"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('kodr/adapters/application', ['exports', 'ember-data', 'kodr/config/environment'], function (exports, DS, config) {

    'use strict';

    exports['default'] = DS['default'].RESTAdapter.extend({
        namespace: 'api',
        host: config['default'].APP.API_HOST,
        coalesceFindRequests: true,
        shouldReloadAll: function shouldReloadAll() {
            return true;
        }
        // shouldBackgroundReloadRecord:false
    });

});
define('kodr/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'kodr/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

    'use strict';

    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments);
        }, i[r].l = 1 * new Date();
        a = s.createElement(o), m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m);
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    window.ga('create', 'UA-58026837-1', 'auto');
    window.ga('send', 'pageview');

    window.toastr.options = {
        "closeButton": true,
        "debug": false,
        "positionClass": "toast-bottom-right",
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
    var emberSockets;
    try {
        emberSockets = window.EmberSockets; //cause I removed EmberSocket during testing
    } catch (e) {
        emberSockets = Ember['default'].Object;
    }

    var App;

    Ember['default'].MODEL_FACTORY_INJECTIONS = true;

    App = Ember['default'].Application.extend({
        modulePrefix: config['default'].modulePrefix,
        podModulePrefix: config['default'].podModulePrefix,
        Resolver: Resolver['default'],
        currentPath: '',
        Socket: emberSockets.extend({
            // host: 'localhost',
            // port: 9000,
            // secure:true,
            controllers: ['application'],
            autoConnect: true
        })
    });

    loadInitializers['default'](App, config['default'].modulePrefix);

    exports['default'] = App;

});
define('kodr/authenticators/custom', ['exports', 'ember', 'simple-auth-oauth2/authenticators/oauth2'], function (exports, Ember, OAuth2) {

    'use strict';

    exports['default'] = OAuth2['default'].extend({

        authenticate: function authenticate(credentials) {
            return new Ember['default'].RSVP.Promise(function (resolve, reject) {
                // make the request to authenticate the user at endpoint /v3/token
                Ember['default'].$.ajax({
                    url: '/token',
                    type: 'POST',
                    data: {
                        grant_type: 'password',
                        identification: credentials.identification,
                        password: credentials.password
                    }
                }).then(function (response) {
                    Ember['default'].run(function () {
                        // resolve (including the user id) as the AJAX request was successful; all properties this promise resolves
                        // with will be available through the session
                        resolve({
                            access_token: response.access_token,
                            user_id: response.user_id
                        });
                    });
                }, function (xhr) {
                    Ember['default'].run(function () {
                        reject(xhr.responseText);
                    });
                });
            });
        }
    });

});
define('kodr/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'kodr/config/environment'], function (exports, AppVersionComponent, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = AppVersionComponent['default'].extend({
    version: version,
    name: name
  });

});
define('kodr/components/bread-crumbs', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    router: null,
    applicationController: null,

    handlerInfos: Ember['default'].computed("applicationController.currentPath", function () {
      return this.get("router").router.currentHandlerInfos;
    }),

    /*
      For the pathNames and controllers properties, we must be careful not to NOT
      specify the properties of the route in our dependent keys.
       Observing the controller property of the route causes some serious problems:
      https://github.com/chrisfarber/ember-breadcrumbs/issues/21
    */

    pathNames: Ember['default'].computed("handlerInfos.[]", function () {
      return this.get("handlerInfos").map(function (handlerInfo) {
        return handlerInfo.name;
      });
    }),

    controllers: Ember['default'].computed("handlerInfos.[]", function () {
      return this.get("handlerInfos").map(function (handlerInfo) {
        return handlerInfo.handler.controller;
      });
    }),

    breadCrumbs: Ember['default'].computed("controllers.[].breadCrumbs", "controllers.[].breadCrumb", "controllers.[].breadCrumbPath", "controllers.[].breadCrumbModel", "pathNames.[]", function () {
      var controllers = this.get("controllers");
      var defaultPaths = this.get("pathNames");
      var breadCrumbs = Ember['default'].A([]);

      controllers.forEach(function (controller, index) {
        var crumbs = controller.get("breadCrumbs") || Ember['default'].A([]);
        var singleCrumb = controller.get("breadCrumb");

        if (!Ember['default'].isBlank(singleCrumb)) {
          crumbs.push({
            label: singleCrumb,
            path: controller.get("breadCrumbPath"),
            model: controller.get("breadCrumbModel")
          });
        }

        crumbs.forEach(function (crumb) {
          breadCrumbs.addObject(Ember['default'].Object.create({
            label: crumb.label,
            path: crumb.path || defaultPaths[index],
            model: crumb.model,
            linkable: !Ember['default'].isNone(crumb.linkable) ? crumb.linkable : true,
            isCurrent: false
          }));
        });
      });

      var deepestCrumb = Ember['default'].get(breadCrumbs, "lastObject");
      if (deepestCrumb) {
        deepestCrumb.isCurrent = true;
      }

      return breadCrumbs;
    })
  });

});
define('kodr/components/bs-modal/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        actions: {
            ok: function ok() {
                this.$('.modal').modal('hide');
                this.sendAction('ok');
            }
        },
        show: (function () {
            this.$('.modal').modal().on('hidden.bs.modal', (function () {
                this.sendAction('close');
            }).bind(this));
        }).on('didInsertElement')
    });

});
define('kodr/components/bs-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 6
          }
        },
        "moduleName": "kodr/components/bs-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal fade");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-dialog");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","modal-content");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-header");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","close");
        dom.setAttribute(el5,"data-dismiss","modal");
        dom.setAttribute(el5,"aria-hidden","true");
        var el6 = dom.createTextNode("Ã—");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5,"class","modal-title");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-body");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-footer");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","btn btn-default");
        dom.setAttribute(el5,"data-dismiss","modal");
        var el6 = dom.createTextNode("Close");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","btn btn-primary");
        var el6 = dom.createTextNode("OK");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [5, 3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[6,30],[6,39]]]],
        ["content","yield",["loc",[null,[9,6],[9,15]]]],
        ["element","action",["ok"],[],["loc",[null,[13,52],[13,67]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/challenge-edit-/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'section',
        classNames: ['challenge-content', 'row'],
        actions: {
            run: function run() {
                this.sendAction(this.get('run'));
            },
            test: function test(report) {
                this.sendAction(this.get('test'), report);
            }
        }
    });

});
define('kodr/components/challenge/challenge-edit-/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 110
          }
        },
        "moduleName": "kodr/components/challenge/challenge-edit-/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","component",[["subexpr","concat",["challenge/",["get","model.type",["loc",[null,[1,33],[1,43]]]],"/challenge-edit-",["get","model.type",["loc",[null,[1,63],[1,73]]]]],[],["loc",[null,[1,12],[1,74]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,81],[1,86]]]]],[],[]],"run","run","test","test"],["loc",[null,[1,0],[1,110]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/challenge-settings-/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'section',
        classNames: ['challenge-settings', 'row'],
        challengeLanguages: (function () {
            var re = /kodr\/components\/challenge.*-edit-(.+)\/comp/;
            return Object.keys(requirejs._eak_seen).filter(function (key) {
                return re.test(key);
            }).map(function (key) {
                return re.exec(key)[1];
            });
        })()
    });

});
define('kodr/components/challenge/challenge-settings-/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 2
            }
          },
          "moduleName": "kodr/components/challenge/challenge-settings-/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","component",[["subexpr","concat",["challenge/",["get","model.type",["loc",[null,[32,37],[32,47]]]],"/challenge-settings-",["get","model.type",["loc",[null,[32,71],[32,81]]]]],[],["loc",[null,[32,16],[32,82]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[32,89],[32,94]]]]],[],[]]],["loc",[null,[32,4],[32,97]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 7
          }
        },
        "moduleName": "kodr/components/challenge/challenge-settings-/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"role","form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-6");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"for","name");
        dom.setAttribute(el4,"class","control-label");
        var el5 = dom.createTextNode("Challenge name");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class"," col-md-6");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"for","type");
        dom.setAttribute(el4,"class","control-label");
        var el5 = dom.createTextNode("Language");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-6");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"for","ecp");
        dom.setAttribute(el4,"class","control-label");
        var el5 = dom.createTextNode("Difficulty");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","label label-primary challenge-exp");
        var el5 = dom.createTextNode("Estimated difficulty awards: ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Exp");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]),3,3);
        morphs[2] = dom.createMorphAt(element1,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[4] = dom.createMorphAt(element0,7,7);
        return morphs;
      },
      statements: [
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","model.name",["loc",[null,[5,30],[5,40]]]]],[],[]],"class","challenge-name form-control"],["loc",[null,[5,6],[5,78]]]],
        ["inline","ember-selectize",[],["class",":challenge-type-select","content",["subexpr","@mut",[["get","challengeLanguages",["loc",[null,[13,18],[13,36]]]]],[],[]],"value",["subexpr","@mut",[["get","model.type",["loc",[null,[14,16],[14,26]]]]],[],[]]],["loc",[null,[11,6],[15,8]]]],
        ["inline","ember-selectize",[],["class",":challenge-exp-select","content",["subexpr","@mut",[["get","model.expOptions",["loc",[null,[23,18],[23,34]]]]],[],[]],"optionValuePath","content.points","optionLabelPath","content.rank","value",["subexpr","@mut",[["get","model.exp",["loc",[null,[26,16],[26,25]]]]],[],[]]],["loc",[null,[21,6],[27,8]]]],
        ["content","model.exp",["loc",[null,[28,83],[28,96]]]],
        ["block","if",[["get","model.type",["loc",[null,[31,8],[31,18]]]]],[],0,null,["loc",[null,[31,2],[33,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/challenge-trial-/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'section',
        classNames: ['row'],
        actions: {
            run: function run() {
                this.sendAction(this.get('run'));
            },
            test: function test(report) {
                this.sendAction(this.get('test'), report);
            },
            reset: function reset() {
                this.sendAction(this.get('reset'));
            }
        }
    });

});
define('kodr/components/challenge/challenge-trial-/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 6
          }
        },
        "moduleName": "kodr/components/challenge/challenge-trial-/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","component",[["subexpr","concat",["challenge/",["get","model.challenge.type",["loc",[null,[1,33],[1,53]]]],"/challenge-trial-",["get","model.challenge.type",["loc",[null,[1,74],[1,94]]]]],[],["loc",[null,[1,12],[1,95]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[2,10],[2,15]]]]],[],[]],"challenge",["subexpr","@mut",[["get","challenge",["loc",[null,[3,14],[3,23]]]]],[],[]],"run","run","rest","rest","test","test"],["loc",[null,[1,0],[7,6]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/choose-code/challenge-edit-choose-code/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('kodr/components/challenge/choose-code/challenge-edit-choose-code/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/components/challenge/choose-code/challenge-edit-choose-code/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/choose-code/challenge-settings-choose-code/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('kodr/components/challenge/choose-code/challenge-settings-choose-code/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/components/challenge/choose-code/challenge-settings-choose-code/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/java/challenge-edit-java/component', ['exports', 'kodr/mixins/challenge/java/challenge-common-java', 'ember'], function (exports, ChallengeCommon, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'solution',
        actions: {
            run: function run() {
                this.runCode();
            }
        },
        didInsertElement: function didInsertElement() {
            this.EventBus.subscribe('challenge.test', this, this.validate);
        },
        willClearRender: function willClearRender() {
            this.EventBus.unsubscribe('challenge.test', this, this.validate);
        }
    });

});
define('kodr/components/challenge/java/challenge-edit-java/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/java/challenge-edit-java/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-run");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-play");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Run in Console");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#import");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Import");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#solution");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Solution");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#setup");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Setup");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#tests");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Test");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","solution");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade ");
          dom.setAttribute(el3,"id","setup");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","tests");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#description");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Description");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#descriptionPreview");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Description Preview");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#console");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Console");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane  fade in active");
          dom.setAttribute(el3,"id","description");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","descriptionPreview");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","console");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"id","sandbox");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var element3 = dom.childAt(fragment, [3, 3]);
          var morphs = new Array(8);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
          morphs[6] = dom.createMorphAt(dom.childAt(element3, [5]),1,1);
          morphs[7] = dom.createMorphAt(dom.childAt(element3, [7]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["run"],[],["loc",[null,[3,14],[3,30]]]],
          ["inline","code-editor",[],["name","solutionEditor","id","solutionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[16,16],[16,21]]]]],[],[]],"lint",true,"attr","solution"],["loc",[null,[12,6],[18,28]]]],
          ["inline","code-editor",[],["name","setup","id","setupEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[25,14],[25,19]]]]],[],[]],"attr","setup"],["loc",[null,[21,6],[26,23]]]],
          ["inline","code-editor",[],["name","testsEditor","id","testsEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[33,16],[33,21]]]]],[],[]],"attr","tests"],["loc",[null,[29,6],[34,25]]]],
          ["inline","code-editor",[],["name","description","id","descriptionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[50,14],[50,19]]]]],[],[]],"attr","description","highlight","markdown"],["loc",[null,[46,6],[53,10]]]],
          ["inline","marked-math",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[57,26],[57,31]]]]],[],[]],"observable","description"],["loc",[null,[57,6],[57,59]]]],
          ["content","code-console",["loc",[null,[60,6],[60,22]]]],
          ["content","iframe-sandbox",["loc",[null,[63,6],[63,24]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 67,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/java/challenge-edit-java/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],[],0,null,["loc",[null,[1,0],[67,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/java/challenge-settings-java/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        actions: {
            addInput: function addInput() {
                var controller = this;
                var model = controller.get('model');
                model.get("inputs").pushObject(Ember['default'].Object.create({ value: "" }));
            },
            removeInput: function removeInput(inp) {
                var controller = this;
                var model = controller.get('model');
                model.get("inputs").removeObject(inp);
            }
        }
    });

});
define('kodr/components/challenge/java/challenge-settings-java/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "moduleName": "kodr/components/challenge/java/challenge-settings-java/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","button");
          dom.setAttribute(el1,"class","close");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"aria-hidden","true");
          var el3 = dom.createTextNode("Ã—");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","sr-only");
          var el3 = dom.createTextNode("Close");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["inline","input",[],["value",["subexpr","@mut",[["get","inp.value",["loc",[null,[5,26],[5,35]]]]],[],[]],"class","challenge-name form-control"],["loc",[null,[5,12],[5,73]]]],
          ["element","action",["removeInput",["get","inp",["loc",[null,[6,57],[6,60]]]]],[],["loc",[null,[6,34],[6,63]]]]
        ],
        locals: ["inp"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 6
          }
        },
        "moduleName": "kodr/components/challenge/java/challenge-settings-java/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","form-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-6");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3,"for","inputs");
        dom.setAttribute(el3,"class","control-label");
        var el4 = dom.createTextNode("Inputs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","btn btn-primary");
        var el4 = dom.createTextNode("+ Add");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(element1, [5]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element1,3,3);
        morphs[1] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model.inputs",["loc",[null,[4,14],[4,26]]]]],[],0,null,["loc",[null,[4,6],[7,15]]]],
        ["element","action",["addInput"],[],["loc",[null,[8,14],[8,36]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/java/challenge-trial-java/component', ['exports', 'ember', 'kodr/mixins/challenge/java/challenge-common-java'], function (exports, Ember, ChallengeCommon) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'code',
        actions: {
            run: function run() {
                this.runCode();
            },
            test: function test() {
                this.validate();
            },
            reset: function reset() {
                this.sendAction(this.get("reset"));
            }
        }
    });

});
define('kodr/components/challenge/java/challenge-trial-java/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 13
              },
              "end": {
                "line": 10,
                "column": 0
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("import java.util.Scanner;\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 44
              },
              "end": {
                "line": 12,
                "column": 18
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(";");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","inp.value",["loc",[null,[12,4],[12,17]]]]
          ],
          locals: ["inp"],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Re-Submit ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-play");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 35,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Completed ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-ok");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 36,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isDirtyish",["loc",[null,[31,14],[31,24]]]]],[],0,1,["loc",[null,[31,8],[35,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Submit ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-play");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 8
              },
              "end": {
                "line": 44,
                "column": 8
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"href","#input");
            dom.setAttribute(el2,"data-toggle","tab");
            var el3 = dom.createTextNode("Test Input");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 6
              },
              "end": {
                "line": 59,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("       ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","tab-pane fade");
            dom.setAttribute(el1,"id","input");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["inline","code-editor",[],["name","inputEditor","id","inputEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[56,16],[56,21]]]]],[],[]],"attr","input"],["loc",[null,[52,8],[57,25]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-run");
          var el3 = dom.createTextNode("Run in Console ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-play");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","rest");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-reset");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-repeat");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Reset Challenge");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#code");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Code");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("public class Main {\n  public static void main (String[] args) { ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","code");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createTextNode("\n  }\n}");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#console");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Console");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","console");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","results");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"id","sandbox");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var element3 = dom.childAt(element0, [7]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(fragment, [3]);
          var element6 = dom.childAt(element5, [1]);
          var element7 = dom.childAt(element5, [5]);
          var morphs = new Array(13);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element4,0,0);
          morphs[3] = dom.createMorphAt(element4,2,2);
          morphs[4] = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
          morphs[5] = dom.createAttrMorph(element6, 'class');
          morphs[6] = dom.createElementMorph(element6);
          morphs[7] = dom.createMorphAt(element6,1,1);
          morphs[8] = dom.createMorphAt(dom.childAt(element5, [3]),3,3);
          morphs[9] = dom.createMorphAt(dom.childAt(element7, [1]),1,1);
          morphs[10] = dom.createMorphAt(element7,3,3);
          morphs[11] = dom.createMorphAt(dom.childAt(element7, [5]),1,1);
          morphs[12] = dom.createMorphAt(dom.childAt(element7, [7]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["run"],[],["loc",[null,[3,18],[3,34]]]],
          ["element","action",["rest"],[],["loc",[null,[4,19],[4,36]]]],
          ["block","if",[["get","model.challenge.hasInput",["loc",[null,[9,19],[9,43]]]]],[],0,null,["loc",[null,[9,13],[10,7]]]],
          ["block","each",[["get","model.challenge.inputs",["loc",[null,[11,52],[11,74]]]]],[],1,null,["loc",[null,[11,44],[12,27]]]],
          ["inline","code-editor",[],["name","codeEditor","id","codeEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[18,16],[18,21]]]]],[],[]],"lint",true,"highlight",["subexpr","@mut",[["get","model.challenge.type",["loc",[null,[20,20],[20,40]]]]],[],[]],"attr","code"],["loc",[null,[14,8],[21,24]]]],
          ["attribute","class",["concat",["btn ",["subexpr","if",[["get","model.complete",["loc",[null,[29,50],[29,64]]]],"btn-success","btn-primary"],[],["loc",[null,[29,45],[29,94]]]]," pull-right ",["subexpr","if",[["get","model.canSubmit",["loc",[null,[29,111],[29,126]]]],"","disabled"],[],["loc",[null,[29,106],[29,142]]]]," challenge-submit"]]],
          ["element","action",["test"],[],["loc",[null,[29,16],[29,33]]]],
          ["block","if",[["get","model.complete",["loc",[null,[30,12],[30,26]]]]],[],2,3,["loc",[null,[30,6],[38,13]]]],
          ["block","if",[["get","model.challenge.hasInput",["loc",[null,[42,14],[42,38]]]]],[],4,null,["loc",[null,[42,8],[44,15]]]],
          ["content","code-console",["loc",[null,[48,8],[48,24]]]],
          ["block","if",[["get","model.challenge.hasInput",["loc",[null,[50,12],[50,36]]]]],[],5,null,["loc",[null,[50,6],[59,13]]]],
          ["content","results",["loc",[null,[61,8],[61,19]]]],
          ["content","iframe-sandbox",["loc",[null,[64,8],[64,26]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 68,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/java/challenge-trial-java/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],["class","editor-container"],0,null,["loc",[null,[1,0],[68,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/javascript/challenge-edit-javascript/component', ['exports', 'kodr/mixins/challenge/javascript/challenge-common-javascript', 'ember'], function (exports, ChallengeCommon, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'solution'
    });

});
define('kodr/components/challenge/javascript/challenge-edit-javascript/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/javascript/challenge-edit-javascript/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-run");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-play");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Run in Console");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#import");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Import");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#solution");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Solution");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#setup");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Setup");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#tests");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Test");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","solution");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade ");
          dom.setAttribute(el3,"id","setup");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","tests");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#description");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Description");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#descriptionPreview");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Description Preview");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#console");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Console");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane  fade in active");
          dom.setAttribute(el3,"id","description");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","descriptionPreview");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","console");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"id","sandbox");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var element3 = dom.childAt(fragment, [3, 3]);
          var morphs = new Array(8);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
          morphs[6] = dom.createMorphAt(dom.childAt(element3, [5]),1,1);
          morphs[7] = dom.createMorphAt(dom.childAt(element3, [7]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["runInConsole"],[],["loc",[null,[3,14],[3,39]]]],
          ["inline","code-editor",[],["name","solutionEditor","id","solutionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[16,16],[16,21]]]]],[],[]],"lint",true,"attr","solution"],["loc",[null,[12,6],[18,28]]]],
          ["inline","code-editor",[],["name","setup","id","setupEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[25,14],[25,19]]]]],[],[]],"attr","setup"],["loc",[null,[21,6],[26,23]]]],
          ["inline","code-editor",[],["name","testsEditor","id","testsEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[33,16],[33,21]]]]],[],[]],"attr","tests"],["loc",[null,[29,6],[34,25]]]],
          ["inline","code-editor",[],["name","description","id","descriptionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[50,14],[50,19]]]]],[],[]],"attr","description","highlight","markdown"],["loc",[null,[46,6],[53,10]]]],
          ["inline","marked-math",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[57,26],[57,31]]]]],[],[]],"observable","description"],["loc",[null,[57,6],[57,59]]]],
          ["content","code-console",["loc",[null,[60,6],[60,22]]]],
          ["content","iframe-sandbox",["loc",[null,[63,6],[63,24]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 67,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/javascript/challenge-edit-javascript/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],[],0,null,["loc",[null,[1,0],[67,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/javascript/challenge-settings-javascript/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('kodr/components/challenge/javascript/challenge-settings-javascript/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/components/challenge/javascript/challenge-settings-javascript/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/javascript/challenge-trial-javascript/component', ['exports', 'kodr/mixins/challenge/javascript/challenge-common-javascript', 'ember'], function (exports, ChallengeCommon, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'code',
        actions: {
            run: function run() {
                this.send('runInConsole');
            },
            test: function test() {
                this.evaluate();
            },
            reset: function reset() {
                this.sendAction(this.get("reset"));
            }
        }
    });

});
define('kodr/components/challenge/javascript/challenge-trial-javascript/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Re-Submit ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-play");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 8
                },
                "end": {
                  "line": 28,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Completed ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-ok");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 6
              },
              "end": {
                "line": 29,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isDirtyish",["loc",[null,[24,14],[24,24]]]]],[],0,1,["loc",[null,[24,8],[28,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Submit ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-play");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 6
              },
              "end": {
                "line": 49,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("       ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","tab-pane fade");
            dom.setAttribute(el1,"id","input");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["inline","code-editor",[],["name","inputEditor","id","inputEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[46,16],[46,21]]]]],[],[]],"attr","input"],["loc",[null,[42,8],[47,25]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-run");
          var el3 = dom.createTextNode("Run in Console ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-play");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","rest");
          dom.setAttribute(el2,"class","btn btn-default pull-right challenge-reset");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-repeat");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Reset Challenge");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#code");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Code");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","code");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"id","run");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","nav nav-tabs");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","active");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#console");
          dom.setAttribute(el4,"data-toggle","tab");
          var el5 = dom.createTextNode("Console");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","tab-content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade in active");
          dom.setAttribute(el3,"id","console");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-pane fade");
          dom.setAttribute(el3,"id","results");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"id","sandbox");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var element3 = dom.childAt(fragment, [3]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [5]);
          var morphs = new Array(10);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [7, 1]),1,1);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createElementMorph(element4);
          morphs[5] = dom.createMorphAt(element4,1,1);
          morphs[6] = dom.createMorphAt(dom.childAt(element5, [1]),1,1);
          morphs[7] = dom.createMorphAt(element5,3,3);
          morphs[8] = dom.createMorphAt(dom.childAt(element5, [5]),1,1);
          morphs[9] = dom.createMorphAt(dom.childAt(element5, [7]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["run"],[],["loc",[null,[3,18],[3,34]]]],
          ["element","action",["rest"],[],["loc",[null,[4,19],[4,36]]]],
          ["inline","code-editor",[],["name","codeEditor","id","codeEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[14,18],[14,23]]]]],[],[]],"lint",true,"highlight",["subexpr","@mut",[["get","model.challenge.type",["loc",[null,[16,22],[16,42]]]]],[],[]],"attr","code"],["loc",[null,[10,10],[17,26]]]],
          ["attribute","class",["concat",["btn ",["subexpr","if",[["get","model.complete",["loc",[null,[22,50],[22,64]]]],"btn-success","btn-primary"],[],["loc",[null,[22,45],[22,94]]]]," pull-right ",["subexpr","if",[["get","model.canSubmit",["loc",[null,[22,111],[22,126]]]],"","disabled"],[],["loc",[null,[22,106],[22,142]]]]," challenge-submit"]]],
          ["element","action",["test"],[],["loc",[null,[22,16],[22,33]]]],
          ["block","if",[["get","model.complete",["loc",[null,[23,12],[23,26]]]]],[],0,1,["loc",[null,[23,6],[31,13]]]],
          ["content","code-console",["loc",[null,[38,8],[38,24]]]],
          ["block","if",[["get","model.challenge.hasInput",["loc",[null,[40,12],[40,36]]]]],[],2,null,["loc",[null,[40,6],[49,13]]]],
          ["content","results",["loc",[null,[51,8],[51,19]]]],
          ["content","iframe-sandbox",["loc",[null,[54,8],[54,26]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/javascript/challenge-trial-javascript/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],["class","editor-container"],0,null,["loc",[null,[1,0],[58,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/python/challenge-edit-python/component', ['exports', 'ember', 'kodr/mixins/challenge/python/challenge-common-python'], function (exports, Ember, ChallengeCommon) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'solution',
        testEvent: function testEvent() {
            this.clearLint('tests');
            this.testCode({
                code: this.get('model.blueprint').get(this.get('evaluatedModelProperty')),
                test: this.get('model.blueprint.tests'),
                exp: this.get('model.exp')
            });
        }
    });

});
define('kodr/components/challenge/python/challenge-edit-python/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 81,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/python/challenge-edit-python/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-run");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Run in Console");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-debug");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Start  Debugger");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-back");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Back");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-step");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Step");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-stop");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Stop");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-right challenge-reset");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Reset ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","nav nav-tabs");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","active");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#solution");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Solution");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#setup");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Setup");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#tests");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Test");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade in active");
          dom.setAttribute(el4,"id","solution");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade ");
          dom.setAttribute(el4,"id","setup");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade");
          dom.setAttribute(el4,"id","tests");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3,"class","btn btn-default pull-right challenge-test");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Test ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","nav nav-tabs");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","active");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#description");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Description");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#descriptionPreview");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Description Preview");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#console");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Console");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane  fade in active");
          dom.setAttribute(el4,"id","description");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade");
          dom.setAttribute(el4,"id","descriptionPreview");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade");
          dom.setAttribute(el4,"id","console");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var element4 = dom.childAt(element1, [5]);
          var element5 = dom.childAt(element1, [7]);
          var element6 = dom.childAt(element1, [9]);
          var element7 = dom.childAt(element1, [11]);
          var element8 = dom.childAt(element0, [3, 3]);
          var element9 = dom.childAt(fragment, [3]);
          var element10 = dom.childAt(element9, [1, 1]);
          var element11 = dom.childAt(element9, [3, 3]);
          var morphs = new Array(25);
          morphs[0] = dom.createAttrMorph(element2, 'disabled');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2,0,0);
          morphs[3] = dom.createAttrMorph(element3, 'disabled');
          morphs[4] = dom.createElementMorph(element3);
          morphs[5] = dom.createMorphAt(element3,0,0);
          morphs[6] = dom.createAttrMorph(element4, 'disabled');
          morphs[7] = dom.createElementMorph(element4);
          morphs[8] = dom.createMorphAt(element4,0,0);
          morphs[9] = dom.createAttrMorph(element5, 'disabled');
          morphs[10] = dom.createElementMorph(element5);
          morphs[11] = dom.createMorphAt(element5,0,0);
          morphs[12] = dom.createAttrMorph(element6, 'disabled');
          morphs[13] = dom.createElementMorph(element6);
          morphs[14] = dom.createMorphAt(element6,0,0);
          morphs[15] = dom.createElementMorph(element7);
          morphs[16] = dom.createMorphAt(element7,0,0);
          morphs[17] = dom.createMorphAt(dom.childAt(element8, [1]),1,1);
          morphs[18] = dom.createMorphAt(dom.childAt(element8, [3]),1,1);
          morphs[19] = dom.createMorphAt(dom.childAt(element8, [5]),1,1);
          morphs[20] = dom.createElementMorph(element10);
          morphs[21] = dom.createMorphAt(element10,0,0);
          morphs[22] = dom.createMorphAt(dom.childAt(element11, [1]),1,1);
          morphs[23] = dom.createMorphAt(dom.childAt(element11, [3]),1,1);
          morphs[24] = dom.createMorphAt(dom.childAt(element11, [5]),1,1);
          return morphs;
        },
        statements: [
          ["attribute","disabled",["get","isDebugging",["loc",[null,[4,88],[4,99]]]]],
          ["element","action",["run"],[],["loc",[null,[4,12],[4,28]]]],
          ["inline","fa-icon",["play"],[],["loc",[null,[4,102],[4,120]]]],
          ["attribute","disabled",["get","isDebugging",["loc",[null,[5,92],[5,103]]]]],
          ["element","action",["debug"],[],["loc",[null,[5,12],[5,30]]]],
          ["inline","fa-icon",["bug"],[],["loc",[null,[5,106],[5,123]]]],
          ["attribute","disabled",["subexpr","if",[["get","isDebugging",["loc",[null,[6,93],[6,104]]]],["get","isFirstStep",["loc",[null,[6,105],[6,116]]]],"disabled"],[],["loc",[null,[6,88],[6,129]]]]],
          ["element","action",["back"],[],["loc",[null,[6,12],[6,29]]]],
          ["inline","fa-icon",["step-backward"],[],["loc",[null,[6,130],[6,157]]]],
          ["attribute","disabled",["subexpr","if",[["get","isDebugging",["loc",[null,[7,93],[7,104]]]],["get","isLastStep",["loc",[null,[7,105],[7,115]]]],"disabled"],[],["loc",[null,[7,88],[7,128]]]]],
          ["element","action",["step"],[],["loc",[null,[7,12],[7,29]]]],
          ["inline","fa-icon",["step-forward"],[],["loc",[null,[7,129],[7,155]]]],
          ["attribute","disabled",["subexpr","is-not",[["get","isDebugging",["loc",[null,[8,97],[8,108]]]]],[],["loc",[null,[8,88],[8,110]]]]],
          ["element","action",["stop"],[],["loc",[null,[8,12],[8,29]]]],
          ["inline","fa-icon",["stop"],[],["loc",[null,[8,111],[8,129]]]],
          ["element","action",["reset"],[],["loc",[null,[9,12],[9,30]]]],
          ["inline","fa-icon",["repeat"],[],["loc",[null,[9,82],[9,102]]]],
          ["inline","code-editor",[],["name","solutionEditor","id","solutionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[23,18],[23,23]]]]],[],[]],"lint",true,"language","python","attr","blueprint.solution"],["loc",[null,[19,8],[26,40]]]],
          ["inline","code-editor",[],["name","setup","id","setupEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[33,16],[33,21]]]]],[],[]],"language","python","attr","blueprint.setup"],["loc",[null,[29,8],[35,35]]]],
          ["inline","code-editor",[],["name","testsEditor","id","testsEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[42,18],[42,23]]]]],[],[]],"lint",true,"language","python","attr","blueprint.tests"],["loc",[null,[38,8],[45,37]]]],
          ["element","action",["test"],[],["loc",[null,[52,7],[52,24]]]],
          ["inline","fa-icon",["test"],[],["loc",[null,[52,75],[52,93]]]],
          ["inline","code-editor",[],["name","description","id","descriptionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[66,16],[66,21]]]]],[],[]],"attr","blueprint.description","language","markdown"],["loc",[null,[62,8],[69,12]]]],
          ["inline","marked-math",[],["model",["subexpr","@mut",[["get","model.blueprint",["loc",[null,[73,28],[73,43]]]]],[],[]],"observable","description"],["loc",[null,[73,8],[73,71]]]],
          ["content","py-console",["loc",[null,[76,8],[76,22]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 81,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/python/challenge-edit-python/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],[],0,null,["loc",[null,[1,0],[81,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/challenge/python/challenge-settings-python/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('kodr/components/challenge/python/challenge-settings-python/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/components/challenge/python/challenge-settings-python/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/challenge/python/challenge-trial-python/component', ['exports', 'ember', 'kodr/mixins/challenge/python/challenge-common-python'], function (exports, Ember, ChallengeCommon) {

    'use strict';

    var _ = window._;
    exports['default'] = Ember['default'].Component.extend(ChallengeCommon['default'], {
        evaluatedModelProperty: 'solution',
        evaluatedModelObject: 'work',
        testEvent: function testEvent() {
            this.testCode({
                code: this.get('model.work').get('solution'),
                test: this.get('model.challenge.blueprint.tests'),
                exp: this.get('model.challenge.exp')
            });
        },
        runEvent: function runEvent(target, code) {
            this.runCode(code);
        },
        typingTimer: null,
        endTyping: function endTyping() {
            var model = this.get('model');
            this.typingTimer = null;
            var endTime = Date.now();
            console.log("startTyping", this.startTyping, "endTyping", endTime, model.get('work.solution'));
        },
        typing: function typing() {
            clearTimeout(this.typingTimer);
            if (!this.typingTimer) {
                this.startTyping = Date.now();
            }
            this.typingTimer = _.delay(this.endTyping.bind(this), 3000);
        },
        watchEvents: (function () {
            var model = this.get('model');
            model.addObserver('work.solution', this, this.typing);
        }).on("didInsertElement"),
        unWatchEvents: (function () {
            var model = this.get('model');
            model.removeObserver('work.solution', this, this.typing);
        }).on("willClearRender")
    });

});
define('kodr/components/challenge/python/challenge-trial-python/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 21,
                "column": 8
              }
            },
            "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","marked-math",[],["model",["subexpr","@mut",[["get","challenge",["loc",[null,[20,30],[20,39]]]]],[],[]],"observable","blueprint.description"],["loc",[null,[20,10],[20,77]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 43,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Re-Submit ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-play");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 8
                }
              },
              "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          Completed ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-ok");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 6
              },
              "end": {
                "line": 46,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isDirtyish",["loc",[null,[41,14],[41,24]]]]],[],0,1,["loc",[null,[41,8],[45,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 6
              },
              "end": {
                "line": 48,
                "column": 6
              }
            },
            "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Submit ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-play");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 0
            }
          },
          "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-run");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Run in Console");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-debug");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Start  Debugger");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-back");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Back");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-step");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Step");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-left challenge-stop");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Stop");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3,"class","btn btn-default pull-right challenge-reset");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Reset ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","nav nav-tabs");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","active");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#description");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Description");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#solution");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Code");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade in active");
          dom.setAttribute(el4,"id","description");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("br");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade");
          dom.setAttribute(el4,"id","solution");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-6");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3,"id","run");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","nav nav-tabs");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4,"class","active");
          var el5 = dom.createElement("a");
          dom.setAttribute(el5,"href","#console");
          dom.setAttribute(el5,"data-toggle","tab");
          var el6 = dom.createTextNode("Console");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","tab-content");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","tab-pane fade in active");
          dom.setAttribute(el4,"id","console");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var element4 = dom.childAt(element1, [5]);
          var element5 = dom.childAt(element1, [7]);
          var element6 = dom.childAt(element1, [9]);
          var element7 = dom.childAt(element1, [11]);
          var element8 = dom.childAt(element0, [3, 3]);
          var element9 = dom.childAt(fragment, [3]);
          var element10 = dom.childAt(element9, [1, 1]);
          var morphs = new Array(23);
          morphs[0] = dom.createAttrMorph(element2, 'disabled');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2,0,0);
          morphs[3] = dom.createAttrMorph(element3, 'disabled');
          morphs[4] = dom.createElementMorph(element3);
          morphs[5] = dom.createMorphAt(element3,0,0);
          morphs[6] = dom.createAttrMorph(element4, 'disabled');
          morphs[7] = dom.createElementMorph(element4);
          morphs[8] = dom.createMorphAt(element4,0,0);
          morphs[9] = dom.createAttrMorph(element5, 'disabled');
          morphs[10] = dom.createElementMorph(element5);
          morphs[11] = dom.createMorphAt(element5,0,0);
          morphs[12] = dom.createAttrMorph(element6, 'disabled');
          morphs[13] = dom.createElementMorph(element6);
          morphs[14] = dom.createMorphAt(element6,0,0);
          morphs[15] = dom.createElementMorph(element7);
          morphs[16] = dom.createMorphAt(element7,0,0);
          morphs[17] = dom.createMorphAt(dom.childAt(element8, [1]),3,3);
          morphs[18] = dom.createMorphAt(dom.childAt(element8, [3]),1,1);
          morphs[19] = dom.createAttrMorph(element10, 'class');
          morphs[20] = dom.createElementMorph(element10);
          morphs[21] = dom.createMorphAt(element10,1,1);
          morphs[22] = dom.createMorphAt(dom.childAt(element9, [3, 3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["attribute","disabled",["get","isDebugging",["loc",[null,[4,88],[4,99]]]]],
          ["element","action",["run"],[],["loc",[null,[4,12],[4,28]]]],
          ["inline","fa-icon",["play"],[],["loc",[null,[4,102],[4,120]]]],
          ["attribute","disabled",["get","isDebugging",["loc",[null,[5,92],[5,103]]]]],
          ["element","action",["debug"],[],["loc",[null,[5,12],[5,30]]]],
          ["inline","fa-icon",["bug"],[],["loc",[null,[5,106],[5,123]]]],
          ["attribute","disabled",["subexpr","if",[["get","isDebugging",["loc",[null,[6,93],[6,104]]]],["get","isFirstStep",["loc",[null,[6,105],[6,116]]]],"disabled"],[],["loc",[null,[6,88],[6,129]]]]],
          ["element","action",["back"],[],["loc",[null,[6,12],[6,29]]]],
          ["inline","fa-icon",["step-backward"],[],["loc",[null,[6,130],[6,157]]]],
          ["attribute","disabled",["subexpr","if",[["get","isDebugging",["loc",[null,[7,93],[7,104]]]],["get","isLastStep",["loc",[null,[7,105],[7,115]]]],"disabled"],[],["loc",[null,[7,88],[7,128]]]]],
          ["element","action",["step"],[],["loc",[null,[7,12],[7,29]]]],
          ["inline","fa-icon",["step-forward"],[],["loc",[null,[7,129],[7,155]]]],
          ["attribute","disabled",["subexpr","is-not",[["get","isDebugging",["loc",[null,[8,97],[8,108]]]]],[],["loc",[null,[8,88],[8,110]]]]],
          ["element","action",["stop"],[],["loc",[null,[8,12],[8,29]]]],
          ["inline","fa-icon",["stop"],[],["loc",[null,[8,111],[8,129]]]],
          ["element","action",["reset"],[],["loc",[null,[9,12],[9,30]]]],
          ["inline","fa-icon",["repeat"],[],["loc",[null,[9,82],[9,102]]]],
          ["block","editor-run",[],["target","solutionEditor"],0,null,["loc",[null,[19,8],[21,23]]]],
          ["inline","code-editor",[],["name","solutionEditor","id","solutionEditor","class","col-lg-12","model",["subexpr","@mut",[["get","model",["loc",[null,[28,16],[28,21]]]]],[],[]],"lint",true,"language","python","attr","work.solution"],["loc",[null,[24,8],[32,10]]]],
          ["attribute","class",["concat",["btn ",["subexpr","if",[["get","model.complete",["loc",[null,[39,50],[39,64]]]],"btn-success","btn-primary"],[],["loc",[null,[39,45],[39,94]]]]," pull-right ",["subexpr","if",[["get","model.canSubmit",["loc",[null,[39,111],[39,126]]]],"","disabled"],[],["loc",[null,[39,106],[39,142]]]]," challenge-submit"]]],
          ["element","action",["test"],[],["loc",[null,[39,16],[39,33]]]],
          ["block","if",[["get","model.complete",["loc",[null,[40,12],[40,26]]]]],[],1,2,["loc",[null,[40,6],[48,13]]]],
          ["content","py-console",["loc",[null,[57,8],[57,22]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 21
          }
        },
        "moduleName": "kodr/components/challenge/python/challenge-trial-python/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","editor-container",[],[],0,null,["loc",[null,[1,0],[62,21]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/code-console', ['exports', 'ember', 'kodr/demo/empty', 'kodr/sandbox/stuff'], function (exports, Ember, iframeTemplate, stuff) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({

        write: function write(text, type) {
            console.log(text);
            this.get('console').Write(text, type);
        },
        clear: function clear() {
            this.get('console').Clear();
        },
        didInsertElement: function didInsertElement() {
            var component = this;
            var controller = this.get('controller');
            this.EventBus.subscribe('console.write', this, this.write);
            this.EventBus.subscribe('console.clear', this, this.clear);
            var that = this;
            var header = 'This is a console for you to test your code!\n' + 'You can either run your code in console to see what happens\n' + 'When you are ready try submitting your code to see the results\n';

            stuff['default'](window.location.origin + '/iframe.html', this.$()[0], function (context) {
                controller.set('csandbox', context); // this is not working
                context.load(iframeTemplate['default'], function () {
                    var jqconsole = that.$().jqconsole(header, "");
                    that.set('console', jqconsole);
                    controller.set('console', jqconsole);
                    // Abort prompt on Ctrl+Z.
                    jqconsole.RegisterShortcut('Z', function () {
                        jqconsole.AbortPrompt();
                        handler();
                    });
                    // Move to line start Ctrl+A.
                    jqconsole.RegisterShortcut('A', function () {
                        jqconsole.MoveToStart();
                        handler();
                    });
                    // Move to line end Ctrl+E.
                    jqconsole.RegisterShortcut('E', function () {
                        jqconsole.MoveToEnd();
                        handler();
                    });
                    // Clear Console Ctrl+K.
                    jqconsole.RegisterShortcut('K', function () {
                        jqconsole.Clear();
                        handler();
                    });
                    jqconsole.RegisterMatching('{', '}', 'brace');
                    jqconsole.RegisterMatching('(', ')', 'paran');
                    jqconsole.RegisterMatching('[', ']', 'bracket');

                    var log = function log(msg) {
                        jqconsole.Write('==> ' + msg + '\n');
                    };

                    context.on('error', log);
                    context.on('test.done', log);
                    context.on('structure.done', log);
                    context.on('log', log);

                    // Handle a command.
                    var handler = function handler(command) {
                        if (command) {
                            that.sendAction(component.get('eval'), command);
                        }
                        jqconsole.Prompt(true, handler, function (command) {
                            // Continue line if can't compile the command.
                            try {
                                Function(command);
                            } catch (e) {
                                if (/[\[\{\(]$/.test(command)) {
                                    return 1;
                                } else {
                                    if (/\n\s*$/.test(command)) {
                                        return false;
                                    }
                                    return 0;
                                }
                            }
                            return false;
                        });
                    };

                    // Initiate the first prompt.
                    handler();
                });
            });
        },
        willClearRender: function willClearRender() {
            this.EventBus.unsubscribe('console.write', this, this.write);
            this.EventBus.unsubscribe('console.clear', this, this.clear);
        }
    });

});
define('kodr/components/code-editor', ['exports', 'ember', 'kodr/utils/debounce'], function (exports, Ember, debounce) {

    'use strict';

    var CodeMirror = window.CodeMirror;

    function getMIME(lang) {
        if (lang === 'java') {
            return 'text/x-java';
        }
        if (lang === 'c') {
            return 'text/x-csrc';
        }
        if (lang === 'python') {
            return 'text/x-python';
        }
        if (lang === 'cpp') {
            return 'text/x-c++src';
        }
        if (lang === 'c#') {
            return 'text/x-csharp';
        }
        return lang;
    }

    function getMode(lang) {
        switch (lang) {
            case 'java':
            case 'javascript':
                return {
                    name: getMIME(lang),
                    globalVars: true,
                    singleLineStringErrors: false
                };
            case 'python':
                return {
                    name: "python",
                    version: 3,
                    singleLineStringErrors: false
                };
            default:
                return {
                    name: lang,
                    globalVars: true,
                    singleLineStringErrors: false
                };
        }
    }

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'textarea',
        didInsertElement: function didInsertElement() {
            var model = this.get('model');
            var config = {
                autofocus: true,
                lineNumbers: true,
                indentUnits: 4,
                lineWrapping: true,
                styleActiveLine: true,
                mode: getMode(this.get('language') || model.get('language'))
            };
            var attr = this.get('attr') || 'content';
            var lint = this.get('lint');
            // compileErrors
            if (lint) {
                config.gutters = ["CodeMirror-lint-markers"];
                config.lint = {};
                // this.get('controller').on('spy', this, this.spy);
            }

            var editor = CodeMirror.fromTextArea(this.element, config);

            editor.getDoc().setValue(model.get(attr) || '');

            this.updateEditor = function () {
                if (editor.getDoc().getValue() !== model.get(attr)) {
                    editor.getDoc().setValue(model.get(attr) || '');
                }
            };
            this.changeMode = function () {
                editor.setOption("mode", getMode(model.get('language')));
            };
            model.addObserver(attr, model, this.updateEditor);
            if (!this.get('language')) {
                model.addObserver('language', model, this.changeMode);
            }

            editor.on('change', debounce['default'](function (cm) {
                model.set(attr, cm.getValue());
            }));

            this.set('editor', editor);
            //inorder to access it by selecting the element
            this.$().data('CodeMirror', editor);
        },
        willDestroyElement: function willDestroyElement() {
            this.get('model').removeObserver(this.get('attr'), this.get('model'), this.updateEditor);
            if (!this.get('language')) {
                this.get('model').removeObserver('language', this.get('model'), this.changeMode);
            }
            // this.get('lint') && this.get('controller').off('spy', this, this.spy);
        }
    });

});
define('kodr/components/edit-requirement/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        classNames: ['row'],
        modifiers: ['any', 'specific'],
        models: ['Arena', 'Challenge'],
        sendChange: function sendChange() {
            this.sendAction(this.get('requirementChangeAction'));
        },
        change: (function () {
            this.sendChange();
        }).on('modifier1', 'modifier2', 'model.id1', 'model.id2'),
        actions: {
            remove: function remove() {
                this.sendChange();
                var action = this.get('removeAction');
                this.sendAction(action, this.get('model'));
            }
        }
    });

});
define('kodr/components/edit-requirement/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "kodr/components/edit-requirement/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ember-selectize",[],["name","id1","content",["subexpr","@mut",[["get","challenges",["loc",[null,[12,22],[12,32]]]]],[],[]],"optionValuePath","content.id","optionLabelPath","content.name","value",["subexpr","@mut",[["get","model.id1",["loc",[null,[15,20],[15,29]]]]],[],[]],"class","requirement-model1"],["loc",[null,[11,4],[17,16]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "kodr/components/edit-requirement/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ember-selectize",[],["name","id1","content",["subexpr","@mut",[["get","arenas",["loc",[null,[20,22],[20,28]]]]],[],[]],"optionValuePath","content.id","optionLabelPath","content.name","value",["subexpr","@mut",[["get","model.id1",["loc",[null,[23,20],[23,29]]]]],[],[]],"class","requirement-model1 col-md-3"],["loc",[null,[19,4],[25,16]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "kodr/components/edit-requirement/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-md-12");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.isChallenge",["loc",[null,[10,8],[10,25]]]]],[],0,1,["loc",[null,[10,2],[26,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 6
                }
              },
              "moduleName": "kodr/components/edit-requirement/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","col-md-12");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["inline","ember-selectize",[],["name","id2","content",["subexpr","@mut",[["get","arenas",["loc",[null,[39,26],[39,32]]]]],[],[]],"optionValuePath","content.id","optionLabelPath","content.name","value",["subexpr","@mut",[["get","model.id2",["loc",[null,[42,24],[42,33]]]]],[],[]],"class","requirement-model2 col-md-3"],["loc",[null,[37,8],[44,20]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 2
              },
              "end": {
                "line": 47,
                "column": 2
              }
            },
            "moduleName": "kodr/components/edit-requirement/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-md-12");
            var el2 = dom.createTextNode("\n    in \n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0,1,1);
            morphs[1] = dom.createMorphAt(element0,3,3);
            morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","x-select",[],["content",["subexpr","@mut",[["get","modifiers",["loc",[null,[32,23],[32,32]]]]],[],[]],"value",["subexpr","@mut",[["get","model.modifier2",["loc",[null,[32,39],[32,54]]]]],[],[]],"action",["subexpr","action",[["subexpr","mut",[["get","model.modifier2",["loc",[null,[32,75],[32,90]]]]],[],["loc",[null,[32,70],[32,91]]]]],[],["loc",[null,[32,62],[32,92]]]]],["loc",[null,[32,4],[32,95]]]],
            ["content","model.model2",["loc",[null,[33,4],[33,20]]]],
            ["block","unless",[["get","model.isAny2",["loc",[null,[35,14],[35,26]]]]],[],0,null,["loc",[null,[35,4],[46,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 0
            }
          },
          "moduleName": "kodr/components/edit-requirement/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-md-12");
          var el2 = dom.createTextNode("\n    times: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","if",[["get","model.isChallenge",["loc",[null,[29,8],[29,25]]]]],[],0,null,["loc",[null,[29,2],[47,9]]]],
          ["inline","input",[],["type","number","value",["subexpr","@mut",[["get","model.times",["loc",[null,[49,39],[49,50]]]]],[],[]],"min",0],["loc",[null,[49,11],[49,58]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 11
          }
        },
        "moduleName": "kodr/components/edit-requirement/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"type","button");
        dom.setAttribute(el1,"class","close");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"aria-hidden","true");
        var el3 = dom.createTextNode("Ã—");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","sr-only");
        var el3 = dom.createTextNode("Close");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-md-12");
        var el2 = dom.createTextNode("\n  Complete \n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(element2,1,1);
        morphs[2] = dom.createMorphAt(element2,3,3);
        morphs[3] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["element","action",["remove"],[],["loc",[null,[1,8],[1,28]]]],
        ["inline","x-select",[],["content",["subexpr","@mut",[["get","modifiers",["loc",[null,[5,21],[5,30]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.modifier1",["loc",[null,[5,41],[5,56]]]]],[],[]],"action",["subexpr","action",[["subexpr","mut",[["get","model.modifier1",["loc",[null,[5,77],[5,92]]]]],[],["loc",[null,[5,72],[5,93]]]]],[],["loc",[null,[5,64],[5,94]]]]],["loc",[null,[5,2],[5,96]]]],
        ["inline","x-select",[],["content",["subexpr","@mut",[["get","models",["loc",[null,[6,21],[6,27]]]]],[],[]],"value",["subexpr","@mut",[["get","model.model1",["loc",[null,[6,34],[6,46]]]]],[],[]],"action",["subexpr","action",[["subexpr","mut",[["get","model.model1",["loc",[null,[6,67],[6,79]]]]],[],["loc",[null,[6,62],[6,80]]]]],[],["loc",[null,[6,54],[6,81]]]]],["loc",[null,[6,2],[6,84]]]],
        ["block","unless",[["get","model.isAny1",["loc",[null,[8,10],[8,22]]]]],[],0,1,["loc",[null,[8,0],[51,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/components/editor-container', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    /*global CodeMirror*/
    var $ = Ember['default'].$;
    exports['default'] = Ember['default'].Component.extend({
        target: Ember['default'].computed.alias("targetObject"),
        showConsole: function showConsole() {
            this.$('[href=#console]').tab('show');
        },
        editorLint: function editorLint(cmId, errs) {
            var cm = Ember['default'].$('#' + cmId + 'Editor').data('CodeMirror');
            cm.updateLinting(CodeMirror.lintResult(errs));
        },
        editorLine: function editorLine(cmId, line) {
            var cm = Ember['default'].$('#' + cmId + 'Editor').data('CodeMirror');
            cm.getDoc().setCursor(line - 1, {
                scroll: true
            });
        },
        editorPast: function editorPast(cmId, text) {
            var cm = Ember['default'].$('#' + cmId).data('CodeMirror');
            cm.getDoc().replaceRange(text, cm.getDoc().getCursor());
        },
        didInsertElement: function didInsertElement() {
            var that = this;
            this.EventBus.subscribe('console.show', this, this.showConsole);
            this.EventBus.subscribe('editor.lint', this, this.editorLint);
            this.EventBus.subscribe('editor.line', this, this.editorLine);
            this.EventBus.subscribe('editor.past', this, this.editorPast);
            // this.get('controller').trigger('console.show');
            //refresh code editor tabs when selected
            Ember['default'].$('[data-toggle="tab"]').on('shown.bs.tab', function () {
                // debugger;
                var editor = $($(this).attr('href') + 'Editor');
                if (editor.length !== 0) {
                    editor.data('CodeMirror').refresh();
                    editor.data('CodeMirror').focus();
                }
            }).on('click', function () {
                that.EventBus.publish("challenge.event.tab.select", $(this).attr("href").substr(1));
            });
        },
        willClearRender: function willClearRender() {
            this.EventBus.unsubscribe('console.show', this, this.showConsole);
            this.EventBus.unsubscribe('editor.lint', this, this.editorLint);
            this.EventBus.unsubscribe('editor.line', this, this.editorLine);
            this.EventBus.unsubscribe('editor.past', this, this.editorPast);
        }
    });

});
define('kodr/components/editor-run/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        classNames: ['past-text'],
        didInsertElement: function didInsertElement() {
            var component = this;
            var target = component.get('target');
            component.$().on('click', 'pre:not(.no-run)', function () {
                var code = Ember['default'].$(this).text();
                component.EventBus.publish('challenge.event.copy.example');
                // component.EventBus.publish('editor.past', target, code);
                component.EventBus.publish('challenge.run', target, code);
                console.log(code);
            });
        }
    });

});
define('kodr/components/editor-run/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "kodr/components/editor-run/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/em-button', ['exports', 'ember-idx-button/button'], function (exports, ButtonComponent) {

	'use strict';

	exports['default'] = ButtonComponent['default'];

});
define('kodr/components/em-checkbox', ['exports', 'ember', 'ember-idx-forms/checkbox'], function (exports, Ember, CheckboxComponent) {

	'use strict';

	exports['default'] = CheckboxComponent['default'];

});
define('kodr/components/em-form-control-help', ['exports', 'ember', 'ember-idx-forms/control_help'], function (exports, Ember, FormControlHelperComponent) {

	'use strict';

	exports['default'] = FormControlHelperComponent['default'];

});
define('kodr/components/em-form-group', ['exports', 'ember', 'ember-idx-forms/group'], function (exports, Ember, FormGroupComponent) {

	'use strict';

	exports['default'] = FormGroupComponent['default'];

});
define('kodr/components/em-form-label', ['exports', 'ember', 'ember-idx-forms/label'], function (exports, Ember, FormLabelComponent) {

	'use strict';

	exports['default'] = FormLabelComponent['default'];

});
define('kodr/components/em-form-submit', ['exports', 'ember', 'ember-idx-forms/submit_button'], function (exports, Ember, SubmitButtonComponent) {

	'use strict';

	exports['default'] = SubmitButtonComponent['default'];

});
define('kodr/components/em-form', ['exports', 'ember', 'ember-idx-forms/form'], function (exports, Ember, FormComponent) {

	'use strict';

	exports['default'] = FormComponent['default'];

});
define('kodr/components/em-input', ['exports', 'ember', 'ember-idx-forms/input'], function (exports, Ember, InputComponent) {

	'use strict';

	exports['default'] = InputComponent['default'];

});
define('kodr/components/em-modal-body', ['exports', 'ember-idx-modal/modal-body'], function (exports, BodyComponent) {

	'use strict';

	exports['default'] = BodyComponent['default'];

});
define('kodr/components/em-modal-confirm-with-reason', ['exports', 'ember-idx-modal/modal-confirm-with-reason'], function (exports, ConfirmWithReasonModal) {

	'use strict';

	exports['default'] = ConfirmWithReasonModal['default'];

});
define('kodr/components/em-modal-confirm', ['exports', 'ember-idx-modal/modal-confirm'], function (exports, ModalConfirm) {

	'use strict';

	exports['default'] = ModalConfirm['default'];

});
define('kodr/components/em-modal-emform', ['exports', 'ember-idx-modal/modal-emform'], function (exports, ModalEmFormComponent) {

	'use strict';

	exports['default'] = ModalEmFormComponent['default'];

});
define('kodr/components/em-modal-footer', ['exports', 'ember-idx-modal/modal-footer'], function (exports, FooterComponent) {

	'use strict';

	exports['default'] = FooterComponent['default'];

});
define('kodr/components/em-modal-form', ['exports', 'ember-idx-modal/modal-form'], function (exports, ModalFormComponent) {

	'use strict';

	exports['default'] = ModalFormComponent['default'];

});
define('kodr/components/em-modal-title', ['exports', 'ember-idx-modal/modal-title'], function (exports, TitleComponent) {

	'use strict';

	exports['default'] = TitleComponent['default'];

});
define('kodr/components/em-modal-toggler', ['exports', 'ember-idx-modal/modal-toggler'], function (exports, TogglerComponent) {

	'use strict';

	exports['default'] = TogglerComponent['default'];

});
define('kodr/components/em-modal', ['exports', 'ember-idx-modal/modal'], function (exports, ModalComponent) {

	'use strict';

	exports['default'] = ModalComponent['default'];

});
define('kodr/components/em-select', ['exports', 'ember', 'ember-idx-forms/select'], function (exports, Ember, SelectComponent) {

	'use strict';

	exports['default'] = SelectComponent['default'];

});
define('kodr/components/em-text', ['exports', 'ember', 'ember-idx-forms/text'], function (exports, Ember, TextComponent) {

	'use strict';

	exports['default'] = TextComponent['default'];

});
define('kodr/components/ember-chosen', ['exports', 'ember', 'ember-cli-chosen/components/ember-chosen'], function (exports, Ember, EmberChosen) {

	'use strict';

	exports['default'] = EmberChosen['default'];

});
define('kodr/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, EmberSelectizeComponent) {

	'use strict';

	exports['default'] = EmberSelectizeComponent['default'];

});
define('kodr/components/export-arena-modal/component', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        tagName: 'pre',
        'export': (function () {
            var model = this.get('model');
        }).property('didInsertElement')
    });

});
define('kodr/components/export-arena-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "kodr/components/export-arena-modal/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        {\n            name:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\",\n            settings:");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(",\n            content:{\n                code:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\",\n                solution:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\",\n                tests:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\",\n                setup:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\",\n                description:\"");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\"\n            }\n        },\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,9,9,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,13,13,contextualElement);
          return morphs;
        },
        statements: [
          ["content","challenge.name",["loc",[null,[6,18],[6,36]]]],
          ["content","challenge.settings",["loc",[null,[7,21],[7,43]]]],
          ["content","challenge.code",["loc",[null,[9,22],[9,40]]]],
          ["content","challenge.solution",["loc",[null,[10,26],[10,48]]]],
          ["content","challenge.tests",["loc",[null,[11,23],[11,42]]]],
          ["content","challenge.setup",["loc",[null,[12,23],[12,42]]]],
          ["content","challenge.description",["loc",[null,[13,29],[13,54]]]]
        ],
        locals: ["challenge"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "kodr/components/export-arena-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("{\n    title:\"");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\",\n    challanges:[\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("    ]\n}\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[2,11],[2,25]]]],
        ["block","each",[["get","model.challenges",["loc",[null,[4,12],[4,28]]]]],[],0,null,["loc",[null,[4,4],[16,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/components/export-modal/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('kodr/components/export-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/components/export-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/iframe-sandbox', ['exports', 'ember', 'kodr/demo/iframe', 'kodr/sandbox/stuff'], function (exports, Ember, iframeTemplate, stuff) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        didInsertElement: function didInsertElement() {
            var that = this;
            this.$().hide();
            if (!this.get('show')) {
                this.$().show();
            }
            stuff['default'](window.location.origin + '/iframe.html', this.$()[0], function (context) {
                that.set('sandbox', context);
                context.load(iframeTemplate['default'], function () {
                    that.sendAction('sandboxLoaded', context);
                });
            });
        }
    });

});
define('kodr/components/import-arena-modal/component', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        importString: "",
        actions: {
            importChallenges: function importChallenges() {
                this.sendAction("importChallenges", this.get("importString"));
            }
        }
    });

});
define('kodr/components/import-arena-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "kodr/components/import-arena-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, LabeledRadioButton) {

	'use strict';

	exports['default'] = LabeledRadioButton['default'];

});
define('kodr/components/marked-math', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var MathJax = window.MathJax;
    var marked = window.marked;

    exports['default'] = Ember['default'].Component.extend({
        classNames: ['preview'],
        preview: null, // filled in by Init below
        buffer: null, // filled in by Init below
        mjRunning: false, // true when MathJax is processing
        oldText: null, // used to check if an update is needed
        math: false,
        //
        //  Get the preview and buffer DIV's
        //
        PreviewDone: function PreviewDone() {
            var text = "";
            if (this.get('math') && MathJax) {
                this.mjRunning = false;
                text = this.buffer.innerHTML;
                // replace occurrences of &gt; at the beginning of a new line
                // with > again, so Markdown blockquotes are handled correctly
                text = text.replace(/^&gt;/mg, '>');
            } else {
                text = this.get('model').get(this.get('observable'));
            }
            this.preview.innerHTML = marked(text);
        },
        Escape: function Escape(html, encode) {
            return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        },
        //
        //  Creates the preview and runs MathJax on it.
        //  If MathJax is already trying to render the code, return
        //  If the text hasn't changed, return
        //  Otherwise, indicate that MathJax is running, and start the
        //    typesetting.  After it is done, call PreviewDone.
        // 
        CreatePreview: function CreatePreview() {
            if (this.mjRunning) {
                return;
            }
            var text = this.get('model').get(this.get('observable'));
            if (text === this.oldtext) {
                return;
            }
            // text = this.Escape(text); //Escape tags before doing stuff
            this.buffer.innerHTML = this.oldtext = text;
            this.mjRunning = true;
            // MathJax.InputJax.TeX is undefined first time the page loads
            // don't know if it will cause a bug later but everything seems to work fine
            if (MathJax.InputJax.TeX) {
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, this.buffer], ["PreviewDone", this], ["resetEquationNumbers", MathJax.InputJax.TeX]);
            } else {
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, this.buffer], ["PreviewDone", this]);
            }
        },

        // renderMathMark: function () {
        //     var text = this.get('model').get(this.get('observable'));
        //     if (text === this.oldtext) { return; }
        //     text = this.Escape(text);
        //     this.preview.innerHTML = marked(katex.renderToString(text));
        // },

        didInsertElement: function didInsertElement() {
            var component = this;
            this.marked = marked;
            this.preview = this.$()[0];
            // element for MathJax
            this.buffer = this.$('<div>')[0];

            if (!this.get('model').get(this.get('observable'))) {
                this.get('model').set(this.get('observable'), "");
            }

            this.marked.setOptions({
                renderer: new marked.Renderer(),
                highlight: function highlight(code) {
                    if (window.hljs) {
                        return window.hljs.highlightAuto(code).value;
                    } else {
                        return code;
                    }
                },
                gfm: true,
                tables: true,
                breaks: false,
                pedantic: false,
                sanitize: false,
                smartLists: true,
                smartypants: false
            });
            var callback;
            if (this.get('math') && MathJax) {
                callback = this.callback = MathJax.Callback(["CreatePreview", this]);
                callback.autoReset = true;
            } else {
                callback = this.callback = this.PreviewDone.bind(this);
            }
            // var that = this;
            // this. once = function () {
            //     if(!that.isDestroyed){
            //         callback();
            //     } else {
            //         // because the observer is still attached
            //         this.removeObserver(that.get('observable'), this, once);
            //     }      
            // };
            this.get('model').addObserver(this.get('observable'), this.get('model'), this.callback);
            callback();
        },
        willDestroyElement: function willDestroyElement() {
            this.get('model').removeObserver(this.get('observable'), this.get('model'), this.callback);
        }
    });

});
define('kodr/components/profile-icon', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        classNames: ['profile-icon', 'img-circle', 'img-responsive'],
        tagName: 'img',
        didInsertElement: function didInsertElement() {

            var icon = blockies.create({ // All options are optional
                seed: this.get('seed'), // seed used to generate icon data, default: random
                // color: '#FF676D', // to manually specify the icon color, default: random
                // bgcolor: '#294268', // choose a different background color, default: white
                size: 15, // width/height of the icon in blocks, default: 10
                scale: 3 // width/height of each block in pixels, default: 5
            }).toDataURL();

            this.$().attr('src', icon);
        }
    });

});
define('kodr/components/py-console', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({

        write: function write(text, type) {
            console.log(text);
            this.get('console').Write(text, type);
        },
        clear: function clear() {
            this.get('console').Clear();
        },
        didInsertElement: function didInsertElement() {
            var component = this;
            var header = this.get('header') || 'This is a console for you to test your code!\nYou can either run your code in console to see what happens\nWhen you are ready try submitting your code to see the results\n';

            var jqconsole = component.$().jqconsole(header, "");

            component.set('console', jqconsole);

            this.EventBus.subscribe('console.write', this, this.write);
            this.EventBus.subscribe('console.clear', this, this.clear);

            // Abort prompt on Ctrl+Z.
            jqconsole.RegisterShortcut('Z', function () {
                jqconsole.AbortPrompt();
                handler();
            });
            // Move to line start Ctrl+A.
            jqconsole.RegisterShortcut('A', function () {
                jqconsole.MoveToStart();
                handler();
            });
            // Move to line end Ctrl+E.
            jqconsole.RegisterShortcut('E', function () {
                jqconsole.MoveToEnd();
                handler();
            });
            // Clear Console Ctrl+K.
            jqconsole.RegisterShortcut('K', function () {
                jqconsole.Clear();
                handler();
            });
            jqconsole.RegisterMatching('{', '}', 'brace');
            jqconsole.RegisterMatching('(', ')', 'paran');
            jqconsole.RegisterMatching('[', ']', 'bracket');

            // Handle a command.
            var handler = function handler(command) {
                if (command) {
                    component.sendAction(component.get('eval'), command);
                }
                jqconsole.Prompt(true, handler, function (command) {
                    // Continue line if can't compile the command.
                    try {
                        Function(command);
                    } catch (e) {
                        if (/[\[\{\(]$/.test(command)) {
                            return 1;
                        } else {
                            if (/\n\s*$/.test(command)) {
                                return false;
                            }
                            return 0;
                        }
                    }
                    return false;
                });
            };

            // Initiate the first prompt.
            handler();
        },
        willClearRender: function willClearRender() {
            this.EventBus.unsubscribe('console.write', this, this.write);
            this.EventBus.unsubscribe('console.clear', this, this.clear);
        }
    });

});
define('kodr/components/radio-button-input', ['exports', 'ember-radio-button/components/radio-button-input'], function (exports, RadioButtonInput) {

	'use strict';

	exports['default'] = RadioButtonInput['default'];

});
define('kodr/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, RadioButton) {

	'use strict';

	exports['default'] = RadioButton['default'];

});
define('kodr/components/select-2', ['exports', 'ember-select-2/components/select-2'], function (exports, Select2Component) {

	'use strict';

	/*
		This is just a proxy file requiring the component from the /addon folder and
		making it available to the dummy application!
	 */
	exports['default'] = Select2Component['default'];

});
define('kodr/components/x-option', ['exports', 'emberx-select/components/x-option'], function (exports, XOption) {

	'use strict';

	exports['default'] = XOption['default'];

});
define('kodr/components/x-select-blockless', ['exports', 'emberx-select-blockless/components/x-select-blockless'], function (exports, x_select_blockless) {

	'use strict';



	exports['default'] = x_select_blockless['default'];

});
define('kodr/components/x-select', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // possible passed-in values with their defaults:
    content: null,
    prompt: null,
    tagName: 'span',
    optionValuePath: 'id',
    optionLabelPath: 'title',
    action: Ember['default'].K, // action to fire on change

    // shadow the passed-in `selection` to avoid
    // leaking changes to it via a 2-way binding
    _selection: Ember['default'].computed.reads('selection'),
    _primativeList: true,
    init: function init() {
      this._super.apply(this, arguments);
      if (!this.get('content')) {
        this.set('content', []);
      }
      var first = this.get('content')[0];
      if (first && typeof first === 'object') {
        this.set('_primativeList', false);
      }
    },

    actions: {
      change: function change() {
        var selectEl = this.$('select')[0];
        var selectedIndex = selectEl.selectedIndex;
        var content = this.get('content');

        // decrement index by 1 if we have a prompt
        var hasPrompt = !!this.get('prompt');
        var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;

        var selection = content[contentIndex];

        // set the local, shadowed selection to avoid leaking
        // changes to `selection` out via 2-way binding
        this.set('_selection', selection);

        var changeCallback = this.get('action');
        changeCallback(selection);
        this.sendAction(this.get('changeAction'));
      }
    }
  });

});
define('kodr/controllers/application', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var toastr = window.toastr;

    var ApplicationController = Ember['default'].Controller.extend({
        updateCurrentPath: (function () {
            this.set('currentPath', this.get('currentPath'));
        }).observes('currentPath'),
        sockets: {
            notification: function notification(user, type, value) {
                console.log(arguments);
                if (this.get('session.isTeacher')) {
                    toastr.info('@' + user.username + ' was just awarded ' + value + ' ' + type);
                }
            },
            // When EmberSockets makes a connection to the Socket.IO server.
            connect: function connect() {
                if (this.get('session.isAuthenticated')) {
                    this.socket.emit('login', this.get('session.user_id'));
                }
                console.log('EmberSockets has connected...');
            },

            // When EmberSockets disconnects from the Socket.IO server.
            disconnect: function disconnect() {
                console.log('EmberSockets has disconnected...');
            }
        }
    });

    exports['default'] = ApplicationController;

});
define('kodr/controllers/arena-try', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var ArenaTryController = Ember['default'].Controller.extend({
        breadCrumb: 'arenas',
        breadCrumbPath: 'arenas',
        init: function init() {
            this._super();
        },
        currentTrial: (function () {
            return this.get('model.trials.firstObject');
        }).property('arena.challenges.[]'),
        actions: {}
    });

    exports['default'] = ArenaTryController;

});
define('kodr/controllers/arena', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        // needs: [],
        breadCrumb: 'arenas',
        breadCrumbPath: 'arenas',
        actions: {}
    });

});
define('kodr/controllers/arena/edit', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Controller.extend({
        breadCrumb: 'arena',
        breadCrumbPath: 'arena',
        needs: ['arena'],
        isCreating: (function () {
            return this.container.lookup('controller:application').get('currentPath').split('.').contains('create');
        }).property('currentPath'),
        canPublish: (function () {
            return this.get('model.canPublish') && this.get('model.challenges').filterBy('isPublished', true).length >= 1;
        }).property('model.challenges.[].isPublished'),
        challenges: (function () {
            return Ember['default'].ArrayProxy.createWithMixins(Ember['default'].SortableMixin, {
                sortProperties: ['order'],
                content: this.get('model.challenges')
            });
        }).property('model.challenges'),
        actions: {
            reset: function reset() {
                this.get('model').rollback();
            },
            save: function save() {
                var that = this;
                var model = this.get('model');
                model.save().then(function (arena) {
                    if (that.get('isCreating')) {
                        that.transitionToRoute('arena.edit', arena.id);
                    }
                })['catch'](function (xhr) {
                    console.error(xhr.message);
                    toastr.error(xhr.message);
                });
            },
            'delete': function _delete() {
                var newModel = this.get('model.isNew');
                this.get('model').destroyRecord();
                if (!newModel) {
                    this.get('model').save();
                }
                this.transitionToRoute('arenas');
            },
            publish: function publish() {
                var model = this.get('model');
                if (this.get('canPublish')) {
                    this.set('model.isPublished', true);
                    this.get('model').save().then(function (ch) {
                        console.log('published');
                    });
                } else {
                    toastr.info('You can not publish an Arena without having at least one published challenge');
                }
            },
            unPublish: function unPublish() {
                this.set('model.isPublished', false);
                this.get('model').save().then(function (ch) {
                    console.log('unPublished');
                });
            },
            add: function add() {
                this.transitionToRoute('challenges.create', {
                    queryParams: {
                        arena: this.get('model')
                    }
                });
            },
            removeChallenge: function removeChallenge(challenge) {
                if (confirm('Are you sure you want to remove this challenge?')) {
                    challenge.deleteRecord();
                    challenge.save();
                }
            },
            moveChallengeUp: function moveChallengeUp(challenge) {
                var challenge2;
                var index = this.get('challenges').indexOf(challenge);
                if (index > 0 && index < this.get('challenges.length')) {
                    challenge2 = this.get('challenges').objectAt(index - 1);
                    challenge.set("order", challenge.get('order') - 1);
                    challenge2.set("order", challenge2.get('order') + 1);
                    challenge.save();
                    challenge2.save();
                }
            },
            moveChallengeDown: function moveChallengeDown(challenge) {
                var challenge2;
                var index = this.get('challenges').indexOf(challenge);
                if (index > -1 && index < this.get('challenges.length') - 1) {
                    challenge2 = this.get('challenges').objectAt(index + 1);
                    challenge.set("order", challenge.get('order') + 1);
                    challenge2.set("order", challenge2.get('order') - 1);
                    challenge.save();
                    challenge2.save();
                }
            }

        }
    });

});
define('kodr/controllers/arena/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        userArena: (function () {
            return this.store.queryRecord('userArena', { arena: this.get('model.id'), user: this.get('session.user.id') });
        }).property('model.user')
    });

});
define('kodr/controllers/arenas/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        init: function init() {
            this._super();
            // this.addObserver('hasSandbox', this, function () {
            //     this.removeObserver('hasSandbox', this);
            //     var sb = this.get('sandbox');
            //     var console = this.get('console');
            //     var handler = function(msg) {
            //         console.Write('==> ' + msg + '\n');
            //     };

            //     sb.on('error', handler);
            //     sb.on('test.done', handler);
            //     sb.on('structure.done', handler);
            //     sb.on('log', handler);
            // });
        },
        arenaRoute: (function () {
            return this.get('session.isAuthenticated') ? 'userArena' : 'arena';
        }).property('session.isAuthenticated'),
        published: (function () {
            return this.get('model').filterBy('isPublished', true);
        }).property('[].isPublished'),
        actions: {}
    });

});
define('kodr/controllers/array', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('kodr/controllers/challenge', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        // needs: [],
        breadCrumb: 'arena',
        breadCrumbPath: 'arena',
        actions: {}
    });

});
define('kodr/controllers/challenge/edit', ['exports', 'kodr/utils/debounce', 'ember'], function (exports, debounce, Ember) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Controller.extend({
        needs: ['challenge', 'arena', 'application'],
        arena: Ember['default'].computed.alias("controllers.arena"),
        breadCrumb: 'edit',
        breadCrumbPath: 'arena.edit',
        evaluates: 'solution',
        importString: "",
        // queryParams: ['arena'],
        // originalArena: null,
        init: function init() {
            this._super();
        },
        isNew: function isNew() {
            var path = this.container.lookup('controller:application').get('currentPath').split('.');
            return path.contains('create') || path.contains('copy');
        },
        unPublish: function unPublish() {
            if (this.get('model.isPublished')) {
                this.set('model.isPublished', false);
            }
        },
        publish: function publish() {
            if (this.get('intentToPublish')) {
                this.set('intentToPublish', false);
                this.set('model.isPublished', true);
            }
        },
        test: function test(report) {
            var model = this.get('model');
            var result = report.passed;
            // console.log(report);
            if (report.score < model.get('exp')) {
                this.EventBus.publish('console.write', 'Awarded (' + report.score + "/" + model.get('exp') + ') - Solution to challenge should reach maximum score tests', 'error');
                result = false;
            }

            model.set('valid', result);
            if (result) {
                this.publish();
                toastr.success('All Clear' + (this.get('model.isPublished') ? '' : ' you can now publish'));
            } else {
                toastr.error('Tests didn\'t pass check console');
                this.unPublish();
            }
            this.save();
        },
        save: function save() {
            var model = this.get('model');
            var that = this;
            if (this.isNew()) {
                return model.save().then(function (ch) {
                    that.transitionToRoute('challenge.edit', ch);
                }, function (xhr) {
                    console.error(xhr.message);
                    toastr.error(xhr.message);
                });
            } else {
                return model.save().then(function (ch) {
                    model.set('contentChanged', false);
                }, function (xhr) {
                    console.error(xhr.message);
                    toastr.error(xhr.message);
                });
            }
        },
        actions: {
            run: debounce['default'](function () {
                // var controller = this;
                // var model = controller.get('model');

            }),
            test: function test(report) {
                this.test(report);
            },
            validate: function validate() {
                var controller = this;
                controller.EventBus.publish('challenge.test');
            },
            reset: function reset() {
                if (this.get('model.canReset')) {
                    this.get('model').rollback();
                }
            },
            save: function save() {
                var model = this.get('model');
                if (model.get('canSave')) {
                    if (model.get('isPublished')) {
                        this.send('validate');
                        return false;
                    }
                    this.save();
                }
            },
            'delete': function _delete() {
                var arena = this.get('arena');
                this.get('model').destroyRecord();
                if (arena) {
                    this.transitionToRoute('arena.edit');
                } else {
                    this.transitionToRoute('challenges');
                }
            },
            publish: function publish() {
                var model = this.get('model');
                if (!model.get('isPublished')) {
                    this.set('intentToPublish', true);
                    if (model.get('valid')) {
                        this.publish();
                        model.save().then(function () {
                            console.log('published');
                        })['catch'](function (err) {
                            console.log(err.stack);
                        });
                    } else {
                        this.send('validate');
                    }
                }
            },
            unPublish: function unPublish() {
                this.set('model.isPublished', false);
                this.save().then(function () {
                    console.log('unPublished');
                });
            }
        }
    });

});
define('kodr/controllers/forgotpass', ['exports', 'ember', 'simple-auth/mixins/login-controller-mixin', 'ember-validations'], function (exports, Ember, LoginControllerMixin, EmberValidations) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Controller.extend(LoginControllerMixin['default'], EmberValidations['default'].Mixin, {
        authenticator: 'simple-auth-authenticator:oauth2-password-grant',
        validations: {
            identification: {
                presence: true,
                length: {
                    minimum: 4
                }
            }
        },
        actions: {
            validate: function validate() {

                var that = this;
                return this.validate().then(function () {
                    Ember['default'].$.ajax({
                        type: 'POST',
                        url: '/api/users/forgotpass',
                        context: that,
                        data: that.getProperties('identification')
                    }).done(function (data) {
                        console.log(data);
                        toastr.success("Email sent");
                    }).fail(function (xhr) {
                        that.set('errorMessage', xhr.responseText);
                    });
                }, function () {
                    var errors = that.get('errors');
                    var fullErrors = [];
                    Object.keys(errors).forEach(function (val) {
                        if (errors[val] instanceof Array) {
                            errors[val].forEach(function (msg) {
                                fullErrors.push([val, msg].join(" "));
                            });
                        }
                    });
                    that.set('fullErrors', fullErrors);
                });
            }
        }
    });

});
define('kodr/controllers/group', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        // needs: [],
        breadCrumb: 'groups',
        breadCrumbPath: 'groups',
        actions: {}
    });

});
define('kodr/controllers/group/edit', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        breadCrumb: 'group',
        breadCrumbPath: 'group',
        // needs: ['group'],
        init: function init() {
            this._super();
            this.resetGroupOptions();
        },
        isCreating: (function () {
            return this.container.lookup('controller:application').get('currentPath').split('.').contains('create');
        }).property('currentPath'),
        getGroupOptionsFor: function getGroupOptionsFor(option) {
            var store = this.store;
            var dfd = DS['default'].PromiseArray.create({
                promise: Ember['default'].$.getJSON('api/groups/' + this.get('id') + '/' + option + 'Options').then(function (response) {
                    return response.map(function (record) {
                        record.id = record._id;
                        return store.push('user', record);
                    });
                })
            });
            return dfd;
        },
        resetGroupOptions: function resetGroupOptions() {
            this.set('teacherOptions', this.getGroupOptionsFor('teacher'));
            this.set('studentOptions', this.getGroupOptionsFor('student'));
            this.set('selectedTeachers', []);
            this.set('selectedStudents', []);
        },
        teacherOptions: [],
        studentOptions: [],
        selectedTeachers: [],
        selectedStudents: [],
        actions: {
            save: function save() {
                var that = this;
                if (this.get('model.hasDirtyAttributes')) {
                    this.get('model').save().then(function (g) {
                        if (this.get('currentPath').split('.').contains('create')) {
                            that.transitionToRoute('group.edit', g);
                        }
                    });
                }
                if (this.get('selectedTeachers').length) {
                    console.log(this.get('selectedTeachers').mapBy('id'));
                    Ember['default'].$.ajax({
                        url: '/api/groups/' + this.get('model.id') + '/members',
                        method: 'POST',
                        data: {
                            uids: this.get('selectedTeachers').mapBy('id')
                        }
                    }).done(function (members) {
                        that.store.pushPayload(members);
                        that.resetGroupOptions();
                    });
                }
                if (this.get('selectedStudents').length) {
                    Ember['default'].$.ajax({
                        url: '/api/groups/' + this.get('model.id') + '/members',
                        method: 'POST',
                        data: {
                            uids: this.get('selectedStudents').mapBy('id')
                        }
                    }).done(function (members) {
                        that.store.pushPayload(members);
                        that.resetGroupOptions();
                    });
                }
            },
            'delete': function _delete() {
                var newModel = this.get('model.isNew');
                this.get('model').destroyRecord();
                if (!newModel) {
                    this.get('model').save();
                }
                this.transitionToRoute('groups');
            },
            remove: function remove(member) {
                var that = this;
                Ember['default'].$.ajax({
                    url: '/api/groups/' + member.get('group.id') + '/members/' + member.get('data.user.id'),
                    type: 'DELETE'
                }).done(function (data) {
                    that.store.pushPayload(data);
                }).fail(function (err) {
                    console.log(err);
                });
            }
        }
    });

});
define('kodr/controllers/group/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        init: function init() {
            this._super();
            // this.addObserver('hasSandbox', this, function () {
            //     this.removeObserver('hasSandbox', this);
            //     var sb = this.get('sandbox');
            //     var console = this.get('console');
            //     var handler = function(msg) {
            //         console.Write('==> ' + msg + '\n');
            //     };

            //     sb.on('error', handler);
            //     sb.on('test.done', handler);
            //     sb.on('structure.done', handler);
            //     sb.on('log', handler);
            // });
        },
        actions: {}
    });

});
define('kodr/controllers/groups', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        // needs: [],
        actions: {}
    });

});
define('kodr/controllers/groups/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        actions: {
            remove: function remove(group) {
                if (confirm('Are you sure you want to remove this group?')) {
                    group.deleteRecord();
                    group.save();
                }
                return false;
            }
        }
    });

});
define('kodr/controllers/groups/make', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        actions: {
            submit: function submit(group) {
                var controller = this;
                Ember['default'].$.post('api/groups/many', this.get('model').getProperties(['name', 'from', 'to'])).done(function (res) {
                    controller.store.pushPayload(res);
                    controller.transitionToRoute('groups');
                }).fail(function (err) {
                    console.log(err);
                });
            }
        }
    });

});
define('kodr/controllers/login', ['exports', 'ember-validations', 'ember'], function (exports, EmberValidations, Ember) {

    'use strict';

    // import LoginControllerMixin from 'simple-auth/mixins/login-controller-mixin';
    var toastr = window.toastr;

    var LoginController = Ember['default'].Controller.extend(EmberValidations['default'].Mixin, {
        authenticator: 'simple-auth-authenticator:oauth2-password-grant',
        validations: {
            identification: {
                presence: true,
                length: {
                    minimum: 4
                }
            },
            password: {
                presence: true,
                length: {
                    minimum: 8
                }
            }
        },
        actions: {
            validate: function validate() {

                var that = this;
                return this.validate().then(function () {
                    that.send('authenticate');
                }, function () {
                    var errors = that.get('errors');
                    var fullErrors = [];
                    Object.keys(errors).forEach(function (val) {
                        if (errors[val] instanceof Array) {
                            errors[val].forEach(function (msg) {
                                fullErrors.push([val, msg].join(" "));
                            });
                        }
                    });
                    that.set('fullErrors', fullErrors);
                });
            },
            authenticate: function authenticate() {
                var that = this;
                var credentials = that.getProperties('identification', 'password');
                that.get('session').authenticate('authenticator:custom', credentials).then(null, function (error) {
                    that.set('errorMessage', JSON.parse(error));
                });
            },
            verify: function verify(uid) {
                var that = this;
                Ember['default'].$.post('api/users/' + uid + '/verify').done(function (res) {
                    toastr.success(res.message);
                    that.set('fullErrors', '');
                }).fail(function (xhr) {
                    console.log(xhr);
                    toastr.error(xhr);
                });
            }
        }
    });

    exports['default'] = LoginController;

});
define('kodr/controllers/object', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('kodr/controllers/quest', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        // needs: [],
        breadCrumb: 'quests',
        breadCrumbPath: 'quests',
        actions: {}
    });

});
define('kodr/controllers/quest/assign', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

    'use strict';

    /* global toastr */
    var toastr = window.toastr;

    exports['default'] = Ember['default'].Controller.extend({
        breadCrumb: 'quest',
        breadCrumbPath: 'quest',
        // needs: ['quest'],
        init: function init() {
            this._super();
        },
        groupsOptions: (function () {
            return this.store.find('group');
        }).property('selectedGroups'),
        unassignedUsersOptions: (function () {
            var store = this.store;
            return DS['default'].PromiseArray.create({
                promise: Ember['default'].$.getJSON('/api/quests/' + this.get('model.id') + '/unassignedUsersOptions').then(function (res) {
                    return res.map(function (record) {
                        record.id = record._id;
                        return store.push('user', record);
                    });
                })
            });
        }).property('selected'),
        added: [],
        selected: [],
        selectedGroups: [],
        actions: {
            assign: function assign() {
                var that = this;
                var groups = this.get('selectedGroups').mapBy('id');
                var users = this.get('selected').mapBy('id');

                if (groups.length || users.length) {
                    Ember['default'].$.ajax({
                        url: 'api/quests/' + this.get('model.id') + '/assign',
                        type: 'PUT',
                        data: {
                            groups: groups,
                            users: users
                        }
                    }).then(function (res) {
                        console.log(res);
                        that.store.pushMany('user', res.users);
                        return that.store.pushMany('userQuest', res.userQuests);
                    }, function (err) {
                        console.log(err);
                        toastr.error(err.responseText);
                        return false;
                    }).then(function (userQuests) {
                        that.get('model.userQuests').then(function (uqs) {
                            uqs.addObjects(userQuests);
                        });
                    });
                    this.set('selected', []);
                    this.get('selectedGroups', []);
                } else {
                    toastr.info('You need to pick a user or a group to assign');
                }
                return false;
            },
            remove: function remove(uq) {
                var that = this;
                Ember['default'].RSVP.all([uq.get('user.userQuests'), that.get('model.userQuests')]).then(function (arr) {
                    if (arr[0]) {
                        arr[0].removeObject(uq);
                    }
                    arr[1].removeObject(uq);
                    uq.destroyRecord();
                });
            }
        }
    });

});
define('kodr/controllers/quest/edit', ['exports', 'ember', 'kodr/models/requirement'], function (exports, Ember, Requirement) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        breadCrumb: 'quest',
        breadCrumbPath: 'quest',
        // needs: ['quest'],
        init: function init() {
            this._super();
        },
        challenges: (function () {
            return this.get('store').findAll('challenge');
        }).property(),
        arenas: (function () {
            return this.get('store').findAll('arena');
        }).property(),
        requirementsChanged: false,
        shouldSave: (function () {
            return this.get('requirementsChanged') || this.get('model.canSave');
        }).property('requirementsChanged', 'canSave'),
        actions: {
            save: function save() {
                var that = this;
                this.get('model').save().then(function (g) {
                    that.set('requirementsChanged', false);
                    if (this.container.lookup('controller:application').get('currentPath').split('.').contains('create')) {
                        that.transitionToRoute('quest.edit', g);
                    }
                })['catch'](function (xhr) {
                    that.set('errorMessage', xhr.responseText);
                });
            },
            'delete': function _delete() {
                if (confirm('Are you sure you want to delete this quest?')) {
                    var newModel = this.get('model.isNew');
                    this.get('model').destroyRecord();
                    if (!newModel) {
                        this.get('model').save();
                    }
                    this.transitionToRoute('quests');
                }
            },
            publish: function publish() {
                if (this.get('model.canPublish') && confirm('if you publish you can no longer change the value of this quest')) {
                    this.set('model.isPublished', true);
                    this.get('model').save();
                }
            },
            add: function add() {
                this.set('requirementsChanged', true);
                this.get('model.requirements').addObject(Requirement['default'].create({
                    model1: 'Challenge',
                    id1: null,
                    times: 1,
                    model2: 'Arena',
                    id2: null
                }));
            },
            requirementChanged: function requirementChanged() {
                this.set('requirementsChanged', true);
            },
            removeReq: function removeReq(req) {
                this.get('model.requirements').removeObject(req);
            }
        }
    });

});
define('kodr/controllers/quest/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        init: function init() {
            this._super();
            // this.addObserver('hasSandbox', this, function () {
            //     this.removeObserver('hasSandbox', this);
            //     var sb = this.get('sandbox');
            //     var console = this.get('console');
            //     var handler = function(msg) {
            //         console.Write('==> ' + msg + '\n');
            //     };

            //     sb.on('error', handler);
            //     sb.on('test.done', handler);
            //     sb.on('structure.done', handler);
            //     sb.on('log', handler);
            // });
        },
        actions: {}
    });

});
define('kodr/controllers/quests/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({

        actions: {
            remove: function remove(quest) {
                if (confirm('Are you sure you want to remove this quest?')) {
                    quest.deleteRecord();
                    quest.save();
                }
                return false;
            }
        }
    });

});
define('kodr/controllers/signup', ['exports', 'ember', 'ember-validations'], function (exports, Ember, EmberValidations) {

  'use strict';

  var toastr = window.toastr;
  var _ = window._;

  exports['default'] = Ember['default'].Controller.extend(EmberValidations['default'].Mixin, {
    lectureGroups: (function () {
      return _.range(1, 7);
    }).property(),
    labGroups: (function () {
      return _.map(_.range(19, 25), function (k) {
        return 'BI ' + k;
      }).concat(_.map(_.range(1, 46), function (k) {
        return 'ENG ' + k;
      }));
    }).property(),
    validations: {
      username: {
        presence: true,
        length: { minimum: 3 },
        format: {
          'with': /^[\w\-]+\.[\w\-]+$/,
          message: 'username can only be composed of first_name.last_name eg amr.draz'
        }
      },
      uniId: {
        format: {
          'with': /^\d\d-\d{3,5}$/,
          message: 'must enter a valid uni id eg. 13-1233'
        }
      },
      lectureGroup: {
        presence: true
      },
      labGroup: {
        presence: true
      },
      password: {
        length: { minimum: 8 },
        format: {
          'with': /^.{8,}$/,
          message: 'must contain at least one alphabel character and one digit'
        },
        confirmation: true
      },
      passwordConfirmation: {
        presence: true
      }
    },
    actions: {
      signup: function signup() {
        var that = this;
        if (!this.get("hasHonor")) {
          that.set('fullErrors', ['', "You must agree to the honor code by checking the checkbox bellow"]);
          return;
        }
        this.validate().then(function () {
          that.set('errorMessage', '');
          Ember['default'].$.ajax({
            type: 'POST',
            url: '/signup',
            context: that,
            data: that.getProperties('username', 'email', 'password', 'uniId', 'lectureGroup', 'labGroup', 'passwordConfirmation')
          }).done(function (res) {
            toastr.success(res);
            that.transitionToRoute('login', { queryParams: { email: that.get('email') } });
          }).fail(function (xhr) {
            that.set('errorMessage', xhr.responseText);
          });
        }, function () {
          var errors = that.get('errors');
          var fullErrors = [];
          Object.keys(errors).forEach(function (val) {
            if (errors[val] instanceof Array) {
              errors[val].forEach(function (msg) {
                fullErrors.push([val, msg].join(" "));
              });
            }
          });
          that.set('fullErrors', fullErrors);
        });
      }
    }
  });

});
define('kodr/controllers/trial', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var toastr = window.toastr;
    var swal = window.swal;

    exports['default'] = Ember['default'].Controller.extend({

        isChallengeTrialFunc: function isChallengeTrialFunc() {
            return this.container.lookup('controller:application').get('currentPath').split('.').contains('challenge');
        },
        isChallengeTrial: (function () {
            return this.isChallengeTrialFunc();
        }).property('currentPath'),

        breadCrumb: (function () {
            return this.get('isChallengeTrial') ? 'edit' : 'back to arena';
        }).property('isChallengeTrial'),
        breadCrumbPath: (function () {
            return this.get('isChallengeTrial') ? 'arena.edit' : 'userArena';
        }).property('isChallengeTrial'),
        needs: (function () {
            return [this.get('isChallengeTrial') ? 'challenge' : 'userArena'];
        }).property('isChallengeTrial'),
        challenge: (function () {
            return Ember['default'].ObjectProxy.create({
                content: this.get('model.challenge')
            });
        }).property("model.challenge"),
        // returns true if dirty but unsaved, so that mock trials show complete instead of resubmit
        isDirtyish: (function () {
            return this.get('model.hasDirtyAttributes') && !this.get('model.isNew');
        }).property('model.hasDirtyAttributes', 'model.isNew'),

        testError: function testError(errors) {
            var model = this.get('model');
            model.set('report', {
                errors: errors
            });
            model.set('complete', this._super(errors));
            this.save();
        },
        test: function test(report) {
            var model = this.get('model');
            var controller = this;
            model.set('report', report);
            model.set('complete', report.passed);
            this.save(function (model) {
                if (model.get('completed') === 1) {
                    swal({ title: "+" + model.get('exp') + " EXP", text: "For completeing this challenge", type: "success" }, function () {
                        console.log("swal stopped me from executing until ok");
                        controller.nextChallenge();
                    });
                } else if (model.get('completed') > 1) {
                    swal("Great Job", "You already completed this challenge so no points for you", "info");
                }
            });
        },
        nextChallenge: function nextChallenge() {
            if (!this.isChallengeTrialFunc()) {
                // var trials = this.get('controllers.userArena.trials');
                // var index = trials.indexOf(this.get('model'));
                // if (index < this.get('controllers.userArena.trials.length')-1) {
                //     this.transitionToRoute("userArena.trial", trials.objectAt(index+1));
                // } else {
                this.transitionToRoute("userArena", this.get('model.userArena'));
                // }
            }
        },
        save: function save(cb) {
            var model = this.get('model');
            if (!this.isChallengeTrialFunc()) {
                return model.save().then(cb);
            } else {
                if (model.get('complete')) {
                    swal("Great Job", "You could have earned " + model.get('challenge.exp') + " EXP if you where logged in", "success");
                } else {
                    toastr.info('You meight want to change those failures in your code, check the console');
                }
            }
        },
        actions: {
            run: function run() {
                // Happens in challenge component
            },
            test: function test(report) {
                this.test(report);
            }
        }
    });

});
define('kodr/controllers/user-arena', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        trials: (function () {
            return Ember['default'].ArrayProxy.createWithMixins(Ember['default'].SortableMixin, {
                sortProperties: ['order'],
                content: this.get('model.trials')
            });
        }).property('model.trials')
    });

});
define('kodr/controllers/user-arena/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        breadCrumb: 'arenas',
        breadCrumbPath: 'userArenas',
        needs: ['userArena'],
        arena: Ember['default'].computed.alias("controllers.userArena.model.arena"),
        trials: (function () {
            return Ember['default'].ArrayProxy.createWithMixins(Ember['default'].SortableMixin, {
                sortProperties: ['order'],
                content: this.store.query('trial', { arena: this.get('arena.id'), user: this.get('session.user.id') })
            });
        }).property('model.trials'),
        actions: {
            'try': function _try(trial) {
                this.transitionToRoute('userArena.trial', this.get('model'), trial);
            }
        }
    });

});
define('kodr/controllers/user', ['exports', 'ember', 'ember-data', 'ember-validations'], function (exports, Ember, DS, EmberValidations) {

    'use strict';

    var toastr = window.toastr;

    var UserController = Ember['default'].Controller.extend(EmberValidations['default'].Mixin, {
        validations: {
            password: {
                length: {
                    minimum: 8
                },
                format: {
                    'with': /^.{8,}$/,
                    message: 'must contain at least one alphabel character and one digit'
                },
                confirmation: true
            },
            passwordConfirmation: {
                presence: true
            }
        },
        group: null,
        groupOptions: (function () {
            var store = this.store;
            var dfd = DS['default'].PromiseArray.create({
                promise: Ember['default'].$.getJSON('api/groups/groupOptions').then(function (response) {
                    return response.map(function (record) {
                        record.id = record._id;
                        return store.push('group', record);
                    });
                })
            });
            return dfd;
        }).property('memberships.[]'),
        activitySeries: (function () {
            return [{
                name: 'Quantity',
                data: [4, 4]
            }, {
                name: 'Revenue',
                data: [10.0, 10.0]
            }];
        }).property(),
        isOwnPage: (function () {
            return this.get('session.user.id') === this.get('model.id');
        }).property('model.id'),
        actions: {
            join: function join(group) {
                var that = this;
                Ember['default'].$.post('api/groups/' + group.id + '/join').done(function (data) {
                    that.store.pushPayload(data);
                }).fail(function (err) {
                    toastr.error(err.statusText);
                });
            },
            leave: function leave(member) {
                var that = this;
                Ember['default'].$.ajax({
                    method: 'DELETE',
                    url: 'api/groups/' + member.get('data.group.id') + '/members/' + member.get('data.user.id')
                }).done(function (data) {
                    that.store.pushPayload(data);
                }).fail(function (err) {
                    toastr.error(err.statusText);
                });
            },
            changePass: function changePass() {
                var that = this;
                this.validate().then(function () {
                    if (that.get('session.isAdmin')) {
                        Ember['default'].$.ajax({
                            type: 'PUT',
                            url: '/api/users/' + that.get('model.id'),
                            context: that,
                            data: {
                                user: that.get('model').getProperties('password', 'passwordConfirmation')
                            }
                        }).done(function (res) {
                            toastr.success('passwordChanged');
                            that.set('session.access_token', res.access_token);
                            that.get('model').setProperties({
                                password: '',
                                passwordConfirmation: ''
                            });
                        }).fail(function (xhr) {
                            toastr.error(xhr.responseText);
                        });
                    } else {
                        Ember['default'].$.ajax({
                            type: 'PUT',
                            url: '/profile',
                            context: that,
                            data: {
                                user: that.get('model').getProperties('password', 'passwordConfirmation')
                            }
                        }).done(function (res) {
                            toastr.success('passwordChanged');
                            that.set('session.access_token', res.access_token);
                            that.get('model').setProperties({
                                password: '',
                                passwordConfirmation: ''
                            });
                        }).fail(function (xhr) {
                            toastr.error(xhr.responseText);
                        });
                    }
                }, function () {
                    var errors = that.get('errors');
                    var fullErrors = [];
                    Object.keys(errors).forEach(function (val) {
                        if (errors[val] instanceof Array) {
                            errors[val].forEach(function (msg) {
                                fullErrors.push([val, msg].join(" "));
                            });
                        }
                    });
                    that.set('fullErrors', fullErrors);
                });
            }
        }
    });

    exports['default'] = UserController;

});
define('kodr/controllers/user/edit', ['exports', 'ember', 'ember-validations'], function (exports, Ember, EmberValidations) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Controller.extend(EmberValidations['default'].Mixin, {
        // needs: ['group'],
        breadCrumb: 'user',
        breadCrumbPath: 'user',
        validations: {
            password: {
                length: {
                    minimum: 8
                },
                format: {
                    'with': /^.{8,}$/,
                    message: 'must contain at least one alphabel character and one digit'
                },
                confirmation: true
            },
            passwordConfirmation: {
                presence: true
            }
        },
        isCreating: (function () {
            return this.container.lookup('controller:application').get('currentPath').split('.').contains('create');
        }).property('currentPath'),
        isCreatingOrNotAdmin: (function () {
            return this.get('isCreating') || !this.get('model.isAdmin');
        }).property('isCreating', 'isAdmin'),
        actions: {
            save: function save() {
                var that = this;
                var model = this.get('model');
                if (this.get('isCreating')) {
                    model.save().then(function (user) {
                        that.transitionTo('user.edit', user);
                    }, function (xhr) {
                        console.error(xhr.message);
                        toastr.error(xhr.message);
                    });
                } else {
                    return model.save();
                }
            },
            activate: function activate() {
                Ember['default'].$.ajax({
                    url: 'api/users/' + this.get('model.id') + '/activate',
                    method: 'PUT'
                }).done(function (res) {
                    toastr.success(res.message);
                }).fail(function (xhr) {
                    toastr.error(xhr.responseText);
                });
            },
            verify: function verify() {
                Ember['default'].$.post('api/users/' + this.get('model.id') + '/verify').done(function (res) {
                    toastr.success(res.message);
                }).fail(function (xhr) {
                    toastr.error(xhr.responseText);
                });
            },
            'delete': function _delete() {
                this.get('model').destroyRecord();
                this.transitionToRoute('users');
            },
            changePass: function changePass() {
                var that = this;
                this.validate().then(function () {
                    Ember['default'].$.ajax({
                        type: 'PUT',
                        url: '/api/users/' + that.get('model.id'),
                        context: that,
                        data: {
                            user: that.get('model').getProperties('password', 'passwordConfirmation')
                        }
                    }).done(function (res) {
                        toastr.success('passwordChanged');
                        that.set('session.access_token', res.access_token);
                        that.get('model').setProperties({
                            password: '',
                            passwordConfirmation: ''
                        });
                    }).fail(function (xhr) {
                        toastr.error(xhr.responseText);
                    });
                }, function () {
                    var errors = that.get('errors');
                    var fullErrors = [];
                    Object.keys(errors).forEach(function (val) {
                        if (errors[val] instanceof Array) errors[val].forEach(function (msg) {
                            fullErrors.push([val, msg].join(" "));
                        });
                    });
                    that.set('fullErrors', fullErrors);
                });
            }
        }
    });

});
define('kodr/controllers/users', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var UsersController = Ember['default'].Controller.extend({
        // needs: [],
        breadCrumb: 'users',
        breadCrumbPath: 'users',
        actions: {}
    });

    exports['default'] = UsersController;

});
define('kodr/demo/basic-test-callbacks', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "\n{\n\n    \"$num\": function(num) {\n\n        return num.value > 100;  // Just return true/false\n\n    },\n\n    \"$num, $incr\": function(num, incr) {\n\n        if (num.value <= incr.value) {\n\n        // Return the failure message\n\n        return {failure: \"The increment must be smaller than the number.\"};\n\n        }\n\n        return true;\n\n    }\n\n}\n";

});
define('kodr/demo/basic-test-description', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "###Basic Test md\nThis is a description of this Challenge in Markdown(md) format\n\n---\n\n```javascript\nvar foo = 400;\n```\n\nand incriment it by a value smaller then `400`\n\nHere's me showing off some MathJax\n\nWhen $a \\ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\nsee the complete MathJax refrence [here](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n\n\n\nYou can create a table and specify column alignment with one or two colons:\n\n\n\n| Item      |    Value | Qty  |\n\n| :-------- | --------:| :--: |\n\n| Computer  | 1600 USD |  5   |\n\n| Phone     |   12 USD |  12  |\n\n| Pipe      |    1 USD | 234  |\n\nMay need to work on that ^^; \n\n";

});
define('kodr/demo/basic-test-setup', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "var foo = 400; foo += 3;";

});
define('kodr/demo/basic-test-solution', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "var foo = 400; foo += 3;";

});
define('kodr/demo/basic-test-structure', ['exports'], function (exports) {

	'use strict';


	exports['default'] = 'var $var = $num; $var += $incr;';

});
define('kodr/demo/basic-test-tests', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "// Challenge Tests go here\n\n/*\n\ndescribe(\"simple\", function () {\n\n  it(\"should describe a test\", function () {\n\n    expect(5).toEqual(5);\n\n    expect(3===3).toBe(true);\n\n  });\n\n  \n\n  it(\"async test\", function (done) {\n\n    done();\n\n  });\n\n})\n\n//*/\n";

});
define('kodr/demo/cow-test', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "\ndescribe(\"Cow\", function() {\n\n  describe(\"constructor\", function() {\n\n    it(\"should have a default name\", function() {\n\n      var cow = new Cow();\n\n      expect(cow.name).to.equal(\"Anon cow\");\n\n    });\n\n  it(\"should set cow's name if provided\", function() {\n\n      var cow = new Cow(\"Kate\");\n\n      expect(cow.name).to.equal(\"Kate\");\n\n    });\n\n  });\n\n  describe(\"#greets\", function() {\n\n    it(\"should throw if no target is passed in\", function() {\n\n      expect(function() {\n\n        (new Cow()).greets();\n\n      }).to.throw(Error);\n\n    });\n\n    it(\"should greet passed target\", function() {\n\n      var greetings = (new Cow(\"Kate\")).greets(\"Baby\");\n\n      expect(greetings).to.equal(\"Kate greets Baby\");\n\n    });\n\n  });\n\n});\n\n";

});
define('kodr/demo/cow', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "\n\nfunction Cow(name) { \n\n  this.name = name || \"Anon cow\"; \n\n} \n\nCow.prototype = { \n\n  greets: function(target) { \n\n    if (!target) \n\n      throw new Error(\"missing target\"); \n\n    return this.name + \" greets \" + target; \n\n  } \n\n}; \n\n";

});
define('kodr/demo/empty', ['exports'], function (exports) {

	'use strict';

	exports['default'] = "\n<html>\n<head>\n    </head>\n    <body>\n    </body>\n</script>\n</body>\n</html>\n";

});
define('kodr/demo/iframe', ['exports'], function (exports) {

	'use strict';

	exports['default'] = ['<html> ', '<head> ', '    <script src="iframe/main.js"></script> ', '    </head> ', '    <body> ', '    </body> ', '</script> ', '</body> ', '</html> '].join(' ');

});
define('kodr/helpers/fa-icon', ['exports', 'ember-cli-font-awesome/helpers/fa-icon'], function (exports, fa_icon) {

	'use strict';



	exports['default'] = fa_icon['default'];
	exports.faIcon = fa_icon.faIcon;

});
define('kodr/helpers/is-equal', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var leftSide = _ref2[0];
    var rightSide = _ref2[1];

    return leftSide === rightSide;
  });

});
define('kodr/helpers/is-not', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];

    return !value;
  });

});
define('kodr/helpers/markdown-helper', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    function escape(html, encode) {
        return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    }

    exports['default'] = Ember['default'].Handlebars.helper('markdown-helper', function (value, options) {
        marked.setOptions({
            renderer: new marked.Renderer(),
            highlight: function highlight(code) {
                return require('highlight.js').highlightAuto(code).value;
            },
            gfm: true,
            tables: true,
            breaks: false,
            pedantic: false,
            sanitize: false,
            smartLists: true
        });

        return marked(escape(value));
    });

});
define('kodr/helpers/read-path', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

    exports['default'] = Ember['default'].Helper.helper(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var object = _ref2[0];
        var path = _ref2[1];

        console.log(object, path);
        return Ember['default'].get(object, path);
    });

});
define('kodr/iframe-main', ['/kodr/sandbox/iframe-utils', '/vendor/jasmine/boot-jasmine', '/vendor/jasmine/jasmine-jsreporter'], function (utils, jasmine) {

    'use strict';

    // import sandbox from '/kodr/sandbox/iframe-sandbox';
    var kodrReporter = utils['default'].KodrReporter;
    // var rethrow = utils.rethrow;
    var jasmineEnv = jasmine['default'].getEnv();
    jasmineEnv.updateInterval = 1000;
    jasmine['default'].DEFAULT_TIMEOUT_INTERVAL = 1500;
    // Register reporters
    // jasmineEnv.addReporter(new jasmine.TrivialReporter());              //< for html
    jasmineEnv.addReporter(new jasmine['default'].JSReporter2(function (report) {
        kodrReporter(report);
    }));

});
define('kodr/initialize', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

  'use strict';

  exports['default'] = {
    name: 'ember-idx-utils',
    initialize: function initialize() {
      if (!Em['default'].IdxConfig) {
        Em['default'].IdxConfig = IdxConfig['default'].create();
      }
    }
  };

});
define('kodr/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'kodr/config/environment'], function (exports, initializerFactory, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = {
    name: 'App Version',
    initialize: initializerFactory['default'](name, version)
  };

});
define('kodr/initializers/authentication', ['exports', 'kodr/authenticators/custom', 'kodr/sessions/custom'], function (exports, CustomAuthenticator, CustomSession) {

    'use strict';

    exports.initialize = initialize;

    function initialize(container /*, application */) {
        // application.inject('route', 'foo', 'service:foo');
        // register the custom session so Ember Simple Auth can find it
        container.register('session:custom', CustomSession['default']);
        // register the custom authenticator so the session can find it
        container.register('authenticator:custom', CustomAuthenticator['default']);
    }

    exports['default'] = {
        name: 'authentication',
        initialize: initialize,
        before: 'simple-auth'
    };

});
define('kodr/initializers/bread-crumbs', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    name: "ember-breadcrumbs",
    initialize: function initialize(container, app) {
      app.inject("component:bread-crumbs", "router", "router:main");
      app.inject("component:bread-crumbs", "applicationController", "controller:application");
    }
  };

});
define('kodr/initializers/ember-idx-modal', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

    'use strict';

    exports['default'] = {
        name: 'ember-idx-modal',
        initialize: function initialize() {
            var Config = Em['default'].IdxConfig = Em['default'].IdxConfig ? Em['default'].IdxConfig : IdxConfig['default'].create();

            var defaultConfig = Config.getConfig('bs');
            if (!defaultConfig) {
                Config.addConfig('bs');
                defaultConfig = Config.getConfig('bs');
            }

            defaultConfig['modal'] = {
                classes: ['em-modal', 'modal', 'fade'],
                bodyClasses: ['modal-body'],
                titleClasses: ['modal-header'],
                footerClasses: ['modal-footer']
            };
        }
    };

});
define('kodr/initializers/event-bus', ['exports', 'kodr/services/event-bus'], function (exports, EventBus) {

  'use strict';

  exports['default'] = {
    name: 'event-bus',
    initialize: function initialize(container, application) {
      var eventBus = EventBus['default'].create();

      application.register('event-bus:current', eventBus, {
        instantiate: false
      });

      application.inject('component', 'EventBus', 'event-bus:current');
      application.inject('controller', 'EventBus', 'event-bus:current');
      application.inject('route', 'EventBus', 'event-bus:current');
    }
  };

});
define('kodr/initializers/export-application-global', ['exports', 'ember', 'kodr/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('kodr/initializers/simple-auth-oauth2', ['exports', 'simple-auth-oauth2/configuration', 'simple-auth-oauth2/authenticators/oauth2', 'simple-auth-oauth2/authorizers/oauth2', 'kodr/config/environment'], function (exports, Configuration, Authenticator, Authorizer, ENV) {

  'use strict';

  exports['default'] = {
    name: 'simple-auth-oauth2',
    before: 'simple-auth',
    initialize: function initialize(container, application) {
      Configuration['default'].load(container, ENV['default']['simple-auth-oauth2'] || {});
      container.register('simple-auth-authorizer:oauth2-bearer', Authorizer['default']);
      container.register('simple-auth-authenticator:oauth2-password-grant', Authenticator['default']);
    }
  };

});
define('kodr/initializers/simple-auth', ['exports', 'simple-auth/configuration', 'simple-auth/setup', 'kodr/config/environment'], function (exports, Configuration, setup, ENV) {

  'use strict';

  exports['default'] = {
    name: 'simple-auth',
    initialize: function initialize(container, application) {
      Configuration['default'].load(container, ENV['default']['simple-auth'] || {});
      setup['default'](container, application);
    }
  };

});
define('kodr/mixins/arena/modal-methods', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var _ = window._;

    exports['default'] = Ember['default'].Mixin.create({
        modalSubscribe: (function () {
            this.EventBus.subscribe('arena.edit.import', this, this.importChallenges);
        }).on('activate'),
        modalUnSubscribe: (function () {
            this.EventBus.unsubscribe('arena.edit.import', this, this.importChallenges);
        }).on('deactivate'),
        importChallenges: function importChallenges(string) {
            var challenges = JSON.parse(string);
            var arena = this.modelFor('arena');
            var store = this.get('store');
            console.log(challenges);
            challenges = _.map(challenges, function (ch) {
                ch.arena = arena;
                ch.isPublished = false;
                ch.valid = false;
                return store.createRecord('challenge', ch);
            });
            challenges.forEach(function (ch) {
                ch.save();
            });
            arena.notifyPropertyChange('challenges');
        },
        actions: {
            showModal: function showModal(name, model) {
                this.render(name, {
                    into: 'arena.edit',
                    outlet: 'modal',
                    model: model
                });
            },
            removeModal: function removeModal() {
                this.disconnectOutlet({
                    outlet: 'modal',
                    parentView: 'arena.edit'
                });
            }
        }
    });

});
define('kodr/mixins/arenas/save-model-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    actions: {
      save: function save() {
        var route = this;
        this.currentModel.save().then(function () {
          route.transitionTo('arenas');
        }, function () {
          console.log('Failed to save the model');
        });
      }
    },
    deactivate: function deactivate() {
      if (this.currentModel.get('isNew')) {
        this.currentModel.deleteRecord();
      } else {
        this.currentModel.rollback();
      }
    }
  });

});
define('kodr/mixins/challenge/challenge-common', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(Ember['default'].Evented, {
        evaluatedModelProperty: 'code',
        printReport: function printReport(report) {
            // var tests = report.tests.length;
            var passes = report.passes.length;
            var failures = report.failures.length;
            var controller = this;
            var pass = report.passed;
            var writeTest = function writeTest(test, pass) {
                controller.EventBus.publish('console.write', (test.fullName || test.message.replace(/\n/g, "\\n")) + '\n', pass);
            };
            // console.log(report);
            controller.EventBus.publish('console.write', "========= Running Submission " + (pass ? 'Passed' : 'Failed') + " ==========\n", pass ? 'result' : 'error');

            if (passes) {
                report.passes.forEach(function (test) {
                    writeTest(test, 'result');
                });
                if (failures) {
                    controller.EventBus.publish('console.write', '\n-----------------------------------\n\n');
                }
            }

            if (failures) {
                report.failures.forEach(function (test) {
                    writeTest(test, 'error');
                    if (test.failedExpectations) {
                        test.failedExpectations.forEach(function (fail) {
                            if (fail.message.indexOf('Error: Timeout')) {
                                writeTest(fail, 'error');
                            } else {
                                controller.EventBus.publish('console.write', '\tTimeout this test ran (' + test.durationSec + 's)\n', 'error');
                            }
                        });
                    }
                    // console.error(test.failedExpectations[0].stack);
                });
            }
            if (passes || failures) {
                controller.EventBus.publish('console.write', "==============================================\n", pass ? 'result' : 'error');
            }

            return report;
        },
        actions: {
            run: function run() {
                this.sendAction(this.get('run') || 'run');
            },
            test: function test() {
                this.sendAction(this.get('test') || 'test');
            },
            reset: function reset() {
                this.sendAction(this.get("reset") || 'rest');
            }
        }
    });

});
define('kodr/mixins/challenge/java/challenge-common-java', ['exports', 'kodr/mixins/challenge/challenge-common', 'ember'], function (exports, ChallengeCommon, Ember) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Mixin.create(ChallengeCommon['default'], {
        runInServer: function runInServer(code, model, cb) {
            Ember['default'].$.ajax({
                url: '/api/challenges/run',
                type: 'POST',
                data: {
                    code: code,
                    type: 'java',
                    inputs: model.get('inputs') ? model.get('inputs').mapBy("value") : model.get('challenge.inputs')
                }
            }).done(cb).fail(function (err) {
                toastr.error(err.statusText);
            });
        },
        testInServer: function testInServer(code, model, cb) {
            model = model.get('inputs') ? model : model.get('challenge');
            var data = model.getProperties(['type', 'tests', 'exp']);
            data.inputs = model.get('inputs').mapBy("value");
            Ember['default'].$.ajax({
                url: '/api/challenges/test',
                type: 'POST',
                data: {
                    code: code,
                    challenge: data
                }
            }).done(cb).fail(function (err) {
                toastr.error(err.responseText);
            });
        },
        parseSterr: function parseSterr(sterr) {
            var i,
                column_no_start,
                column_no_stop,
                errs,
                msg,
                line,
                fragment,
                lines = sterr.replace(/(Error.*line)/g, "\n$1").replace(/\^/g, "^\n").split('\n'),
                found = [];

            for (i = 0; i < lines.length;) {
                if (/^Error/.test(lines[i])) {
                    errs = lines[i++].match(/Error.* line (\d*).*:\d+: (.*)/);
                    line = +errs[1];
                    msg = errs[2];
                    if (~lines[i].indexOf('found')) {
                        i += 2;
                    } else {
                        fragment = lines[i++] + "\n";
                        column_no_start = lines[i++].length - 2;
                        column_no_stop = column_no_start + 1;
                    }
                } else if (/RuntimeError/.test(lines[i])) {
                    msg = lines[i++].match(/RuntimeError: (.*)/)[1];
                    line = +lines[i++].match(/at.*:(\d)/)[1];
                } else {
                    i++;
                    continue;
                }
                found.push({
                    line_no: line - 1,
                    column_no_start: column_no_start || 0,
                    column_no_stop: column_no_stop || 200,
                    message: msg,
                    fragment: fragment || '',
                    severity: "error"
                });
            }
            // console.log(found);
            return found;
        },
        validate: function validate() {
            var component = this;
            var model = component.get('model');
            component.EventBus.publish('console.show');
            component.EventBus.publish('console.write', 'Running Tests...\n');
            component.testInServer(model.get(component.get('evaluatedModelProperty')), model, function (res) {
                component.EventBus.publish('console.write', 'Compiled\n', res.sterr ? 'error' : 'result');
                if (res.sterr) {
                    component.EventBus.publish('console.write', res.sterr, 'error');
                    component.EventBus.publish('editor.lint', component.get('evaluatedModelProperty'), component.parseSterr(res.sterr));
                } else {
                    component.printReport(res.report);
                    component.sendAction(component.get("test"), res.report);
                }
            });
        },
        runCode: function runCode() {
            var component = this;
            var model = component.get('model');
            component.EventBus.publish('console.show');
            component.EventBus.publish('console.write', 'Compiling...\n');
            component.runInServer(model.get(component.get('evaluatedModelProperty')), model, function (res) {
                component.EventBus.publish('console.write', 'Compiled\n', res.sterr ? 'error' : 'result');
                if (res.sterr) {
                    component.EventBus.publish('console.write', res.sterr, 'error');
                    component.EventBus.publish('editor.lint', component.get('evaluatedModelProperty'), component.parseSterr(res.sterr));
                } else {
                    component.EventBus.publish('console.write', res.stout + "\n");
                    component.EventBus.publish('editor.lint', component.get('evaluatedModelProperty'), []);
                }
            });
            this.sendAction(this.get('run'));
        }
    });

});
define('kodr/mixins/challenge/javascript/challenge-common-javascript', ['exports', 'kodr/mixins/challenge/javascript/challenge-common-javascript', 'ember', 'kodr/runners/runner', 'kodr/demo/iframe'], function (exports, ChallengeCommon, Ember, Runner, iframeTemplate) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create(ChallengeCommon['default'], {
        jshint: function jshint(code, cb, options) {
            options = options || {};
            var console = this.get('console') || console;
            console.Write = console.Write || console.log;
            var sb = options.sandbox || this.get('csandbox') || window;
            JSHINT(code, {
                "asi": true, // supress simicolon warning
                "boss": true, // supress warning about using assignment inside while condition
                "eqnull": true,
                "expr": true, // you can type random expressions
                "esnext": false,
                "bitwise": true,
                "curly": false,
                "eqeqeq": true,
                "immed": false,
                "latedef": false,
                "newcap": false,
                "noarg": true,
                "undef": false,
                "strict": false,
                "trailing": false,
                "smarttabs": true
            });
            var errors = JSHINT.errors;
            if (!errors.length) {
                if (cb) {
                    cb.call(this, code, console, sb);
                }
            } else {
                this.testError({
                    lineNumber: errors[0].line,
                    message: errors[0].reason,
                    rest: errors
                });
            }

            // debugger;
            return errors;
        },
        testError: function testError(error) {
            var console = this.get('console') || console;
            console.Write = console.Write || console.log;
            console.Write('Syntax Error line(' + error.lineNumber + '): ' + error.message + '\n', 'error');
            return false;
        },
        evaluate: function evaluate() {
            var model = this.get('model');
            var component = this;
            var sb = component.get('sandbox');

            this.EventBus.publish('console.show');
            component.jshint(model.get(component.get('evaluatedModelProperty')), function (code, console, sb) {
                sb.load(iframeTemplate['default'], function () {
                    sb.evaljs(Runner['default'].test(code, model.get('tests')));
                });
            }, {
                sandbox: sb,
                run: true
            });
        },
        // Evaluate a line of code in the console window
        consoleEval: function consoleEval(command) {
            var that = this;
            this.jshint(command, function (code, console, sb) {
                console.Focus();
                sb.evaljs(code, function (error, res) {
                    if (error) {
                        that.EventBus.publish('console.write', error.name + ': ' + error.message + '\n', 'error');
                    } else {
                        var run = res !== undefined;
                        console.Write((run ? '==> ' + res : '\n' + code) + '\n', run ? 'result' : 'jqconsole-old-prompt');
                    }
                });
            });
        },
        actions: {
            // action called to run code in console
            runInConsole: function runInConsole() {
                this.EventBus.publish('console.show');
                this.consoleEval(this.get('model.' + this.get('evaluatedModelProperty')));
            },
            // what to do on sandbox load
            sandboxLoaded: function sandboxLoaded(sb) {
                var component = this;
                var log = function log(msg) {
                    console.log(msg);
                    component.EventBus.publish('console.write', msg.toString() + '\n');
                };

                sb.on('error', component.testError.bind(component));
                sb.on('test.done', component.parseReport.bind(component));
                // sb.on('structure.done', log);
                sb.on('log', log);
                console.log('loaded sandbox');
            }
        }
    });

});
define('kodr/mixins/challenge/python/challenge-common-python', ['exports', 'ember', 'kodr/mixins/challenge/challenge-common'], function (exports, Ember, ChallengeCommon) {

    'use strict';

    var $B = window.__BRYTHON__;
    var _b_ = $B.builtins;
    var Debugger = window.Brython_Debugger;
    var Tester = window.Brython_Tester;
    var $io = {
        __class__: $B.$type,
        __name__: 'io'
    };
    $io.__mro__ = [$io, _b_.object.$dict];

    exports['default'] = Ember['default'].Mixin.create(ChallengeCommon['default'], {
        canStep: false,
        isDebugging: false,
        isLastStep: false,
        isFirstStep: false,
        evaluatedModelProperty: 'solution',
        evaluatedModelObject: 'blueprint',
        writeToConsole: function writeToConsole(data, type) {
            this.EventBus.publish('console.write', data, type);
        },
        clearConsole: function clearConsole() {
            this.EventBus.publish('console.clear');
        },
        clearLint: function clearLint(editor) {
            this.EventBus.publish('editor.lint', editor || this.get('evaluatedModelProperty'), []);
        },
        goToLine: function goToLine(line) {
            this.EventBus.publish('editor.line', this.get('evaluatedModelProperty'), line);
        },
        resetSrc: function resetSrc() {
            var component = this;
            component.get('model').get(this.get('evaluatedModelObject')).set(component.get('evaluatedModelProperty'), "");
            component.goToLine(0);
        },
        runCode: function runCode(src) {
            this.clearConsole();
            this.clearLint();
            this.EventBus.publish('console.show');
            var t0 = Date.now();
            Debugger.run_no_debugger(src);
            // should send activity event about runtime
            // this.writeToConsole('\n<completed in ' + ((Date.now() - t0) * 1000.0) + ' ms >\n');
        },
        startDebugger: function startDebugger(src) {
            this.clearConsole();
            this.clearLint();
            this.EventBus.publish('console.show');
            Debugger.start_debugger(src, true);
        },
        stopDebugger: function stopDebugger() {
            Debugger.stop_debugger();
        },
        stepDebugger: function stepDebugger() {
            if (!Debugger.is_debugging()) {
                this.startDebugger();
            } else {
                Debugger.step_debugger();
            }
        },
        stepBackDebugger: function stepBackDebugger() {
            Debugger.step_back_debugger();
        },
        debug_started: function debug_started() {
            this.set('isLastStep', false);
            this.set('isFirstStep', true);
            this.set('isDebugging', Debugger.is_debugging());
            // doc('run').disabled = true;
            // doc('debug').disabled = true;
            // doc('step').disabled = false;
            // doc('stop').disabled = false;
            if (Debugger.is_recorded()) {
                if (Debugger.get_recorded_states().length > 0) {
                    this.goToLine(Debugger.get_recorded_states()[0].next_line_no);
                } else {
                    Debugger.stop_debugger();
                }
            } else {
                Debugger.step_debugger();
            }
        },
        debug_stoped: function debug_stoped() {
            this.set('isDebugging', Debugger.is_debugging());
            // doc('debug').disabled = false;
            // doc('run').disabled = false;
            // doc('step').disabled = true;
            // doc('back').disabled = true;
            // doc('stop').disabled = true;
        },
        debug_step: function debug_step(state) {
            this.clearConsole();
            this.writeToConsole(state.stdout + '\n');

            this.goToLine(state.next_line_no);

            this.set('isLastStep', Debugger.is_last_step());
            this.set('canStep', Debugger.can_step());
            this.set('isFirstStep', Debugger.is_first_step());
        },
        debug_error: function debug_error(err, Debugger) {
            // This is a syntax errorr
            if (Debugger.get_recorded_states().length === 0) {
                // doc('console').value = err.data;
                this.writeToConsole(err.data + '\n');
                Debugger.stop_debugger();
            }
            err.column_no_start = 0;
            err.column_no_stop = 200;
            err.severity = 'error';

            this.EventBus.publish('editor.lint', this.get('evaluatedModelProperty'), [err]);
        },
        testCode: function testCode(obj) {
            this.clearConsole();
            this.EventBus.publish('console.show');
            var report = Tester.run_test(obj);
            this.printReport(report);
            this.sendAction(this.get("test"), report);
        },
        test_error: function test_error(err) {
            this.writeToConsole(err.data + '\n');
            err.column_no_start = 0;
            err.column_no_stop = 200;
            err.severity = 'error';
            this.EventBus.publish('editor.lint', "tests", [err]);
        },
        actions: {
            run: function run() {
                this.runCode(this.get('model').get(this.get('evaluatedModelObject')).get(this.get('evaluatedModelProperty')));
            },
            test: function test() {
                this.testEvent();
            },
            step: function step() {
                this.stepDebugger();
            },
            back: function back() {
                this.stepBackDebugger();
            },
            debug: function debug() {
                this.startDebugger(this.get('model').get(this.get('evaluatedModelObject')).get(this.get('evaluatedModelProperty')));
            },
            stop: function stop() {
                this.stopDebugger();
            },
            reset: function reset() {
                this.resetSrc();
                this.sendAction(this.get('reset'));
            }
        },
        didInsertElement: function didInsertElement() {
            window.brython(1);
            $B.brython_path = window.location.origin + "/brython/www/src/";
            $B.path = [window.location.origin + "/brython/www/src"];
            var component = this;

            var cout = {
                __class__: $io,
                write: function write(data) {
                    component.writeToConsole(data);
                    return _b_.None;
                },
                flush: function flush() {}
            };
            $B.stdout = $B.modules._sys.stdin = cout;
            $B.stderr = $B.modules._sys.stdin = cout;
            $B.stdin = $B.modules._sys.stdin = {
                __class__: $io,
                __original__: true,
                closed: false,
                len: 1,
                pos: 0,
                read: function read() {
                    return prompt();
                },
                readline: function readline() {
                    return prompt();
                }
            };
            _b_.input = function input(arg) {
                var stdin = $B.imported.sys && $B.imported.sys.stdin || $B.stdin;
                // $B.stdout.write(arg);
                if (stdin.__original__) {
                    val = prompt(arg);
                    return val ? val : '';
                }
                var val = _b_.getattr(stdin, 'readline')();
                val = val.split('\n')[0];
                if (stdin.len === stdin.pos) {
                    _b_.getattr(stdin, 'close')();
                }
                // $B.stdout.write(val+'\n');
                return val;
            };

            Debugger.on_debugging_started(component.debug_started.bind(component));
            Debugger.on_debugging_end(component.debug_stoped.bind(component));
            Debugger.on_debugging_error(component.debug_error.bind(component));
            Debugger.on_step_update(component.debug_step.bind(component));

            Tester.init();
            Tester.on_test_error(component.test_error.bind(component));
        },
        testEvent: function testEvent() {},
        runEvent: function runEvent() {},
        registerEvents: (function () {
            this.EventBus.subscribe('challenge.test', this, this.testEvent);
            this.EventBus.subscribe('challenge.run', this, this.runEvent);
        }).on('didInsertElement'),
        unregisterEvents: (function () {
            this.EventBus.unsubscribe('challenge.test', this, this.testEvent);
            this.EventBus.unsubscribe('challenge.run', this, this.runEvent);
        }).on('willClearRender')
    });

});
define('kodr/mixins/serializable', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Mixin.create({
        serialize: function serialize() {
            var propertyNames = this.get('propertyNames') || [];
            return this.getProperties(propertyNames);
        },

        deserialize: function deserialize(hash) {
            this.setProperties(hash);
        }
    });

});
define('kodr/mixins/users/save-model-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    actions: {
      save: function save() {
        var route = this;
        this.currentModel.save().then(function () {
          route.transitionTo('users');
        }, function () {
          console.log('Failed to save the model');
        });
      }
    },
    deactivate: function deactivate() {
      if (this.currentModel.get('isNew')) {
        this.currentModel.deleteRecord();
      } else {
        this.currentModel.rollback();
      }
    }
  });

});
define('kodr/modals/export-arena-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "kodr/modals/export-arena-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["inline","export-arena-modal",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[2,27],[2,32]]]]],[],[]]],["loc",[null,[2,0],[2,34]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 13
          }
        },
        "moduleName": "kodr/modals/export-arena-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","bs-modal",[],["title","Logout","close","removeModal"],0,null,["loc",[null,[1,0],[3,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/modals/import-arena-modal/controller', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        importString: "",
        actions: {
            importChallenges: function importChallenges() {
                this.EventBus.publish("arena.edit.import", this.get("importString"));
            }
        }
    });

});
define('kodr/modals/import-arena-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "kodr/modals/import-arena-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          return morphs;
        },
        statements: [
          ["element","action",["ok"],["on","submit","target",["get","view",["loc",[null,[2,41],[2,45]]]]],["loc",[null,[2,8],[2,47]]]],
          ["inline","textarea",[],["value",["subexpr","@mut",[["get","importString",["loc",[null,[4,23],[4,35]]]]],[],[]]],["loc",[null,[4,6],[4,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 13
          }
        },
        "moduleName": "kodr/modals/import-arena-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","bs-modal",[],["title","Import Challenges","ok","importChallenges","close","removeModal"],0,null,["loc",[null,[1,0],[7,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/models/arena', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var _ = window._;
    var attr = DS['default'].attr;

    exports['default'] = DS['default'].Model.extend({
        name: attr('string', {
            defaultValue: "New Arena"
        }),
        description: attr('string', {
            defaultValue: "A new Arena"
        }),
        fllow: attr('string', {
            defaultValue: "any"
        }),
        fllowType: ['any', 'sequencial'],
        isPublished: attr('boolean', { defaultValue: false }),
        challenges: DS['default'].hasMany('challenge', { async: true, inverse: 'arena' }),
        trials: DS['default'].hasMany('trial', { async: true, inverse: 'arena' }),
        users: DS['default'].hasMany('userArena', { async: true, inverse: 'arena' }),
        author: DS['default'].belongsTo('user', { async: true, inverse: 'arenas' }),

        canSave: (function () {
            return !this.get('isSaving') && this.get('hasDirtyAttributes') || this.get('isNew');
        }).property('hasDirtyAttributes'),
        canReset: (function () {
            return !this.get('isSaving') && this.get('hasDirtyAttributes') && !this.get('isNew');
        }).property('hasDirtyAttributes'),
        canPublish: (function () {
            return !this.get('hasDirtyAttributes') && !this.get('isPublished');
        }).property('hasDirtyAttributes', 'isPublished'),

        getJson: function getJson() {
            var v,
                ret = [];
            for (var key in this) {
                if (this.hasOwnProperty(key)) {
                    v = this[key];
                    if (v === 'toString') {
                        continue;
                    } // ignore useless items
                    if (Ember.typeOf(v) === 'function') {
                        continue;
                    }
                    ret.push(key);
                }
            }
            return this.getProperties.apply(this, ret);
        }
    });

});
define('kodr/models/challenge-content', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('kodr/models/challenge', ['exports', 'ember-data', 'kodr/models/mixed'], function (exports, DS, Mixed) {

    'use strict';

    var attr = DS['default'].attr;
    exports['default'] = DS['default'].Model.extend({
        name: attr('string', {
            defaultValue: "New Challenge"
        }),
        type: attr('string', {
            defaultValue: 'python'
        }),
        order: attr('number', {
            defaultValue: 0
        }),
        group: attr('string', {
            defaultValue: null
        }),
        exp: attr('number', {
            defaultValue: 10
        }),
        blueprint: attr('mixed', {
            defaultValue: function defaultValue(model) {
                var obj = {};
                switch (model.get("type")) {
                    case "python":
                        obj = {
                            language: "python",
                            description: "",
                            solution: "",
                            setup: "",
                            tests: ""
                        };
                        break;
                }
                return Mixed['default'].create(obj);
            }
        }),

        // "import": attr('string'),
        // inputs: attr('javaInput', {
        //     defaultValue: []
        // }),

        status: attr('string', {
            defaultValue: "unPublished"
        }),
        statusOptions: ['unPublished', 'Beta', 'Published'],
        isPublished: attr('boolean', {
            defaultValue: false
        }),
        valid: attr('boolean', {
            defaultValue: false
        }),
        arena: DS['default'].belongsTo('arena', {
            async: true,
            inverse: 'challenges'
        }),
        author: DS['default'].belongsTo('user', {
            async: true,
            inverse: 'challenges'
        }),

        expOptions: [{
            rank: 'none',
            points: 0
        }, {
            rank: "direct",
            points: 10
        }, {
            rank: "simple",
            points: 20
        }, {
            rank: "easy",
            points: 40
        }, {
            rank: "medium",
            points: 80
        }, {
            rank: "challenging",
            points: 160
        }, {
            rank: "hard",
            points: 320
        }],

        isJava: (function () {
            return this.get('type') === 'java';
        }).property('type'),
        isJS: (function () {
            return this.get('type') === 'javascript';
        }).property('type'),
        isPython: (function () {
            return this.get('type') === 'python';
        }).property('type'),

        contentChanged: false,

        // relationshipChanged: false,
        canSave: (function () {
            return !this.get('isSaving') && this.get('hasDirtyAttributes') || this.get('isNew') || this.get('contentChanged');
        }).property('hasDirtyAttributes', 'isSaving', 'isNew', 'contentChanged'),
        canReset: (function () {
            return !this.get('isSaving') && this.get('hasDirtyAttributes') && !this.get('isNew');
        }).property('hasDirtyAttributes', 'isSaving'),
        canPublish: (function () {
            return !this.get('canSave') && !this.get('isPublished') && this.get('valid');
        }).property('canSave'),

        set: function set(keyName, value) {
            this._super(keyName, value);
            if (keyName.indexOf('blueprint.') > -1) {
                // a property of `blueprint` has changed => notify observers of `blueprint`
                this.notifyPropertyChange('blueprint');
                this.set('contentChanged', true);
            }
        }

    });

});
define('kodr/models/group', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        name: DS['default'].attr('string', {
            defaultValue: "new group"
        }),
        exp: DS['default'].attr('number'),
        members: DS['default'].hasMany('member', {
            async: true,
            inverse: 'group'
        })
    });

});
define('kodr/models/member', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var attr = DS['default'].attr;
    exports['default'] = DS['default'].Model.extend({
        uname: attr('string'),
        gname: attr('string'),
        status: attr('string'),
        role: attr('string'),
        isActive: attr('boolean'),
        exp: attr('number'),
        user: DS['default'].belongsTo('user', {
            async: true,
            inverse: 'memberships'
        }),
        group: DS['default'].belongsTo('group', {
            async: true,
            inverse: 'members'
        }),

        roles: ['subscriber', 'leader', 'owner'],

        isSubscriber: function isSubscriber() {
            return this.get('role') === 'subscriber';
        },
        isLeader: function isLeader() {
            return this.get('role') === 'subscriber';
        }
    });

});
define('kodr/models/mixed', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _ = window._;

  exports['default'] = Ember['default'].Object.extend({
    init: function init() {
      this.set('propertyKeys', Object.keys(this.__ember_meta__.proto));
      this.set('original', this.__ember_meta__.proto);
      this._super.apply(this, arguments);
    },
    set: function set(path, value) {
      this._super(path, value);
      if (this.propertyKeys && path !== "propertyKeys" && path !== "original" && !this.propertyKeys.contains(path)) {
        this.propertyKeys.push(path);
      }
    },
    propertyKeys: null,
    original: null,
    toJSON: function toJSON() {
      var propertyKeys = _.chain(this.propertyKeys).pull('original').pull('propertyKeys').value();
      return this.getProperties(propertyKeys);
    }
  });

});
define('kodr/models/quest', ['exports', 'ember-data', 'kodr/models/requirement'], function (exports, DS, Requirement) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        name: DS['default'].attr('string', {
            defaultValue: "new Quest"
        }),
        description: DS['default'].attr('string'),
        rp: DS['default'].attr('number'),
        requirements: DS['default'].attr('questRequirement', { defaultValue: [] }),
        userQuests: DS['default'].hasMany('userQuest', {
            async: true,
            inverse: 'quest'
        }),
        isPublished: DS['default'].attr('boolean', { defaultValue: false }),
        users: (function () {
            return this.get('userQuests').getEach('user');
        }).property('userQuests.[].relationshipsLoaded'),

        canSave: (function () {
            return this.get('isNew') || !this.get('isSaving') && this.get('hasDirtyAttributes') && !this.get('isPublished');
        }).property('hasDirtyAttributes', 'isPublished'),
        canReset: (function () {
            return !this.get('isSaving') && this.get('hasDirtyAttributes') && !this.get('isNew');
        }).property('hasDirtyAttributes'),
        canPublish: (function () {
            return !this.get('canSave') && !this.get('isPublished');
        }).property('canSave')
        // usersOptions: function() {
        //     var store = this.store;
        //     var dfd = DS.PromiseArray.create({
        //         promise: Ember.$.getJSON('api/quests/' + this.get('id') + '/usersOptions').then(function(response) {
        //             return response.map(function(record) {
        //                 record.id = record._id;
        //                 return store.push('user', record);
        //             });
        //         })
        //     });
        //     return dfd;
        // }.property('users.[]')
    });

});
define('kodr/models/requirement', ['exports', 'ember', 'kodr/app'], function (exports, Ember, App) {

    'use strict';

    exports['default'] = Ember['default'].Object.extend({
        user: null,
        complete: null,
        completed: null,
        init: function init() {
            this._super();
            this.setProperties({
                'modifier1': this.get('id1') ? 'specific' : 'any',
                'modifier2': this.get('id2') ? 'specific' : 'any'
            });
        },

        isAny1: (function () {
            return this.get('modifier1') === 'any';
        }).property('modifier1'),
        isAny2: (function () {
            return this.get('modifier2') === 'any';
        }).property('modifier2'),
        isChallenge: (function () {
            return this.get('model1') === 'Challenge';
        }).property('model1'),
        isMultiple: (function () {
            return this.get('times') > 1;
        }).property('times'),
        progressInCSS: (function () {
            return "width:" + this.get('completed') * 100 / this.get('times') + "%;";
        }).property('completed', 'times'),

        serialize: function serialize() {
            var obj = this.getProperties(['model1', 'id1', 'model2', 'id2', 'times']);
            if (this.get('isAny1')) {
                delete obj.id1;
            }
            if (this.get('isAny2')) {
                delete obj.id2;
            }
            return obj;
        },

        getPropretiesTypeHash: function getPropretiesTypeHash(model) {
            var hash = {};
            App['default'][model].__ember_meta__.cache.attributes.forEach(function (key, value) {
                hash[key] = value.type;
            });
            return hash;
        }
    });

});
define('kodr/models/trial', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    exports['default'] = DS['default'].Model.extend({
        work: DS['default'].attr('mixed'),
        blueprint: DS['default'].attr('mixed'),
        input: DS['default'].attr('string'),
        times: DS['default'].attr('number'),
        exp: DS['default'].attr('number'),
        order: DS['default'].attr('number'),
        started: DS['default'].attr('boolean'),
        complete: DS['default'].attr('boolean'),
        completed: DS['default'].attr('number'),
        report: DS['default'].attr(),
        challenge: DS['default'].belongsTo('challenge', { async: true }),
        user: DS['default'].belongsTo('user'),
        arena: DS['default'].belongsTo('arena'),
        userArena: DS['default'].belongsTo('userArena'),

        canSubmit: (function () {
            return !this.get('complete') || this.get('hasDirtyAttributes') || this.get('contentChanged');
        }).property('complete', 'hasDirtyAttributes', 'contentChanged'),

        contentChanged: false,
        save: function save() {
            this.set('contentChanged', false);
            return this._super.apply(this, arguments);
        },
        set: function set(keyName, value) {
            this._super(keyName, value);
            if (keyName.indexOf('blueprint.') > -1 || keyName.indexOf('work.') > -1) {
                // a property of `blueprint` has changed => notify observers of `blueprint`
                this.notifyPropertyChange(keyName);
                this.set('contentChanged', true);
            }
        }
    });

});
define('kodr/models/user-arena', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var attr = DS['default'].attr;
    exports['default'] = DS['default'].Model.extend({
        exp: attr('number'),
        completed: attr('number'),
        user: DS['default'].belongsTo('user', { inverse: 'userArenas', async: true }),
        arena: DS['default'].belongsTo('arena', { inverse: 'users', async: true }),
        trials: DS['default'].hasMany('trials', { inverse: 'userArena', async: true })
    });

});
define('kodr/models/user-quest', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var attr = DS['default'].attr;
    exports['default'] = DS['default'].Model.extend({
        name: attr('string'),
        description: attr('string'),
        rp: attr('number'),
        requirements: attr('questRequirement'),
        complete: attr('boolean'),
        hash: (function () {
            return '#' + this.get('id');
        }).property('id'),
        quest: DS['default'].belongsTo('Quest', {
            async: true,
            inverse: 'userQuests'
        }),
        user: DS['default'].belongsTo('User', {
            async: true,
            inverse: 'userQuests'
        })
    });

});
define('kodr/models/user', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var attr = DS['default'].attr;
    var hasMany = DS['default'].hasMany;

    exports['default'] = DS['default'].Model.extend({
        uniId: attr('string'),
        username: attr('string'),
        email: attr('string'),
        exp: attr('number', { defaultValue: 0 }),
        rp: attr('number', { defaultValue: 0 }),
        role: attr('string'),
        activated: attr('boolean'),
        flags: attr(),

        challenges: hasMany('challenge', { async: true, inverse: 'author' }),
        arenas: hasMany('arena', { async: true, inverse: 'author' }),

        trials: hasMany('trial', { async: true, inverse: 'user' }),
        userArenas: hasMany('userArena', { async: true, inverse: 'user' }),

        memberships: hasMany('member', { async: true, inverse: 'user' }),

        userQuests: hasMany('userQuest', { async: true, inverse: 'user' }),

        roles: ['student', 'teacher'],

        isStudent: (function () {
            return this.get('role') === 'student';
        }).property('role'),
        isTeacher: (function () {
            return this.get('role') === 'teacher';
        }).property('role'),
        isAdmin: (function () {
            return this.get('role') === 'admin';
        }).property('role'),
        canJoinGroups: (function () {
            return !this.get('memberships.length') || !this.get('isStudent');
        }).property('memberships.[]', 'role')
    });

});
define('kodr/router', ['exports', 'ember', 'kodr/config/environment'], function (exports, Ember, config) {

    'use strict';

    var Router = Ember['default'].Router.extend({
        location: config['default'].locationType
    });

    Router.reopen({
        notifyGoogleAnalytics: (function () {
            return ga('send', 'pageview', {
                'page': this.get('url'),
                'title': this.get('url')
            });
        }).on('didTransition')
    });

    Router.map(function () {
        this.route('login', {
            path: 'login',
            queryParams: ['email']
        });
        this.route('forgotpass');
        this.route('logout');
        this.route('signup');
        this.route('about');
        this.route('profile');
        this.route('index', {
            path: '/'
        });
        this.resource('quest', {
            path: 'quest/:quest_id'
        }, function () {
            this.route('edit');
            this.route('assign');
        });
        this.resource('quests', {
            path: '/quests'
        }, function () {
            this.route('create');
        });
        this.resource('group', {
            path: 'group/:group_id'
        }, function () {
            this.route('edit');
        });
        this.resource('groups', {
            path: '/groups'
        }, function () {
            this.route('create');
            this.route('make');
        });
        this.resource('user', {
            path: 'user/:user_id'
        }, function () {
            this.route('edit');
        });
        this.resource('users', function () {
            this.route('create');
        });
        this.route('userArena', {
            path: '/arena/:user_arena_id' //used to load a user arena
        }, function () {
            this.route('trial', {
                path: '/try/:trial_id' //used to load trial
            });
        });

        this.resource('userArenas', {
            path: '/user-arenas' //used to load user arenas
        }, function () {});

        this.resource('challengeTrial', {
            path: '/trial/:challenge_id'
        });
        this.resource('arena', {
            path: '/arenas/:arena_id'
        }, function () {
            this.route('edit');
            this.resource('challenge', {
                path: 'challenge/:challenge_id'
            }, function () {
                this.route('edit');
                this.route('try');
                this.route('copy');
            });
            this.resource('challenges', {
                path: 'challenge'
            }, function () {
                this.route('create');
            });
        });
        this.resource('arenas', {
            path: '/arenas'
        }, function () {
            this.route('create');
        });
        this.route('trial');
    });

    exports['default'] = Router;

});
define('kodr/routes/application', ['exports', 'simple-auth/mixins/application-route-mixin', 'ember'], function (exports, ApplicationRouteMixin, Ember) {

    'use strict';

    var toastr = window.toastr;

    exports['default'] = Ember['default'].Route.extend(ApplicationRouteMixin['default'], {
        actions: {
            loading: function loading() /*transition, originRoute*/{
                // displayLoadingSpinner();
                // this.woof.info('did you know that the best programs are lazy ones');
                // substate implementation when returning `true`
                return true;
            },
            error: function error(reason) {
                console.log(reason.stack);
                toastr.error(reason.responseText);
            },
            authorizationFailed: function authorizationFailed() {
                // stops Ember Simple Auth default redirect behavior on 401 errors
            }
        }
    });

});
define('kodr/routes/arena', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ArenaRoute = Ember['default'].Route.extend({
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {},
    // renderTemplate: function() {},
    // beforeModel: function() {},
    // afterModel: function() {},

    // model: function(params) {
    //     return this.store.find('arena', params.arena_id);
    // }
  });

  exports['default'] = ArenaRoute;

});
define('kodr/routes/arena/edit', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'kodr/mixins/arena/modal-methods', 'ember'], function (exports, AuthenticatedRouteMixin, ModalMethodsMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], ModalMethodsMixin['default'], {
        setupController: function setupController(controller, model) {
            model.reload();
            controller.set('model', model);
        },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.modelFor('arena');
        }
    });

});
define('kodr/routes/arena/index', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';


    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        //     controller.set('model', model);
        //     // controller.set('currentChallenge', model.get('arena.challenges.lastObject'));
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {

        // },

        // model: function() {
        //     var arena = this.modelFor('arena');
        //     var record = this.store.createRecord('userArena', {
        //         arena:arena,
        //     });
        //     // record.save();
        //     return record.save();
        // }
    });

});
define('kodr/routes/arenas', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.store.findAll('arena');
        }
    });

});
define('kodr/routes/arenas/create', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'kodr/mixins/arena/modal-methods', 'ember'], function (exports, AuthenticatedRouteMixin, ModalMethodsMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], ModalMethodsMixin['default'], {
        controllerName: 'arena.edit',
        deactivate: function deactivate() {
            var model = this.modelFor('arenas.create');
            if (model.get('isNew')) {
                model.deleteRecord();
            }
        },
        // setupController: function(controller, model) {
        //   this.controllerFor('arenaEdit').set('model', model);
        // },
        renderTemplate: function renderTemplate() {
            this.render('arena.edit');
        },
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.store.createRecord('arena');
        }
    });

});
define('kodr/routes/arenas/edit', ['exports', 'ember', 'kodr/mixins/arenas/save-model-mixin'], function (exports, Ember, SaveModelMixin) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend(SaveModelMixin['default'], {});

});
define('kodr/routes/arenas/index', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    actions: {
      remove: function remove(model) {
        if (confirm('Are you sure?')) {
          model.destroyRecord();
        }
      }
    },
    model: function model() {
      return this.store.findAll('arena');
    }
  });

});
define('kodr/routes/arenas/new', ['exports', 'ember', 'kodr/mixins/arenas/save-model-mixin'], function (exports, Ember, SaveModelMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(SaveModelMixin['default'], {
    model: function model() {
      return this.store.createRecord('arena');
    }
  });

});
define('kodr/routes/challenge-trial', ['exports', 'ember', 'ember-data', 'simple-auth/mixins/authenticated-route-mixin', 'kodr/models/mixed'], function (exports, Ember, DS, AuthenticatedRouteMixin, Mixed) {

    'use strict';

    var ChallengeTrialRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        afterModel: function afterModel(trial) {
            this.transitionTo('trial', trial.get('arena'), trial);
        },
        // afterModel: function() {},
        model: function model(params) {
            var store = this.store;
            var session = this.get('session');
            return DS['default'].PromiseObject.create({
                promise: store.find('challenge', params.challenge_id).then(function (challenge) {
                    var trial = {
                        challenge: challenge.id,
                        work: Mixed['default'].create({
                            solution: challenge.get('blueprint.setup')
                        }),
                        blueprint: challenge.get('blueprint').toJSON(),
                        user: session.user_id
                    };
                    if (session.get('flags') && session.get('flags.isControl')) {
                        trial.work.set('solution', '');
                    }
                    return Ember['default'].$.ajax({
                        url: 'api/trials',
                        method: 'POST',
                        data: {
                            trial: trial
                        }
                    });
                }).then(function (response) {
                    var trial = response.trial;
                    trial.id = trial._id;
                    trial = store.push('trial', trial);
                    return trial;
                })
            });
        }
    });

    exports['default'] = ChallengeTrialRoute;

});
define('kodr/routes/challenge', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ChallengeRoute = Ember['default'].Route.extend({
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {},
    // renderTemplate: function() {},
    // beforeModel: function() {},
    // afterModel: function() {},

    // model: function(params) {
    //     return this.store.find('challenge', params.id);
    // }
  });

  exports['default'] = ChallengeRoute;

});
define('kodr/routes/challenge/copy', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'kodr/models/mixed', 'ember'], function (exports, AuthenticatedRouteMixin, Mixed, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    controllerName: 'challenge.edit',
    // activate: function() {},
    deactivate: function deactivate() {
      var model = this.modelFor('challenge.copy');
      if (model.get('isNew')) {
        model.deleteRecord();
      }
    },
    // setupController: function(controller, model) {
    //   // controller.needs('challenge.edit').set('model', model);
    // },
    renderTemplate: function renderTemplate() {
      this.render('challenge.edit');
    },
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model() {
      var challenge = this.modelFor('challenge').serialize();
      challenge.arena = this.modelFor('arena');
      challenge.blueprint = Mixed['default'].create(challenge.blueprint);
      challenge.isPublished = false;
      console.log(challenge);

      return this.store.createRecord('challenge', challenge);
    }
  });

});
define('kodr/routes/challenge/edit', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        // this.controllerFor('trial').set('model', model);
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            var challenge = this.modelFor('challenge');
            return challenge;
        },
        actions: {}
    });

});
define('kodr/routes/challenge/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        // this.controllerFor('trial').set('model', model);
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {
        //     var challenge = this.modelFor('challenge');
        //     this.transitionTo('userArena.challenge', );
        // },
        // afterModel: function() {},

        // model: function() {
        //     var userArena = this.modelFor('userArena');
        //     return challenge;
        // }
    });

});
define('kodr/routes/challenge/try', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'kodr/models/mixed', 'ember'], function (exports, AuthenticatedRouteMixin, Mixed, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        setupController: function setupController(controller, model) {
            this.controllerFor('trial').set('model', model);
        },
        renderTemplate: function renderTemplate() {
            this.render('trial');
        },
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            var challenge = this.modelFor('challenge');
            var trial = {
                challenge: challenge,
                work: Mixed['default'].create({ solution: challenge.get('blueprint.setup') }),
                blueprint: challenge.get('blueprint')
            };
            if (this.get('session.flags') && this.get('session.flags.no_setup')) {
                trial.work.set('solution', '');
            }
            var record = this.store.createRecord('trial', trial);
            return record;
        }
    });

});
define('kodr/routes/challenges', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.store.findAll('challenge');
        }
    });

});
define('kodr/routes/challenges/create', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    controllerName: 'challenge.edit',
    // activate: function() {},
    deactivate: function deactivate() {
      var model = this.modelFor('challenges.create');
      if (model.get('isNew')) {
        model.deleteRecord();
      }
    },
    // setupController: function(controller, model) {
    //   // controller.needs('challenge.edit').set('model', model);
    // },
    renderTemplate: function renderTemplate() {
      this.render('challenge.edit');
    },
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model(params) {
      var arena = this.modelFor('arena');
      return this.store.createRecord('challenge', {
        arena: arena || null
      });
    }
  });

});
define('kodr/routes/group', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  var GroupRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {},
    // renderTemplate: function() {},
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model(params) {
      return this.store.findRecord('group', params.group_id);
    }
  });

  exports['default'] = GroupRoute;

});
define('kodr/routes/group/edit', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        setupController: function setupController(controller, model) {
            model.reload();
            controller.set('model', model);
            // model.get('members').then(function (ms) {
            //     controller.get('selected').push(ms);
            // });
        },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.modelFor('group');
        }
    });

});
define('kodr/routes/group/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        //     controller.set('model', model);
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function(model) {
        //     return model.get('members');
        // },

        // model: function(params) {
        //     // record.save();
        //     return this.modelfor('group');
        // }
    });

});
define('kodr/routes/groups', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    var GroupsRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.store.findAll('group');
        }
    });

    exports['default'] = GroupsRoute;

});
define('kodr/routes/groups/create', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    controllerName: 'group.edit',
    // activate: function() {},
    deactivate: function deactivate() {
      var model = this.modelFor('challenges.create');
      if (model && model.get('isNew')) {
        model.deleteRecord();
      }
    },
    // setupController: function(controller, model) {
    //   this.controllerFor('groupEdit').set('model',model);
    // },
    renderTemplate: function renderTemplate() {
      this.render('group.edit');
    },
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model() {
      return this.store.createRecord('group');
    }
  });

});
define('kodr/routes/groups/make', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    model: function model() {
      return Ember['default'].Object.create({ name: '', from: 0, to: 0 });
    }
  });

});
define('kodr/routes/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {}
    // renderTemplate: function() {},
    beforeModel: function beforeModel() {
      if (this.get('session.isAuthenticated')) {
        this.transitionTo('arenas');
      } else {
        this.transitionTo('login');
      }
    }
  });
  // afterModel: function() {},

  // model: function() {
  //     return [1,2,3];
  // }

});
define('kodr/routes/profile', ['exports', 'ember', 'simple-auth/mixins/authenticated-route-mixin'], function (exports, Ember, AuthenticatedRouteMixin) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        controllerName: 'user.index',
        setupController: function setupController(controller, model) {
            model.reload();
            model.get('userQuests');
            model.get('memberships');

            controller.set('model', model);
        },
        renderTemplate: function renderTemplate() {
            this.render('user.index');
        },
        afterModel: function afterModel(model) {
            return Ember['default'].RSVP.all([model.get('userQuests'), model.get('memberships')]);
        },
        model: function model() {
            return this.get('session.user');
        }
    });

});
define('kodr/routes/quest', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  var QuestRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {},
    // renderTemplate: function() {},
    // beforeModel: function() {},
    // afterModel: function() {},

    // model: function(params) {
    //     return this.store.find('arena', params.arena_id);
    // }
  });

  exports['default'] = QuestRoute;

});
define('kodr/routes/quest/edit', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        setupController: function setupController(controller, model) {
            model.reload();
            controller.set('model', model);
        },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.modelFor('quest');
        }
    });

});
define('kodr/routes/quest/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        //     controller.set('model', model);
        //     // controller.set('currentChallenge', model.get('arena.challenges.lastObject'));
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {

        // },

        // model: function() {
        //     var arena = this.modelFor('arena');
        //     var record = this.store.createRecord('userArena', {
        //         arena:arena,
        //     });
        //     // record.save();
        //     return record.save();
        // }
    });

});
define('kodr/routes/quests', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    var QuestsRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},

        model: function model() {
            return this.store.findAll('quest');
        }
    });

    exports['default'] = QuestsRoute;

});
define('kodr/routes/quests/create', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    controllerName: 'quest.edit',
    // activate: function() {},
    deactivate: function deactivate() {
      var model = this.modelFor('quests.create');
      if (model && model.get('isNew')) {
        model.deleteRecord();
      }
    },
    // setupController: function(controller, model) {
    //   this.controllerFor('groupEdit').set('model',model);
    // },
    renderTemplate: function renderTemplate() {
      this.render('quest.edit');
    },
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model() {
      return this.store.createRecord('quest');
    }
  });

});
define('kodr/routes/signup', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('kodr/routes/trial', ['exports', 'ember', 'kodr/models/mixed'], function (exports, Ember, Mixed) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        afterModel: function afterModel(trial) {
            if (trial.work === undefined) {
                trial.set('work', Mixed['default'].create({ solution: trial.get('challenge.blueprint.setup') }));
            }
            if (this.get('session.flags') && this.get('session.flags.no_setup') && !trial.get('started')) {
                trial.work.set('solution', '');
            }
            if (!trial.get('started')) {
                trial.set('started', true).save();
            }
        }
    });

});
define('kodr/routes/user-arena', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    var UserArenaRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {},
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {},
        model: function model(params) {
            var store = this.store;
            return store.findRecord('userArena', params.user_arena_id);
        }
    });

    exports['default'] = UserArenaRoute;

});
define('kodr/routes/user-arena/index', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        //     controller.set('model', model);
        //     // controller.set('currentChallenge', model.get('arena.challenges.lastObject'));
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        model: function model(params) {
            return this.modelFor('userArena');
        }
    });

});
define('kodr/routes/user-arena/trial', ['exports', 'ember', 'kodr/models/mixed'], function (exports, Ember, Mixed) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        controllerName: 'trial',
        renderTemplate: function renderTemplate() {
            this.render('trial');
        },
        model: function model(params) {
            return this.store.find('trial', params.trial_id);
        },
        afterModel: function afterModel(trial) {
            if (trial.get('work') === undefined) {
                trial.set('work', Mixed['default'].create({
                    solution: trial.get('challenge.blueprint.setup')
                }));
            }
            if (trial.get('blueprint') === undefined) {
                trial.set('blueprint', Mixed['default'].create(trial.get('challenge.blueprint').toJSON()));
            }
            if (this.get('session.flags') && this.get('session.flags.no_setup') && !trial.get('started')) {
                trial.work.set('solution', '');
            }
            if (!trial.get('started')) {
                trial.set('started', true);
                trial.save();
            }
        }
    });

});
define('kodr/routes/user-arena/try', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
        // activate: function() {},
        // deactivate: function() {},
        // setupController: function(controller, model) {
        //     controller.set('model', model);
        //     // controller.set('currentChallenge', model.get('arena.challenges.lastObject'));
        // },
        // renderTemplate: function() {},
        // beforeModel: function() {},
        // afterModel: function() {
        // },
        // model: function() {
        //     var arena = this.modelFor('userArena');
        //     // record.save();
        //     return record.save();
        // }
    });

});
define('kodr/routes/user-arenas', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    model: function model() {
      return this.store.findAll('userArena');
    }
  });

});
define('kodr/routes/user-arenas/index', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    model: function model() {
      return this.modelFor('userArenas');
    }
  });

});
define('kodr/routes/users', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  var UsersRoute = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    // activate: function() {},
    // deactivate: function() {},
    // setupController: function(controller, model) {},
    // renderTemplate: function() {},
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model(params) {
      return this.store.findAll('user');
    }
  });

  exports['default'] = UsersRoute;

});
define('kodr/routes/users/create', ['exports', 'simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, AuthenticatedRouteMixin, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(AuthenticatedRouteMixin['default'], {
    controllerName: 'user.edit',
    // activate: function() {},
    deactivate: function deactivate() {
      var model = this.modelFor('users.create');
      if (model && model.get('isNew')) {
        model.deleteRecord();
      }
    },
    // setupController: function(controller, model) {
    //   this.controllerFor('groupEdit').set('model',model);
    // },
    renderTemplate: function renderTemplate() {
      this.render('user.edit');
    },
    // beforeModel: function() {},
    // afterModel: function() {},

    model: function model() {
      return this.store.createRecord('user');
    }
  });

});
define('kodr/routes/users/edit', ['exports', 'ember', 'kodr/mixins/users/save-model-mixin'], function (exports, Ember, SaveModelMixin) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend(SaveModelMixin['default'], {});

});
define('kodr/routes/users/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    actions: {
      remove: function remove(model) {
        if (confirm('Are you sure?')) {
          model.destroyRecord();
        }
      }
    },
    model: function model() {
      return this.store.find('user');
    }
  });

});
define('kodr/routes/users/new', ['exports', 'ember', 'kodr/mixins/users/save-model-mixin'], function (exports, Ember, SaveModelMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(SaveModelMixin['default'], {
    model: function model() {
      return this.store.createRecord('user');
    }
  });

});
define('kodr/runners/runner', ['exports'], function (exports) {

    'use strict';

    exports['default'] = {
        mocha: function mocha(code, tests) {
            return ['try {', '  window.code = JSON.parse(' + JSON.stringify(JSON.stringify(code)) + ');', code, '// Begin Tests', tests, '// End Tests', '', '  window.mocha.run();', '} catch(e) {', '  rethrow(e, JSON.parse(' + JSON.stringify(JSON.stringify(tests)) + '),2);', '}', true].join('\n');
        },
        test: function test(code, tests) {
            return ['try {', '  window.code = JSON.parse(' + JSON.stringify(JSON.stringify(code)) + ');', code, '// Begin Tests', tests, '// End Tests', '', ' jasmine.getEnv().execute();\n    if(!jasmine.getJSReport()) {\n        window.parent.stuffEmit("waiting");\n        window.parent.stuffEmit("log", "waiting...");\n    }', '} catch(e) {', '  rethrow(e, JSON.parse(' + JSON.stringify(JSON.stringify(tests)) + '),2);', '}', true].join('\n');
        },

        structure: function structure(code, struct, callbacks) {
            return ['try {', '  var code = JSON.parse(' + JSON.stringify(JSON.stringify(code)) + ');', '  var struct = function () {' + struct + '};', '  var callbacks = ' + (callbacks || "{}") + ';', '  window.parent.stuffEmit("structure.done",{', '      result: Structured.match(code, struct, {varCallbacks: callbacks}),', '      errorMessage: callbacks', '  });', '} catch(e) {', '  rethrow(e, JSON.parse(' + JSON.stringify(JSON.stringify(code + struct + callbacks)) + '),0);', '}', true].join('\n');
        }
    };

});
define('kodr/sandbox/iframe-sandbox', ['exports'], function (exports) {

    'use strict';

    function Sandbox(options) {
        "use strict";
        options = options || {};
        var parentElement = options.parentElement || document.body;

        var blacklist = ['console.log', 'alert', 'confirm', 'prompt'];

        function blacklistify(blacklist) {
            return '' + blacklist + ' = function() {} ';
        }

        // Code will be run in an iframe
        this.iframe = document.createElement('iframe');
        this.iframe.style.display = 'none';
        parentElement.appendChild(this.iframe);

        // quiet stubs out all loud functions (log, alert, etc)
        options.quiet = options.quiet || false;

        // blacklisted functions will be overridden
        options.blacklist = options.blacklist || (options.quiet ? blacklist : []);
        for (var i in options.blacklist) {
            this.iframe.contentWindow.eval(blacklistify(options.blacklist[i]));
        }

        // Copy over all variables to the iFrame
        var win = this.iframe.contentWindow;
        var variables = options.variables || {};
        var nestedKeys;
        Object.keys(variables).forEach(function (key) {
            nestedKeys = key.split('.');
            nameSpaceFor(win, nestedKeys)[nestedKeys[nestedKeys.length - 1]] = variables[key];
        });
    }
    // Used for getting variables under a namespace for redefining
    // ie, console.log

    function nameSpaceFor(_x, _x2) {
        var _again = true;

        _function: while (_again) {
            var namespace = _x,
                keys = _x2;
            _again = false;

            if (keys.length == 1) {
                return namespace;
            } else {
                _x = namespace[keys[0]];
                _x2 = keys.slice(1, keys.length);
                _again = true;
                continue _function;
            }
        }
    }
    // When we evaluate, we'll need to take into account:
    //   Setup the HTML?
    //   Run the JavaScript
    //  
    Sandbox.prototype.evaluate = function (code) {
        return this.iframe.contentWindow.eval(code);
    };
    Sandbox.prototype.exec = function () /*...*/{
        var context = this.iframe.contentWindow,
            args = [].slice.call(arguments),
            functionToExec = args.shift();

        // Pass in the context as the first argument.
        args.unshift(context);

        return functionToExec.apply(context, args);
    };
    Sandbox.prototype.get = function (property) {
        var context = this.iframe.contentWindow;
        return context[property];
    };
    Sandbox.prototype.set = function (property, value) {
        var context = this.iframe.contentWindow;
        context[property] = value;
    };
    Sandbox.prototype.destroy = function () {
        if (this.iframe) {
            this.iframe.parentNode.removeChild(this.iframe);
            this.iframe = null;
        }
    };

    exports['default'] = Sandbox;

});
define('kodr/sandbox/iframe-utils', ['exports'], function (exports) {

    'use strict';

    exports.rethrow = rethrow;

    // var expect = chai.expect;
    // var assert = chai.assert;
    // mocha.setup({
    //     ui: 'bdd',
    //     reporter: JSONReporter,
    //     // reporter: 'html',
    //     ignoreLeaks: true
    // });
    function generateStackstrace(error, code) {
        var lines = code.split("\n");
        return ["" + error.name + ": " + error.message, "  at line " + error.lineNumber + 1 + ":" + error.columnNumber, "", "" + [error.lineNumber - 1] + " : " + lines[error.lineNumber - 2], "" + [error.lineNumber] + " : " + lines[error.lineNumber - 1], "" + [error.lineNumber + 1] + ">: " + lines[error.lineNumber], "" + [error.lineNumber + 2] + " : " + lines[error.lineNumber + 1], "" + [error.lineNumber + 3] + " : " + lines[error.lineNumber + 2]].join("\n");
    }
    function rethrow(e, tests, offset) {
        var error = e;
        try {
            if (window[e.name]) {
                error = new window[e.name](e.message);
                error.type = e.type;
                error["arguments"] = e["arguments"];

                // Firefox
                if (e.lineNumber) {
                    error.lineNumber = e.lineNumber - offset;
                }
                if (e.columnNumber) {
                    error.columnNumber = e.columnNumber;
                }

                // Others
                if (!e.lineNumber || !e.lineNumber) {
                    var errorPosition = e.stack.split("\n")[1].match(/(\d+):(\d+)\)$/);
                    error.lineNumber = errorPosition[1] - offset;
                    error.columnNumber = +errorPosition[2];
                }

                if (error.lineNumber) {
                    error.stack = generateStackstrace(error, tests);
                }
            }
        } catch (er) {
            error = er;
        } finally {
            window.parent.stuffEmit("error", error);
        }
    }
    // Deep clone that only grabs strings and numbers

    // function cleanObject(error, depth) {
    //     if (!error || depth > 5) {
    //         return null;
    //     }

    //     depth = depth || 0;

    //     var response = {};
    //     for (var key in error) {
    //         try {
    //             if (key[0] === "_" || key[0] === "$" || key === 'ctx' || key === 'parent') {
    //                 // Skip underscored variables
    //             } else if (typeof(error[key]) === 'string' || typeof(error[key]) === 'number') {
    //                 response[key] = error[key];
    //             } else if (typeof(error[key]) === 'object') {
    //                 response[key] = cleanObject(error[key], depth + 1);
    //             }
    //         } catch (e) {
    //             response[key] = 'Unable to process this result.';
    //         }
    //     }

    //     return response;
    // }
    // function JSONReporter(runner) {
    //     var self = this;
    //     // Mocha.reporters.Base.call(this, runner);

    //     /**
    //      * Return a plain-object representation of `test`
    //      * free of cyclic properties etc.
    //      *
    //      * @param {Object} test
    //      * @return {Object}
    //      * @api private
    //      */

    //     function clean(test) {
    //         return {
    //             title: test.title,
    //             fullTitle: test.fullTitle(),
    //             duration: test.duration
    //             //, dirty:test
    //         };
    //     }

    //     var tests = [],
    //         failures = [],
    //         passes = [];

    //     runner.on('test end', function(test) {
    //         tests.push(test);
    //     });

    //     runner.on('pass', function(test) {
    //         passes.push(test);
    //     });

    //     runner.on('fail', function(test) {
    //         failures.push(test);
    //     });

    //     runner.on('end', function() {
    //         var obj = {
    //             stats: self.stats,
    //             tests: tests.map(clean),
    //             failures: failures.map(clean),
    //             passes: passes.map(clean)
    //         };
    //         window.parent.stuffEmit('test.done', obj);
    //         // process.stdout.write(JSON.stringify(obj, null, 2));
    //     });
    // }
    //
    function inspect(report) {
        report.suites.forEach(function (suite) {
            suite.specs.forEach(function (spec) {
                report.tests.push(spec);
                if (spec.passed) {
                    report.passes.push(spec);
                } else {
                    report.failures.push(spec);
                }
            });
        });
        report.passed = !report.failures.length;
    }
    var KodrReporter = function kodrReporter(report) {

        report.tests = [];
        report.failures = [];
        report.passes = [];

        inspect(report);

        window.parent.stuffEmit('test.done', report);
    };
    var rethrow = rethrow;

    exports.KodrReporter = KodrReporter;

});
define('kodr/sandbox/stuff', ['exports'], function (exports) {

    'use strict';

    'use strict';
    // **stuff.js** provides a secure and convinient way to sandbox untrusted
    // html/js/css code in an iframe.

    // Setup
    // -----
    var global = window;
    // Keep a reference to all created iframe elements.
    var iframes = [],
        noop = function noop() {};

    // stuff
    // -----

    // Creates a new `Context` with a runner iframe on preferably a different
    // origin and calls the callback with the new `Context` object that is
    // ready for interaction. The iframe is appended to `el` if specified
    // otherwise it's added to the body element.

    function stuff(url, options, cb) {
        if (typeof options === 'function') {
            cb = options;
            options = {};
        }
        if (!cb) cb = noop;
        var el = options && options.nodeType === 1 ? options : options.el || document.querySelector('body');
        options.el = null;

        var iframe = document.createElement('iframe'),
            context = new Context(iframe, options);

        // We will be communicating with iframe using the window messaging API.
        global.addEventListener('message', context.messageHandler.bind(context), false);

        iframes.push(iframe);
        iframe.setAttribute('scrolling', 'no');
        iframe.setAttribute('frameborder', 0);
        iframe.setAttribute('width', '100%');
        iframe.setAttribute('height', '100%');
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');
        iframe.setAttribute('src', url);

        // Listen to the load events of the iframe. It fires the first time we add
        // it to the body, but also could fire if the iframe was moved around. We
        // call `cb` only once as the context objects doesn't change, we just rehandshake.
        var once = false;

        function init() {
            context.handshake();
            if (!once) {
                cb(context);
                once = true;
            }
        }
        iframe.addEventListener('load', init, false);

        // Finally append the iframe to the body to get going.
        el.appendChild(iframe);
    }

    // Remove all our iframes from the page.
    stuff.clear = function () {
        iframes.forEach(function (iframe) {
            var parent = iframe.parentElement;
            if (parent) parent.removeChild(iframe);
        });
        iframes = [];
    };

    // Context
    // -------

    // Creates a wrapper around the iframe that takes care of communication
    // with the secure `iframe` and gives us a nice API to interact with.

    function Context(iframe, options) {
        this.iframe = iframe;
        this.callbacks = {};
        this.eventQ = {
            load: [],
            evaljs: [],
            html: []
        };

        if (options.sandbox === true) {
            this.sandbox = 'allow-scripts allow-same-origin';
        } else if (typeof options.sandbox === 'string') {
            var sandbox = options.sandbox;
            if (sandbox.indexOf('allow-scripts') === -1) sandbox += ' allow-scripts';
            if (sandbox.indexOf('allow-same-origin') === -1) sandbox += ' allow-same-origin';
            this.sandbox = sandbox;
        } else {
            this.sandbox = null;
        }

        // A large enough random number that is used as a secret for between
        // top and child iframe.
        this.secret = Math.ceil(Math.random() * 999999999) + 1;
    }

    Context.prototype.handle = function (type, data) {
        var that = this,
            callbacks;
        if (type === 'custom') {
            var msg = data;
            callbacks = this.callbacks[msg.type] || [];
            callbacks.forEach(function (cb) {
                if (typeof cb === 'function') cb.call(cb.thisArg || that, msg.data);
            });
        } else {
            callbacks = this.eventQ[type];
            if (!callbacks) return;
            var cb = callbacks.shift();
            if (typeof cb === 'function') cb.call(cb.thisArg || that, data);
        }
    };

    // Parse and react to messages.
    Context.prototype.messageHandler = function (e) {
        var msg;
        try {
            msg = JSON.parse(e.data);
        } catch (err) {

            // If the message is not valid JSON then it's definitely not ours.
            return;
        }

        // Message secret doesn't match. Maybe for a different Context or
        // just something else.
        if (msg.secret !== this.secret) return;

        var data = msg.data,
            type = msg.type;

        this.handle(type, data);
    };

    // Sends messages to the secure iframe.
    Context.prototype.post = function (type, data) {
        this.iframe.contentWindow.postMessage(JSON.stringify({
            type: type,
            data: data,
            secret: this.secret
        }), '*');
    };

    // Evals JS code in the secure iframe.
    Context.prototype.evaljs = function (js, cb, thisArg) {
        var callback = function callback(d) {
            var e = d.error,
                error = e,
                Type;

            // Try to reconstruct the error into a native one using the info we have.
            if (e && (Type = global[e.__errorType__])) {
                error = new Type(e.message);
                error.stack = e.stack;
                error.type = e.type;

                // `arguments` as a reserved keyword in jshint.
                error['arguments'] = e['arguments'];
            }
            (cb || noop).call(this, error, d.result);
        };
        callback.thisArg = thisArg;
        this.eventQ.evaljs.push(callback);
        this.post('evaljs', js);
    };

    // Load HTML.
    Context.prototype.load = function (html, cb, thisArg) {
        cb = cb || noop;
        cb.thisArg = thisArg;
        this.eventQ.load.push(cb);
        this.post('load', html);
    };

    // Get current iframe HTML.
    Context.prototype.html = function (cb, thisArg) {
        cb = cb || noop;
        cb.thisArg = thisArg;
        this.eventQ.html.push(cb);
        this.post('html', null);
    };

    // Sends the secret to the iframe.
    Context.prototype.handshake = function () {
        this.post('handshake', this.sandbox);
    };

    // Listen on custom events.
    Context.prototype.on = function (event, cb, thisArg) {
        cb = cb || noop;
        cb.thisArg = thisArg;
        if (this.callbacks[event]) {
            this.callbacks[event].push(cb);
        } else {
            this.callbacks[event] = [cb];
        }
    };

    // Remove `callback` from the custom event listeners.
    Context.prototype.off = function (event, cb) {
        var callbacks = this.callbacks[event];
        if (callbacks) {
            var i = callbacks.indexOf(cb);
            if (i !== -1) callbacks.splice(i, 1);
        } else {
            this.callbacks[event] = [];
        }
    };

    // Export `stuff` and expose the `Context` class on it.
    stuff.Context = Context;
    global.stuff = stuff;
    exports['default'] = stuff;

});
define('kodr/serializers/application', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var ApplicationSerializer = DS['default'].RESTSerializer.extend({
        primaryKey: '_id'
    });

    exports['default'] = ApplicationSerializer;

});
define('kodr/serializers/group', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var GroupSerializer = DS['default'].RESTSerializer.extend(DS['default'].EmbeddedRecordsMixin, {
        primaryKey: '_id',
        attrs: {
            // author: {embedded: 'always'},
            members: {
                serialize: 'ids'
            }
        }
    });

    exports['default'] = GroupSerializer;

});
define('kodr/services/event-bus', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend(Ember['default'].Evented, {
    publish: function publish() {
      return this.trigger.apply(this, arguments);
    },
    subscribe: function subscribe() {
      return this.on.apply(this, arguments);
    },
    unsubscribe: function unsubscribe() {
      return this.off.apply(this, arguments);
    }
  });

});
define('kodr/sessions/custom', ['exports', 'simple-auth/session', 'ember', 'ember-data'], function (exports, Session, Ember, DS) {

    'use strict';

    exports['default'] = Session['default'].extend({
        user: (function () {
            var userId = this.get('secure.user_id');
            if (!Ember['default'].isEmpty(userId)) {
                return DS['default'].PromiseObject.create({
                    promise: this.container.lookup('service:store').findRecord('user', userId)
                });
            }
        }).property('secure.user_id'),
        atLeastTeacher: (function () {
            return this.get('isAdmin') || this.get('isTeacher');
        }).property('user.role'),
        isAdmin: (function () {
            return this.get('user.isAdmin');
        }).property('user.role'),
        isTeacher: (function () {
            return this.get('user.isTeacher');
        }).property('user.role'),
        isStudent: (function () {
            return this.get('user.isStudent');
        }).property('user.role')
    });

});
define('kodr/templates/_groupMembersList', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 16
              },
              "end": {
                "line": 15,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/_groupMembersList.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","member.uname",["loc",[null,[14,20],[14,36]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/_groupMembersList.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","link-to",["user",["get","member.user",["loc",[null,[13,34],[13,45]]]]],["class","user-name"],0,null,["loc",[null,[13,16],[15,28]]]]
        ],
        locals: ["member"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/_groupMembersList.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Members set yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/_groupMembersList.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[2,8],[2,13]]]]],[],0,1,["loc",[null,[2,0],[20,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/_requirement', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 5
                },
                "end": {
                  "line": 6,
                  "column": 6
                }
              },
              "moduleName": "kodr/templates/_requirement.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("       ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","req.model1",["loc",[null,[5,7],[5,21]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/_requirement.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["challengeTrial",["get","req.id1",["loc",[null,[4,33],[4,40]]]]],[],0,null,["loc",[null,[4,5],[6,18]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 6
                }
              },
              "moduleName": "kodr/templates/_requirement.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","req.model1",["loc",[null,[9,8],[9,22]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/_requirement.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["userArena",["get","req.id1",["loc",[null,[8,29],[8,36]]]]],[],0,null,["loc",[null,[8,6],[10,18]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/_requirement.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","req.isChallenge",["loc",[null,[3,10],[3,25]]]]],[],0,1,["loc",[null,[3,4],[11,11]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/_requirement.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","req.times",["loc",[null,[14,16],[14,29]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 20,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/_requirement.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","req.model2",["loc",[null,[19,10],[19,24]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/_requirement.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Challange(s) in\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["userArena",["get","req.id2",["loc",[null,[18,31],[18,38]]]]],[],0,null,["loc",[null,[18,8],[20,20]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/_requirement.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","req.model1",["loc",[null,[23,10],[23,24]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/_requirement.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["arenas"],[],0,null,["loc",[null,[22,8],[24,20]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/_requirement.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","req.times",["loc",[null,[13,10],[13,19]]]]],[],0,null,["loc",[null,[13,4],[15,11]]]],
          ["block","if",[["get","req.id2",["loc",[null,[16,10],[16,17]]]]],[],1,2,["loc",[null,[16,4],[25,11]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 11
          }
        },
        "moduleName": "kodr/templates/_requirement.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Complete \n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","req.isAny1",["loc",[null,[2,10],[2,20]]]]],[],0,1,["loc",[null,[2,0],[26,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/about', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/about.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("About");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n      Ko;dr is an online gameified judge that aims to provide students with means of practicing.\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n        Project can be viewed on ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","https://github.com/amrdraz/kodr");
        var el4 = dom.createTextNode("github");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        For Feedback, bug report or feature request ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","https://github.com/amrdraz/kodr/issues/new");
        var el4 = dom.createTextNode("submit an issue");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 10
            },
            "end": {
              "line": 24,
              "column": 10
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","btn");
          var el2 = dom.createTextNode("\n              About\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element7, 'href');
          return morphs;
        },
        statements: [
          ["attribute","href",["concat",[["get","view.href",["loc",[null,[21,23],[21,32]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 12
              },
              "end": {
                "line": 30,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element6, 'href');
            morphs[1] = dom.createMorphAt(element6,1,1);
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[27,25],[27,34]]]]]]],
            ["inline","if",[["get","session.isStudent?",["loc",[null,[28,21],[28,39]]]],"Arenas","User Arenas"],[],["loc",[null,[28,16],[28,65]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 10
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["userArenas"],["tagName","li","href",false],0,null,["loc",[null,[26,12],[30,24]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 12
              },
              "end": {
                "line": 38,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n                Arenas\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element5, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[35,25],[35,34]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 12
              },
              "end": {
                "line": 43,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n              Quests\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[40,23],[40,32]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 44,
              "column": 10
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["arenas"],["tagName","li","href",false],0,null,["loc",[null,[34,12],[38,24]]]],
          ["block","link-to",["quests"],["tagName","li","href",false],1,null,["loc",[null,[39,12],[43,24]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 12
              },
              "end": {
                "line": 50,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n              Groups\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[47,23],[47,32]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 12
              },
              "end": {
                "line": 55,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n              Users\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element2, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[52,23],[52,32]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 56,
              "column": 10
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["groups"],["tagName","li","href",false],0,null,["loc",[null,[46,12],[50,24]]]],
          ["block","link-to",["users"],["tagName","li","href",false],1,null,["loc",[null,[51,12],[55,24]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 10
              },
              "end": {
                "line": 63,
                "column": 10
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","btn");
            var el2 = dom.createTextNode("\n              Profile\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","view.href",["loc",[null,[60,23],[60,32]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 10
            },
            "end": {
              "line": 64,
              "column": 10
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["profile"],["tagName","li","href",false],0,null,["loc",[null,[59,10],[63,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 82,
              "column": 12
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createTextNode("Logout");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["invalidateSession"],[],["loc",[null,[81,30],[81,60]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 18
              },
              "end": {
                "line": 83,
                "column": 46
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Sign In");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 84,
                "column": 18
              },
              "end": {
                "line": 84,
                "column": 54
              }
            },
            "moduleName": "kodr/templates/application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Create Account");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 12
            },
            "end": {
              "line": 85,
              "column": 12
            }
          },
          "moduleName": "kodr/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["block","link-to",["login"],[],0,null,["loc",[null,[83,18],[83,58]]]],
          ["block","link-to",["signup"],[],1,null,["loc",[null,[84,18],[84,66]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 105,
            "column": 6
          }
        },
        "moduleName": "kodr/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","wrap");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","navbar navbar-inverse navbar-fixed-top");
        dom.setAttribute(el2,"role","navigation");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","navbar-header");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","navbar-toggle");
        dom.setAttribute(el5,"data-toggle","collapse");
        dom.setAttribute(el5,"data-target",".navbar-collapse");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","sr-only");
        var el7 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5,"class","navbar-brand");
        dom.setAttribute(el5,"href","#");
        var el6 = dom.createTextNode("Ko;dr");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","navbar-collapse collapse");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        dom.setAttribute(el5,"class","nav navbar-nav");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        dom.setAttribute(el5,"class","nav navbar-nav navbar-right");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  \n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container marketing");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","footer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container text-center");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","glyphicon glyphicon-heart");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" MET");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Ko;dr");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Project.\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0]);
        var element9 = dom.childAt(element8, [1, 1, 3]);
        var element10 = dom.childAt(element9, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element10,1,1);
        morphs[1] = dom.createMorphAt(element10,2,2);
        morphs[2] = dom.createMorphAt(element10,4,4);
        morphs[3] = dom.createMorphAt(element10,5,5);
        morphs[4] = dom.createMorphAt(element10,7,7);
        morphs[5] = dom.createMorphAt(dom.childAt(element9, [3]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["about"],["tagName","li","href",false],0,null,["loc",[null,[20,10],[24,22]]]],
        ["block","if",[["get","session.isAuthenticated",["loc",[null,[25,16],[25,39]]]]],[],1,null,["loc",[null,[25,10],[31,17]]]],
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[33,16],[33,38]]]]],[],2,null,["loc",[null,[33,10],[44,17]]]],
        ["block","if",[["get","session.isAdmin",["loc",[null,[45,16],[45,31]]]]],[],3,null,["loc",[null,[45,10],[56,17]]]],
        ["block","if",[["get","session.isAuthenticated",["loc",[null,[58,16],[58,39]]]]],[],4,null,["loc",[null,[58,10],[64,17]]]],
        ["block","if",[["get","session.isAuthenticated",["loc",[null,[68,18],[68,41]]]]],[],5,6,["loc",[null,[68,12],[85,19]]]],
        ["content","outlet",["loc",[null,[92,6],[92,16]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('kodr/templates/arena-challenges-list', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 12
              },
              "end": {
                "line": 8,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","label label-success");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","glyphicon glyphicon-ok");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Published");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 12
              },
              "end": {
                "line": 10,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","label label-default");
            var el2 = dom.createTextNode("Un-Published");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 12
              },
              "end": {
                "line": 17,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","challenge.name",["loc",[null,[16,16],[16,34]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 16
              },
              "end": {
                "line": 25,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Edit\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 16
              },
              "end": {
                "line": 28,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-play");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Try\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 16
              },
              "end": {
                "line": 31,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/arena-challenges-list.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-copy");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Copy\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/arena-challenges-list.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pull-right");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","label label-info");
          var el4 = dom.createTextNode("awards ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Exp");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          dom.setAttribute(el2,"class","list-group-item-text");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#");
          dom.setAttribute(el4,"class","challenge-remove");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-remove");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Remove \n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#");
          dom.setAttribute(el4,"class","challenge-remove");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5,"class","glyphicon glyphicon-chevron-up");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Move Up\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#");
          dom.setAttribute(el4,"class","challenge-remove");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5,"class","glyphicon glyphicon-chevron-down");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Move Down\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","label label-default");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-tags");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Tags");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5, 1]);
          var element3 = dom.childAt(element2, [6]);
          var element4 = dom.childAt(element2, [8]);
          var element5 = dom.childAt(element2, [10]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          morphs[3] = dom.createMorphAt(element2,2,2);
          morphs[4] = dom.createMorphAt(element2,3,3);
          morphs[5] = dom.createMorphAt(element2,4,4);
          morphs[6] = dom.createElementMorph(element3);
          morphs[7] = dom.createElementMorph(element4);
          morphs[8] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [
          ["block","if",[["get","challenge.isPublished",["loc",[null,[6,18],[6,39]]]]],[],0,1,["loc",[null,[6,12],[10,19]]]],
          ["content","challenge.exp",["loc",[null,[11,50],[11,67]]]],
          ["block","link-to",["challenge",["get","challenge",["loc",[null,[15,35],[15,44]]]]],["class",".challenge-name"],2,null,["loc",[null,[15,12],[17,24]]]],
          ["block","link-to",["challenge.edit",["get","challenge",["loc",[null,[23,44],[23,53]]]]],["class",":challenge-edit"],3,null,["loc",[null,[23,16],[25,28]]]],
          ["block","link-to",["challenge.try",["get","challenge",["loc",[null,[26,43],[26,52]]]]],["class",":challenge-try"],4,null,["loc",[null,[26,16],[28,28]]]],
          ["block","link-to",["challenge.copy",["get","challenge",["loc",[null,[29,44],[29,53]]]]],["class",":challenge-copy"],5,null,["loc",[null,[29,16],[31,28]]]],
          ["element","action",["removeChallenge",["get","challenge",["loc",[null,[32,46],[32,55]]]]],[],["loc",[null,[32,19],[32,58]]]],
          ["element","action",["moveChallengeUp",["get","challenge",["loc",[null,[36,46],[36,55]]]]],[],["loc",[null,[36,19],[36,58]]]],
          ["element","action",["moveChallengeDown",["get","challenge",["loc",[null,[39,48],[39,57]]]]],[],["loc",[null,[39,19],[39,60]]]]
        ],
        locals: ["challenge"],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arena-challenges-list.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Challanges set yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 5
          }
        },
        "moduleName": "kodr/templates/arena-challenges-list.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[3,8],[3,13]]]]],[],0,1,["loc",[null,[3,0],[50,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/arena', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/arena.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","bread-crumbs",["loc",[null,[1,0],[1,16]]]],
        ["content","outlet",["loc",[null,[2,0],[2,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/arena/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/arena/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-save");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Save");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canSave",["loc",[null,[7,38],[7,51]]]],"","disabled"],[],["loc",[null,[7,33],[7,67]]]]," arean-save"]]],
          ["element","action",["save"],[],["loc",[null,[7,8],[7,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/arena/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"title","to publish challenge, you need to at least have one published challenge");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-ok-circle");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canPublish",["loc",[null,[12,43],[12,59]]]],"","disabled"],[],["loc",[null,[12,38],[12,75]]]]," arean-publish"]]],
          ["element","action",["publish"],[],["loc",[null,[12,10],[12,30]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/arena/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-save");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Save/Re-Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-ban-circle");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Un-Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canSave",["loc",[null,[14,43],[14,56]]]],"","disabled"],[],["loc",[null,[14,38],[14,72]]]]," arean-unpublish"]]],
          ["element","action",["publish"],[],["loc",[null,[14,10],[14,30]]]],
          ["element","action",["unPublish"],[],["loc",[null,[15,10],[15,32]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 171
            }
          },
          "moduleName": "kodr/templates/arena/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Add Challenge");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/arena/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","arean-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","arean-export");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-upload");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Export Challanges");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","arean-export");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-download");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Import Challanges");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-repeat");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Reset");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","arean-delete");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-remove");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Delete");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","arean-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","editable col-lg-12");
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Arena name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n  ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group col-lg-12");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"for","description");
        dom.setAttribute(el4,"class","control-label");
        var el5 = dom.createTextNode("Arena description");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group col-lg-12");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"for","requirements");
        dom.setAttribute(el4,"class","control-label");
        var el5 = dom.createTextNode("Requires");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("No Requirement");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","arean-challenges row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-12 clearfix");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element4, [5]);
        var element8 = dom.childAt(element4, [10]);
        var element9 = dom.childAt(fragment, [2, 1]);
        var element10 = dom.childAt(fragment, [4]);
        var morphs = new Array(12);
        morphs[0] = dom.createElementMorph(element5);
        morphs[1] = dom.createElementMorph(element6);
        morphs[2] = dom.createAttrMorph(element7, 'class');
        morphs[3] = dom.createElementMorph(element7);
        morphs[4] = dom.createMorphAt(element4,7,7);
        morphs[5] = dom.createMorphAt(element4,8,8);
        morphs[6] = dom.createElementMorph(element8);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [1, 1]),3,3);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [3]),3,3);
        morphs[9] = dom.createMorphAt(dom.childAt(element10, [1]),1,1);
        morphs[10] = dom.createMorphAt(dom.childAt(element10, [3]),1,1);
        morphs[11] = dom.createMorphAt(fragment,6,6,contextualElement);
        return morphs;
      },
      statements: [
        ["element","action",["showModal","modals/export-arena-modal",["get","model",["loc",[null,[3,57],[3,62]]]]],[],["loc",[null,[3,8],[3,64]]]],
        ["element","action",["showModal","modals/import-arena-modal"],[],["loc",[null,[4,8],[4,58]]]],
        ["attribute","class",["concat",[["subexpr","if",[["get","model.canReset",["loc",[null,[5,39],[5,53]]]],"","disabled"],[],["loc",[null,[5,34],[5,69]]]]," arean-reset"]]],
        ["element","action",["reset"],[],["loc",[null,[5,8],[5,26]]]],
        ["block","unless",[["get","model.isPublished",["loc",[null,[6,14],[6,31]]]]],[],0,null,["loc",[null,[6,4],[10,15]]]],
        ["block","unless",[["get","model.isPublished",["loc",[null,[11,14],[11,31]]]]],[],1,2,["loc",[null,[11,4],[16,15]]]],
        ["element","action",["delete"],[],["loc",[null,[17,8],[17,28]]]],
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","model.name",["loc",[null,[25,28],[25,38]]]]],[],[]],"class","arean-name form-control"],["loc",[null,[25,4],[25,72]]]],
        ["inline","textarea",[],["id","description","class","arean-description form-control","value",["subexpr","@mut",[["get","model.description",["loc",[null,[33,12],[33,29]]]]],[],[]]],["loc",[null,[30,4],[34,6]]]],
        ["block","link-to",["challenges.create"],["class",["subexpr","concat",["btn btn-primary create-challenge"," ",["subexpr","if",[["get","model.isNew",[]],"disabled"],[],[]]," "],[],[]]],3,null,["loc",[null,[45,2],[45,183]]]],
        ["inline","render",["arena-challenges-list",["get","challenges",["loc",[null,[48,37],[48,47]]]]],[],["loc",[null,[48,4],[48,50]]]],
        ["inline","outlet",["modal"],[],["loc",[null,[52,0],[52,18]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('kodr/templates/arena/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 63
              }
            },
            "moduleName": "kodr/templates/arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 65
              }
            },
            "moduleName": "kodr/templates/arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Try");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arena/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["arena.edit",["get","model",["loc",[null,[4,28],[4,33]]]]],["class","btn pull-right"],0,null,["loc",[null,[4,4],[4,75]]]],
          ["block","link-to",["userArena",["get","userArena",["loc",[null,[5,27],[5,36]]]]],["class","btn pull-right"],1,null,["loc",[null,[5,4],[5,77]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","alert alert-info");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createTextNode("You are not logged in this is a demo");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arena/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","session.isAuthenticated",["loc",[null,[7,14],[7,37]]]]],[],0,null,["loc",[null,[7,4],[11,15]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "kodr/templates/arena/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-star");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","challenge.exp",["loc",[null,[22,10],[22,27]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["challenge.try",["get","challenge",["loc",[null,[21,33],[21,42]]]]],["class","btn col-md-4 "],0,null,["loc",[null,[21,6],[23,18]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/arena/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","challenge.isPublished",["loc",[null,[20,10],[20,31]]]]],[],0,null,["loc",[null,[20,4],[24,11]]]]
        ],
        locals: ["challenge"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/arena/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12 text-center");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[3,6],[3,28]]]]],[],0,1,["loc",[null,[3,0],[12,7]]]],
        ["content","model.name",["loc",[null,[13,17],[13,31]]]],
        ["content","model.description",["loc",[null,[14,7],[14,28]]]],
        ["block","each",[["get","model.challenges",["loc",[null,[19,12],[19,28]]]]],[],2,null,["loc",[null,[19,4],[25,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/arenas', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/arenas.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/arenas/-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/arenas/-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"value","Save");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["save"],["on","submit"],["loc",[null,[1,6],[1,35]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/arenas/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/arenas/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Edit Arena");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","link-to",["Arena list","arenas.index"],[],["loc",[null,[2,2],[2,42]]]],
        ["inline","partial",["arenas/form"],[],["loc",[null,[6,0],[6,25]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/arenas/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 134
              }
            },
            "moduleName": "kodr/templates/arenas/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Create Arena");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arenas/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["arenas.create"],["class","btn btn-primary pull-right .create-arena"],0,null,["loc",[null,[3,2],[3,146]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 16
                },
                "end": {
                  "line": 18,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","label label-success");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","glyphicon glyphicon-ok");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Published");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 16
                },
                "end": {
                  "line": 20,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","label label-default");
              var el2 = dom.createTextNode("Un-Published");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 16
                },
                "end": {
                  "line": 24,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" Edit\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 16
                },
                "end": {
                  "line": 27,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-play");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" Try\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child4 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 16
                },
                "end": {
                  "line": 31,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","arena.name",["loc",[null,[30,20],[30,34]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 0
              }
            },
            "moduleName": "kodr/templates/arenas/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","list-group-item");
            var el2 = dom.createTextNode("            \n            \n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            dom.setAttribute(el2,"class","list-group-item-heading");
            var el3 = dom.createTextNode("\n\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","pull-right");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                \n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var element2 = dom.childAt(element1, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element2,1,1);
            morphs[1] = dom.createMorphAt(element2,3,3);
            morphs[2] = dom.createMorphAt(element2,4,4);
            morphs[3] = dom.createMorphAt(element1,3,3);
            return morphs;
          },
          statements: [
            ["block","if",[["get","arena.isPublished",["loc",[null,[16,22],[16,39]]]]],[],0,1,["loc",[null,[16,16],[20,23]]]],
            ["block","link-to",["arena.edit",["get","arena",["loc",[null,[22,40],[22,45]]]]],["class","btn-default btn-sm arena-edit"],2,null,["loc",[null,[22,16],[24,28]]]],
            ["block","link-to",["userArena",["get","arena",["loc",[null,[25,39],[25,44]]]]],["class","btn-primary btn-sm arena-try"],3,null,["loc",[null,[25,16],[27,28]]]],
            ["block","link-to",["arena",["get","arena",["loc",[null,[29,35],[29,40]]]]],["class","arena-name"],4,null,["loc",[null,[29,16],[31,28]]]]
          ],
          locals: ["arena"],
          templates: [child0, child1, child2, child3, child4]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 0
              },
              "end": {
                "line": 36,
                "column": 0
              }
            },
            "moduleName": "kodr/templates/arenas/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("No Arenas set yet");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arenas/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1,"class","list-group");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","model",["loc",[null,[10,8],[10,13]]]]],[],0,1,["loc",[null,[10,0],[36,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 45,
                    "column": 8
                  },
                  "end": {
                    "line": 47,
                    "column": 8
                  }
                },
                "moduleName": "kodr/templates/arenas/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","glyphicon glyphicon-play");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" Try\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 4
                }
              },
              "moduleName": "kodr/templates/arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              dom.setAttribute(el1,"class","list-group-item-heading");
              var el2 = dom.createTextNode("\n        \n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","pull-right");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        \n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            \n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("  \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
              morphs[1] = dom.createMorphAt(element0,3,3);
              return morphs;
            },
            statements: [
              ["block","link-to",["userArena",["get","arena",["loc",[null,[45,31],[45,36]]]]],["class","btn-primary btn-sm arena-try"],0,null,["loc",[null,[45,8],[47,20]]]],
              ["content","arena.name",["loc",[null,[50,8],[50,22]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 0
              },
              "end": {
                "line": 53,
                "column": 0
              }
            },
            "moduleName": "kodr/templates/arenas/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["userArena",["get","arena",["loc",[null,[41,27],[41,32]]]]],["class","arena-name","class","list-group-item"],0,null,["loc",[null,[41,4],[52,16]]]]
          ],
          locals: ["arena"],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 0
              },
              "end": {
                "line": 55,
                "column": 0
              }
            },
            "moduleName": "kodr/templates/arenas/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("No Arenas are published yet");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/arenas/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","published",["loc",[null,[40,8],[40,17]]]]],[],0,1,["loc",[null,[40,0],[55,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/arenas/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Arenas");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,5,5,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[2,6],[2,28]]]]],[],0,null,["loc",[null,[2,0],[4,7]]]],
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[8,6],[8,28]]]]],[],1,2,["loc",[null,[8,0],[57,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/arenas/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/arenas/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("New Arena");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","link-to",["Arena list","arenas.index"],[],["loc",[null,[2,2],[2,42]]]],
        ["inline","partial",["arenas/form"],[],["loc",[null,[6,0],[6,25]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/arenas/show', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/arenas/show.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Arena show");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["inline","link-to",["Arena list","arenas.index"],[],["loc",[null,[2,2],[2,42]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/challenge', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/challenge.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/challenge/copy', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/challenge/copy.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/challenge/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/challenge/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-save");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Save");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canSave",["loc",[null,[5,38],[5,51]]]],"","disabled"],[],["loc",[null,[5,33],[5,67]]]]," challenge-save"]]],
          ["element","action",["save"],[],["loc",[null,[5,8],[5,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/challenge/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-ok-circle");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canPublish",["loc",[null,[10,43],[10,59]]]],"","disabled"],[],["loc",[null,[10,38],[10,75]]]]," challenge-publish"]]],
          ["element","action",["publish"],[],["loc",[null,[10,10],[10,30]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/challenge/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-save");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Save/Re-Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-ban-circle");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Un-Publish");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.canSave",["loc",[null,[12,40],[12,53]]]],"","disabled"],[],["loc",[null,[12,35],[12,69]]]]," challenge-unpublish"]]],
          ["element","action",["save"],[],["loc",[null,[12,10],[12,27]]]],
          ["element","action",["unPublish"],[],["loc",[null,[13,10],[13,32]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 3
          }
        },
        "moduleName": "kodr/templates/challenge/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","challenge-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-repeat challenge-reset");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Reset");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","challenge-delete");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-remove");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Delete");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"calss","btn btn-default");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-ok");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Validate");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [6]);
        var element7 = dom.childAt(element4, [8]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element5, 'class');
        morphs[1] = dom.createElementMorph(element5);
        morphs[2] = dom.createMorphAt(element4,3,3);
        morphs[3] = dom.createMorphAt(element4,4,4);
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createAttrMorph(element7, 'class');
        morphs[6] = dom.createElementMorph(element7);
        morphs[7] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[8] = dom.createMorphAt(fragment,6,6,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",[["subexpr","if",[["get","model.canReset",["loc",[null,[3,39],[3,53]]]],"","disabled"],[],["loc",[null,[3,34],[3,69]]]]]]],
        ["element","action",["reset"],[],["loc",[null,[3,8],[3,26]]]],
        ["block","unless",[["get","model.isPublished",["loc",[null,[4,14],[4,31]]]]],[],0,null,["loc",[null,[4,4],[8,15]]]],
        ["block","unless",[["get","model.isPublished",["loc",[null,[9,14],[9,31]]]]],[],1,2,["loc",[null,[9,4],[14,15]]]],
        ["element","action",["delete"],[],["loc",[null,[15,8],[15,28]]]],
        ["attribute","class",["concat",[["subexpr","if",[["get","model.valid",["loc",[null,[16,43],[16,54]]]],"active"],[],["loc",[null,[16,38],[16,65]]]]," challenge-validate"]]],
        ["element","action",["validate"],[],["loc",[null,[16,8],[16,30]]]],
        ["inline","component",["challenge/challenge-settings-"],["model",["subexpr","@mut",[["get","model",["loc",[null,[19,50],[19,55]]]]],[],[]]],["loc",[null,[19,0],[19,58]]]],
        ["inline","component",["challenge/challenge-edit-"],["model",["subexpr","@mut",[["get","model",["loc",[null,[21,46],[21,51]]]]],[],[]],"run","run","test","test"],["loc",[null,[21,0],[24,3]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/challenge/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 78
            }
          },
          "moduleName": "kodr/templates/challenge/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Start");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/challenge/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","pull-right label label-primary");
        var el4 = dom.createTextNode("awards ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Exp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","panel-title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-footer");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        return morphs;
      },
      statements: [
        ["content","model.exp",["loc",[null,[4,56],[4,69]]]],
        ["content","model.name",["loc",[null,[5,28],[5,42]]]],
        ["inline","marked-math",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[8,22],[8,27]]]]],[],[]],"observable","blueprint.description"],["loc",[null,[8,2],[8,65]]]],
        ["block","link-to",["challenge.try",["get","model",["loc",[null,[11,29],[11,34]]]]],["class","btn btn-block :challenge-try"],0,null,["loc",[null,[11,2],[11,90]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/challenges', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/challenges.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/challenges/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 145
              }
            },
            "moduleName": "kodr/templates/challenges/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Create Challenge");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/challenges/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["challenges.create"],["class","btn btn-primary pull-right create-challenge"],0,null,["loc",[null,[3,2],[3,157]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 12
              },
              "end": {
                "line": 15,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/challenges/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","challenge.name",["loc",[null,[14,16],[14,34]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 16
              },
              "end": {
                "line": 22,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/challenges/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Edit\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 16
              },
              "end": {
                "line": 25,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/challenges/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-play");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Try\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/challenges/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pull-right label label-info");
          var el3 = dom.createTextNode("awards ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Exp");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          dom.setAttribute(el2,"class","list-group-item-text");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"class","challenge-discussion");
          dom.setAttribute(el4,"href","#");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-comment");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Discussion");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","label label-default");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-tags");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Tags");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          morphs[2] = dom.createMorphAt(element1,3,3);
          morphs[3] = dom.createMorphAt(element1,4,4);
          return morphs;
        },
        statements: [
          ["content","challenge.exp",["loc",[null,[11,57],[11,74]]]],
          ["block","link-to",["challenge",["get","challenge",["loc",[null,[13,35],[13,44]]]]],["class","challenge-name"],0,null,["loc",[null,[13,12],[15,24]]]],
          ["block","link-to",["challenge.edit",["get","challenge",["loc",[null,[20,44],[20,53]]]]],["class",":challenge-edit"],1,null,["loc",[null,[20,16],[22,28]]]],
          ["block","link-to",["challenge.try",["get","challenge",["loc",[null,[23,43],[23,52]]]]],["class",":challenge-try"],2,null,["loc",[null,[23,16],[25,28]]]]
        ],
        locals: ["challenge"],
        templates: [child0, child1, child2]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/challenges/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Challanges set yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 5
          }
        },
        "moduleName": "kodr/templates/challenges/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Challenges");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.isAuthenticated",["loc",[null,[2,6],[2,29]]]]],[],0,null,["loc",[null,[2,0],[4,7]]]],
        ["block","each",[["get","model",["loc",[null,[9,8],[9,13]]]]],[],1,2,["loc",[null,[9,0],[34,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/components/_input_text', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/_input_text.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/bread-crumbs', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 10
                  },
                  "end": {
                    "line": 8,
                    "column": 10
                  }
                },
                "moduleName": "kodr/templates/components/bread-crumbs.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["content","crumb.label",["loc",[null,[7,12],[7,27]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/bread-crumbs.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",[["get","crumb.path",["loc",[null,[6,21],[6,31]]]],["get","crumb.model",["loc",[null,[6,32],[6,43]]]]],[],0,null,["loc",[null,[6,10],[8,22]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 10
                  },
                  "end": {
                    "line": 12,
                    "column": 10
                  }
                },
                "moduleName": "kodr/templates/components/bread-crumbs.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["content","crumb.label",["loc",[null,[11,12],[11,27]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/bread-crumbs.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",[["get","crumb.path",["loc",[null,[10,21],[10,31]]]]],[],0,null,["loc",[null,[10,10],[12,22]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "kodr/templates/components/bread-crumbs.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","crumb.model",["loc",[null,[5,14],[5,25]]]]],[],0,1,["loc",[null,[5,8],[13,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 16,
                "column": 6
              }
            },
            "moduleName": "kodr/templates/components/bread-crumbs.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","crumb.label",["loc",[null,[15,8],[15,23]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "kodr/templates/components/bread-crumbs.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["subexpr","if",[["get","crumb.isCurrent",["loc",[null,[3,19],[3,34]]]],"current"],[],["loc",[null,[3,14],[3,46]]]]],
          ["block","if",[["get","crumb.linkable",["loc",[null,[4,12],[4,26]]]]],[],0,1,["loc",[null,[4,6],[16,13]]]]
        ],
        locals: ["crumb"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/bread-crumbs.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","breadcrumb");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","breadCrumbs",["loc",[null,[2,10],[2,21]]]]],[],0,null,["loc",[null,[2,2],[18,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/code-console', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/code-console.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/code-editor', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/code-editor.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/editor-container', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/editor-container.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/em-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","icon-classes",[]],"icon-classes"],[],[]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 9
          }
        },
        "moduleName": "kodr/templates/components/em-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","icon-classes",["loc",[null,[1,6],[1,18]]]]],[],0,null,["loc",[null,[1,0],[3,7]]]],
        ["content","label",["loc",[null,[4,0],[4,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/em-form-control-help', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 12
          }
        },
        "moduleName": "kodr/templates/components/em-form-control-help.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","helpText",["loc",[null,[1,0],[1,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/em-form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","wrapperClass",[]],"wrapper-class"],[],[]]]]],
          ["inline","partial",["components/formgroup/form-group"],[],["loc",[null,[3,8],[3,53]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","partial",["components/formgroup/form-group"],[],["loc",[null,[6,4],[6,49]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/components/em-form-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","wrapperClass",["loc",[null,[1,6],[1,18]]]]],[],0,1,["loc",[null,[1,0],[7,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/em-form-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 8
          }
        },
        "moduleName": "kodr/templates/components/em-form-label.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]],
        ["content","text",["loc",[null,[2,0],[2,8]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/em-form-submit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-form-submit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createMorphAt(element2,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","horiClass",[]],"hori-class"],[],[]]]]],
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","classes",[]],"classes"],[],[]]]]],
          ["attribute","disabled",["get","disabled",["loc",[null,[3,65],[3,73]]]]],
          ["content","text",["loc",[null,[3,76],[3,84]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-form-submit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","classes",[]],"classes"],[],[]]]]],
          ["attribute","disabled",["get","disabled",["loc",[null,[6,61],[6,69]]]]],
          ["content","text",["loc",[null,[6,72],[6,80]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/components/em-form-submit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","form.isHorizontal",["loc",[null,[1,6],[1,23]]]]],[],0,1,["loc",[null,[1,0],[7,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/em-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-form.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","em-form-submit",["loc",[null,[3,4],[3,22]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/components/em-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]],
        ["block","if",[["get","submit_button",["loc",[null,[2,6],[2,19]]]]],[],0,null,["loc",[null,[2,0],[4,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/em-modal-confirm', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 3,
                  "column": 116
                }
              },
              "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("Ã—");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
            return morphs;
          },
          statements: [
            ["block","em-modal-toggler",[],["class","close"],0,null,["loc",[null,[3,8],[3,137]]]],
            ["content","title",["loc",[null,[4,32],[4,41]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","view",[["get","Ember.Select",["loc",[null,[11,15],[11,27]]]]],["value",["subexpr","@mut",[["get","message",[]]],[],[]],"content",["subexpr","@mut",[["get","messages",[]]],[],[]],"optionValuePath","id","optionLabelPath","content.msg"],["loc",[null,[11,8],[11,129]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("Confirmation with a reason");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,7,7,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[7,8],[7,19]]]],
            ["content","yield",["loc",[null,[8,8],[8,17]]]],
            ["block","if",[["get","reasonModal",["loc",[null,[10,14],[10,25]]]]],[],0,null,["loc",[null,[10,8],[12,15]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-thumbs-o-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["content","cancel-button-title",["loc",[null,[18,12],[18,35]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","em-button",[],["class",["subexpr","@mut",[["get","cancel-button-classes",["loc",[null,[15,26],[15,47]]]]],[],[]],"on-click","confirmPressed","default",["subexpr","@mut",[["get","submit-button-title",["loc",[null,[15,82],[15,101]]]]],[],[]],"icon-default",["subexpr","@mut",[["get","submit-button-default-icons",["loc",[null,[15,115],[15,142]]]]],[],[]],"icon-executing",["subexpr","@mut",[["get","submit-button-execute-icons",["loc",[null,[15,158],[15,185]]]]],[],[]],"executing",["subexpr","@mut",[["get","submit-button-submitting-title",["loc",[null,[15,196],[15,226]]]]],[],[]]],["loc",[null,[15,8],[15,228]]]],
            ["block","em-modal-toggler",[],["class",["subexpr","@mut",[["get","submit-button-classes",["loc",[null,[16,34],[16,55]]]]],[],[]]],0,null,["loc",[null,[16,8],[19,29]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","em-modal-title",[],["classes",["subexpr","@mut",[["get","modal-title-classes",["loc",[null,[2,30],[2,49]]]]],[],[]]],0,null,["loc",[null,[2,4],[5,23]]]],
          ["block","em-modal-body",[],[],1,null,["loc",[null,[6,4],[13,22]]]],
          ["block","em-modal-footer",[],[],2,null,["loc",[null,[14,4],[20,24]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 13
          }
        },
        "moduleName": "kodr/templates/components/em-modal-confirm.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","em-modal",[],["id",["subexpr","@mut",[["get","confirm-id",["loc",[null,[1,15],[1,25]]]]],[],[]],"configName",["subexpr","@mut",[["get","configName",["loc",[null,[1,37],[1,47]]]]],[],[]],"model-id",["subexpr","@mut",[["get","model-id",["loc",[null,[1,57],[1,65]]]]],[],[]],"open-if",["subexpr","@mut",[["get","open-if",["loc",[null,[1,74],[1,81]]]]],[],[]],"close-if",["subexpr","@mut",[["get","close-if",["loc",[null,[1,91],[1,99]]]]],[],[]],"on-hide",["subexpr","@mut",[["get","on-hide",["loc",[null,[1,108],[1,115]]]]],[],[]]],0,null,["loc",[null,[1,0],[21,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/em-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/em-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-dialog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","modal-content");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[4,12],[4,21]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/components/em-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","is-open",["loc",[null,[1,6],[1,13]]]]],[],0,null,["loc",[null,[1,0],[7,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/ember-chosen', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/ember-chosen.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/formgroup/control-within-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/formgroup/control-within-label.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","partial",["components/formgroup/form-group-control"],[],["loc",[null,[2,4],[2,57]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 18
          }
        },
        "moduleName": "kodr/templates/components/formgroup/control-within-label.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","em-form-label",[],["text",["subexpr","@mut",[["get","label",["loc",[null,[1,22],[1,27]]]]],[],[]],"horiClass","","inlineClass","","viewName",["subexpr","@mut",[["get","labelViewName",["loc",[null,[1,65],[1,78]]]]],[],[]]],0,null,["loc",[null,[1,0],[3,18]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/components/formgroup/form-group-control', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/formgroup/form-group-control.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","controlWrapper",[]],"control-wrapper"],[],[]]]]],
          ["inline","view",[["get","controlView",["loc",[null,[3,15],[3,26]]]]],["viewName",["subexpr","@mut",[["get","controlViewName",["loc",[null,[3,36],[3,51]]]]],[],[]],"property",["subexpr","@mut",[["get","propertyName",["loc",[null,[3,61],[3,73]]]]],[],[]],"id",["subexpr","@mut",[["get","cid",["loc",[null,[3,77],[3,80]]]]],[],[]]],["loc",[null,[3,8],[3,82]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/formgroup/form-group-control.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","view",[["get","controlView",["loc",[null,[6,11],[6,22]]]]],["viewName",["subexpr","@mut",[["get","controlViewName",["loc",[null,[6,32],[6,47]]]]],[],[]],"property",["subexpr","@mut",[["get","propertyName",["loc",[null,[6,57],[6,69]]]]],[],[]],"id",["subexpr","@mut",[["get","cid",["loc",[null,[6,73],[6,76]]]]],[],[]]],["loc",[null,[6,4],[6,78]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/components/formgroup/form-group-control.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","controlWrapper",["loc",[null,[1,6],[1,20]]]]],[],0,1,["loc",[null,[1,0],[7,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/formgroup/form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 8,
                    "column": 12
                  }
                },
                "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'class');
                morphs[1] = dom.createMorphAt(element2,1,1);
                return morphs;
              },
              statements: [
                ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","labelWrapperClass",[]],"label-wrapper-class"],[],[]]]]],
                ["inline","partial",["components/formgroup/control-within-label"],[],["loc",[null,[6,20],[6,75]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","partial",["components/formgroup/control-within-label"],[],["loc",[null,[9,16],[9,71]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","labelWrapperClass",["loc",[null,[4,18],[4,35]]]]],[],0,1,["loc",[null,[4,12],[10,19]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 12
                  },
                  "end": {
                    "line": 17,
                    "column": 12
                  }
                },
                "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element1, 'class');
                morphs[1] = dom.createMorphAt(element1,1,1);
                morphs[2] = dom.createMorphAt(element1,3,3);
                return morphs;
              },
              statements: [
                ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","labelWrapperClass",[]],"label-wrapper-class"],[],[]]]]],
                ["inline","em-form-label",[],["text",["subexpr","@mut",[["get","label",["loc",[null,[14,41],[14,46]]]]],[],[]],"viewName",["subexpr","@mut",[["get","labelViewName",["loc",[null,[14,56],[14,69]]]]],[],[]]],["loc",[null,[14,20],[14,71]]]],
                ["inline","partial",["components/formgroup/form-group-control"],[],["loc",[null,[15,20],[15,73]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 12
                  },
                  "end": {
                    "line": 20,
                    "column": 12
                  }
                },
                "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","em-form-label",[],["text",["subexpr","@mut",[["get","label",["loc",[null,[18,37],[18,42]]]]],[],[]],"viewName",["subexpr","@mut",[["get","labelViewName",["loc",[null,[18,52],[18,65]]]]],[],[]]],["loc",[null,[18,16],[18,67]]]],
                ["inline","partial",["components/formgroup/form-group-control"],[],["loc",[null,[19,16],[19,69]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 21,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","labelWrapperClass",["loc",[null,[12,18],[12,35]]]]],[],0,1,["loc",[null,[12,12],[20,19]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","yieldInLabel",["loc",[null,[3,14],[3,26]]]]],[],0,1,["loc",[null,[3,8],[21,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","partial",["components/formgroup/form-group-control"],[],["loc",[null,[23,8],[23,61]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","form-control-feedback");
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",[["subexpr","-bind-attr-class",[["get","v_icon",[]],"v-icon"],[],[]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 8
                },
                "end": {
                  "line": 34,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","em-form-control-help",[],["text",["subexpr","@mut",[["get","help",["loc",[null,[33,40],[33,44]]]]],[],[]],"viewName",["subexpr","@mut",[["get","helpViewName",["loc",[null,[33,54],[33,66]]]]],[],[]]],["loc",[null,[33,12],[33,68]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 35,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","canShowErrors",["loc",[null,[32,14],[32,27]]]]],[],0,null,["loc",[null,[32,8],[34,15]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","label",["loc",[null,[2,10],[2,15]]]]],[],0,1,["loc",[null,[2,4],[24,11]]]],
          ["block","if",[["get","v_icons",["loc",[null,[26,10],[26,17]]]]],[],2,null,["loc",[null,[26,4],[28,11]]]],
          ["block","unless",[["get","form.isInline",["loc",[null,[31,14],[31,27]]]]],[],3,null,["loc",[null,[31,4],[35,15]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[37,4],[37,13]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 11
          }
        },
        "moduleName": "kodr/templates/components/formgroup/form-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","template",["loc",[null,[1,10],[1,18]]]]],[],0,1,["loc",[null,[1,0],[38,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/high-chart', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "moduleName": "kodr/templates/components/high-chart.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","width: 100%;");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createAttrMorph(element0, 'id');
        return morphs;
      },
      statements: [
        ["attribute","id",["get","chartId",["loc",[null,[1,10],[1,17]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/iframe-sandbox', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/iframe-sandbox.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/input-email', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/input-email.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","partial",[["get","_input_text",["loc",[null,[1,10],[1,21]]]]],[],["loc",[null,[1,0],[1,23]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/input-text', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/input-text.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","partial",[["get","_input_text",["loc",[null,[1,10],[1,21]]]]],[],["loc",[null,[1,0],[1,23]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/labeled-radio-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/labeled-radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","radio-button",[],["radioClass",["subexpr","@mut",[["get","radioClass",["loc",[null,[2,15],[2,25]]]]],[],[]],"radioId",["subexpr","@mut",[["get","radioId",["loc",[null,[3,12],[3,19]]]]],[],[]],"changed","innerRadioChanged","disabled",["subexpr","@mut",[["get","disabled",["loc",[null,[5,13],[5,21]]]]],[],[]],"groupValue",["subexpr","@mut",[["get","groupValue",["loc",[null,[6,15],[6,25]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[7,9],[7,13]]]]],[],[]],"required",["subexpr","@mut",[["get","required",["loc",[null,[8,13],[8,21]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[9,10],[9,15]]]]],[],[]]],["loc",[null,[1,0],[9,17]]]],
        ["content","yield",["loc",[null,[11,0],[11,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/marked-math', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/marked-math.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/profil-icon', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/profil-icon.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/profile-icon', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/profile-icon.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/radio-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createMorphAt(element0,1,1);
          morphs[3] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ember-radio-button ",["subexpr","if",[["get","checked",["loc",[null,[2,40],[2,47]]]],"checked"],[],["loc",[null,[2,35],[2,59]]]]," ",["get","joinedClassNames",["loc",[null,[2,62],[2,78]]]]]]],
          ["attribute","for",["get","radioId",["loc",[null,[2,88],[2,95]]]]],
          ["inline","radio-button-input",[],["class",["subexpr","@mut",[["get","radioClass",["loc",[null,[4,14],[4,24]]]]],[],[]],"id",["subexpr","@mut",[["get","radioId",["loc",[null,[5,11],[5,18]]]]],[],[]],"disabled",["subexpr","@mut",[["get","disabled",["loc",[null,[6,17],[6,25]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[7,13],[7,17]]]]],[],[]],"required",["subexpr","@mut",[["get","required",["loc",[null,[8,17],[8,25]]]]],[],[]],"groupValue",["subexpr","@mut",[["get","groupValue",["loc",[null,[9,19],[9,29]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[10,14],[10,19]]]]],[],[]],"changed","changed"],["loc",[null,[3,4],[11,27]]]],
          ["content","yield",["loc",[null,[13,4],[13,13]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","radio-button-input",[],["class",["subexpr","@mut",[["get","radioClass",["loc",[null,[17,12],[17,22]]]]],[],[]],"id",["subexpr","@mut",[["get","radioId",["loc",[null,[18,9],[18,16]]]]],[],[]],"disabled",["subexpr","@mut",[["get","disabled",["loc",[null,[19,15],[19,23]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[20,11],[20,15]]]]],[],[]],"required",["subexpr","@mut",[["get","required",["loc",[null,[21,15],[21,23]]]]],[],[]],"groupValue",["subexpr","@mut",[["get","groupValue",["loc",[null,[22,17],[22,27]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[23,12],[23,17]]]]],[],[]],"changed","changed"],["loc",[null,[16,2],[24,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/components/radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","hasBlock",["loc",[null,[1,6],[1,14]]]]],[],0,1,["loc",[null,[1,0],[25,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/x-select', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "kodr/templates/components/x-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1,"disabled","");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'selected');
          morphs[1] = dom.createMorphAt(element2,1,1);
          return morphs;
        },
        statements: [
          ["attribute","selected",["subexpr","is-not",[["get","selection",["loc",[null,[3,39],[3,48]]]]],[],["loc",[null,[3,30],[3,50]]]]],
          ["content","prompt",["loc",[null,[4,6],[4,16]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/x-select.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n     ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'value');
            morphs[1] = dom.createAttrMorph(element1, 'selected');
            morphs[2] = dom.createMorphAt(element1,1,1);
            return morphs;
          },
          statements: [
            ["attribute","value",["concat",[["subexpr","read-path",[["get","item",["loc",[null,[10,33],[10,37]]]],["get","optionValuePath",["loc",[null,[10,38],[10,53]]]]],[],["loc",[null,[10,21],[10,55]]]]]]],
            ["attribute","selected",["subexpr","is-equal",[["get","item",["loc",[null,[11,32],[11,36]]]],["get","selection",["loc",[null,[11,37],[11,46]]]]],[],["loc",[null,[11,21],[11,48]]]]],
            ["inline","read-path",[["get","item",["loc",[null,[12,18],[12,22]]]],["get","optionLabelPath",["loc",[null,[12,23],[12,38]]]]],[],["loc",[null,[12,6],[12,40]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/components/x-select.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1,"value","item");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'selected');
            morphs[1] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["attribute","selected",["subexpr","is-equal",[["get","item",["loc",[null,[16,34],[16,38]]]],["get","selection",["loc",[null,[16,39],[16,48]]]]],[],["loc",[null,[16,23],[16,50]]]]],
            ["content","item",["loc",[null,[17,8],[17,16]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 20,
              "column": 2
            }
          },
          "moduleName": "kodr/templates/components/x-select.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","_primativeList",["loc",[null,[9,14],[9,28]]]]],[],0,1,["loc",[null,[9,4],[19,15]]]]
        ],
        locals: ["item"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 9
          }
        },
        "moduleName": "kodr/templates/components/x-select.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("select");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  \n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element3);
        morphs[1] = dom.createMorphAt(element3,1,1);
        morphs[2] = dom.createMorphAt(element3,3,3);
        return morphs;
      },
      statements: [
        ["element","action",["change"],["on","change"],["loc",[null,[1,8],[1,39]]]],
        ["block","if",[["get","prompt",["loc",[null,[2,8],[2,14]]]]],[],0,null,["loc",[null,[2,2],[6,9]]]],
        ["block","each",[["get","content",["loc",[null,[8,10],[8,17]]]]],["key","@identity"],1,null,["loc",[null,[8,2],[20,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/components/x-woof-message', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "kodr/templates/components/x-woof-message.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"type","button");
        dom.setAttribute(el2,"class","close");
        dom.setAttribute(el2,"data-dismiss","alert");
        dom.setAttribute(el2,"aria-hidden","true");
        var el3 = dom.createTextNode("Ã—");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["woof-message alert alert-dismissable ",["get","message.typeClass",["loc",[null,[1,51],[1,68]]]]]]],
        ["inline","capitalize",[["get","message.type",["loc",[null,[3,27],[3,39]]]]],[],["loc",[null,[3,14],[3,41]]]],
        ["content","message.message",["loc",[null,[3,51],[3,70]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/components/x-woof', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/components/x-woof.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","x-woof-message",[],["message",["subexpr","@mut",[["get","message",["loc",[null,[2,27],[2,34]]]]],[],[]]],["loc",[null,[2,2],[2,36]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "kodr/templates/components/x-woof.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","messages",["loc",[null,[1,8],[1,16]]]],["get","as",["loc",[null,[1,17],[1,19]]]],["get","message",["loc",[null,[1,20],[1,27]]]]],[],0,null,["loc",[null,[1,0],[3,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/forgotpass', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/forgotpass.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","errorMessage",["loc",[null,[9,8],[9,24]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/forgotpass.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[15,13],[15,24]]]]
          ],
          locals: ["message"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/forgotpass.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","fullErrors",["loc",[null,[14,16],[14,26]]]]],[],0,null,["loc",[null,[14,8],[16,17]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/forgotpass.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","page-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Fogot Password");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-sm-8 col-sm-offset-2");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group text-center");
        var el5 = dom.createTextNode("\n        \n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","identification");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Username or Email");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"type","submit");
        dom.setAttribute(el4,"class","submit btn btn-primary");
        var el5 = dom.createTextNode("Request Token");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var element1 = dom.childAt(element0, [4]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,2,2);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),3,3);
        return morphs;
      },
      statements: [
        ["block","if",[["get","errorMessage",["loc",[null,[7,10],[7,22]]]]],[],0,null,["loc",[null,[7,4],[11,11]]]],
        ["block","if",[["get","fullErrors",["loc",[null,[12,10],[12,20]]]]],[],1,null,["loc",[null,[12,4],[18,11]]]],
        ["element","action",["validate"],["on","submit"],["loc",[null,[20,10],[20,43]]]],
        ["inline","input",[],["type","text","class","form-control","id","identification","value",["subexpr","@mut",[["get","identification",["loc",[null,[26,75],[26,89]]]]],[],[]],"autofocus","autofocus"],["loc",[null,[26,8],[26,113]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","bread-crumbs",["loc",[null,[1,0],[1,16]]]],
        ["content","outlet",["loc",[null,[2,0],[2,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/group/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "kodr/templates/group/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","form-group");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","editable col-lg-12");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3,"for","name");
          dom.setAttribute(el3,"class","control-label");
          var el4 = dom.createTextNode("Add Teacher");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","form-group");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","editable col-lg-12");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3,"for","name");
          dom.setAttribute(el3,"class","control-label");
          var el4 = dom.createTextNode("Add Student");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),3,3);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),3,3);
          return morphs;
        },
        statements: [
          ["inline","ember-selectize",[],["name","leaders","multiple",true,"content",["subexpr","@mut",[["get","teacherOptions",["loc",[null,[26,18],[26,32]]]]],[],[]],"optionValuePath","content","optionLabelPath","content.username","selection",["subexpr","@mut",[["get","selectedTeachers",["loc",[null,[29,20],[29,36]]]]],[],[]],"class","group-leader form-control"],["loc",[null,[23,6],[31,12]]]],
          ["inline","ember-selectize",[],["name","subscribers","multiple",true,"content",["subexpr","@mut",[["get","studentOptions",["loc",[null,[40,18],[40,32]]]]],[],[]],"optionValuePath","content","optionLabelPath","content.username","selection",["subexpr","@mut",[["get","selectedStudents",["loc",[null,[43,20],[43,36]]]]],[],[]],"class","group-subscribers form-control"],["loc",[null,[37,6],[45,12]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/group/edit.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#remove");
          dom.setAttribute(el2,"class","group-member-remove pull-right");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-cross");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Remove\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"class","label label-info pull-right");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-profile");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),3,3);
          morphs[2] = dom.createMorphAt(element0,5,5);
          return morphs;
        },
        statements: [
          ["element","action",["remove",["get","member",["loc",[null,[57,44],[57,50]]]]],[],["loc",[null,[57,26],[57,53]]]],
          ["content","member.role",["loc",[null,[61,56],[61,71]]]],
          ["content","member.uname",["loc",[null,[63,8],[63,24]]]]
        ],
        locals: ["member"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/group/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Does not contain any members\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/group/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","group-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","group-save");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-save");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Save");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","group-delete");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-remove");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Delete");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","group-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","editable col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Group name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","group-members");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Members");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","item-group");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element3);
        morphs[1] = dom.createElementMorph(element4);
        morphs[2] = dom.createMorphAt(dom.childAt(element5, [1, 1]),3,3);
        morphs[3] = dom.createMorphAt(element5,3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4, 1, 3]),1,1);
        return morphs;
      },
      statements: [
        ["element","action",["save"],[],["loc",[null,[3,8],[3,25]]]],
        ["element","action",["delete"],[],["loc",[null,[6,8],[6,28]]]],
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","model.name",["loc",[null,[16,30],[16,40]]]]],[],[]],"class","group-name form-control"],["loc",[null,[16,6],[16,74]]]],
        ["block","unless",[["get","isCreating",["loc",[null,[19,12],[19,22]]]]],[],0,null,["loc",[null,[19,2],[48,13]]]],
        ["block","each",[["get","model.members",["loc",[null,[55,12],[55,25]]]]],[],1,2,["loc",[null,[55,4],[67,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/group/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 12
              },
              "end": {
                "line": 4,
                "column": 71
              }
            },
            "moduleName": "kodr/templates/group/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 5,
              "column": 8
            }
          },
          "moduleName": "kodr/templates/group/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["group.edit",["get","model",["loc",[null,[4,36],[4,41]]]]],["class","btn pull-right"],0,null,["loc",[null,[4,12],[4,83]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 45
          }
        },
        "moduleName": "kodr/templates/group/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12 text-center");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[3,14],[3,36]]]]],[],0,null,["loc",[null,[3,8],[5,15]]]],
        ["content","model.name",["loc",[null,[6,21],[6,35]]]],
        ["inline","render",["_groupMembersList",["get","model.members",["loc",[null,[10,29],[10,42]]]]],[],["loc",[null,[10,0],[10,45]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('kodr/templates/groups', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/groups.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/groups/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 161
            }
          },
          "moduleName": "kodr/templates/groups/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Create Many Groups");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 132
            }
          },
          "moduleName": "kodr/templates/groups/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Create Group");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 16
              },
              "end": {
                "line": 14,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/groups/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Edit\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 16
              },
              "end": {
                "line": 21,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/groups/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","group.name",["loc",[null,[20,20],[20,34]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/groups/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("small");
          dom.setAttribute(el3,"class","pull-right");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#remove");
          dom.setAttribute(el4,"class","group-delete");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-trash");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Delete\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["block","link-to",["group.edit",["get","group",["loc",[null,[12,40],[12,45]]]]],["class","group-edit"],0,null,["loc",[null,[12,16],[14,28]]]],
          ["element","action",["remove",["get","group",["loc",[null,[15,52],[15,57]]]]],[],["loc",[null,[15,34],[15,60]]]],
          ["block","link-to",["group",["get","group",["loc",[null,[19,35],[19,40]]]]],["class","group-name"],1,null,["loc",[null,[19,16],[21,28]]]]
        ],
        locals: ["group"],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/groups/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Groups set yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/groups/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Groups");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["groups.make"],["class","btn btn-primary pull-right .create-group","title","create many group"],0,null,["loc",[null,[2,0],[2,173]]]],
        ["block","link-to",["groups.create"],["class","btn btn-primary pull-right .create-group"],1,null,["loc",[null,[3,0],[3,144]]]],
        ["block","each",[["get","model",["loc",[null,[8,8],[8,13]]]]],[],2,3,["loc",[null,[8,0],[26,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('kodr/templates/groups/make', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/groups/make.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","group-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Group name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Starting number");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Ending Number");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","submit");
        dom.setAttribute(el5,"class","btn btn-primary");
        var el6 = dom.createTextNode("Create");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 1]),3,3);
        return morphs;
      },
      statements: [
        ["element","action",["submit"],["on","submit"],["loc",[null,[3,18],[3,49]]]],
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","name",["loc",[null,[7,30],[7,34]]]]],[],[]],"class","group-base-name form-control"],["loc",[null,[7,6],[7,73]]]],
        ["inline","input",[],["id","from","type","number","value",["subexpr","@mut",[["get","from",["loc",[null,[13,44],[13,48]]]]],[],[]],"class","group-from form-control"],["loc",[null,[13,6],[13,82]]]],
        ["inline","input",[],["id","to","type","number","value",["subexpr","@mut",[["get","to",["loc",[null,[19,42],[19,44]]]]],[],[]],"class","group-to form-control"],["loc",[null,[19,6],[19,76]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 118
          }
        },
        "moduleName": "kodr/templates/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createTextNode("Don't mind me I'm just fetching some data for you...");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h5");
        dom.setAttribute(el1,"class","text-center");
        var el2 = dom.createElement("small");
        var el3 = dom.createTextNode("if this is taking to long like more then a mintue maybe you should refresh");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/login', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 12,
                "column": 6
              }
            },
            "moduleName": "kodr/templates/login.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        if you still did not recieve any email in you inbox we can ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"href","#verify");
            var el2 = dom.createTextNode("resend verifcation to ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["element","action",["verify",["get","errorMessage.id",["loc",[null,[11,88],[11,103]]]]],[],["loc",[null,[11,70],[11,106]]]],
            ["content","errorMessage.email",["loc",[null,[11,144],[11,166]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createMorphAt(element1,3,3);
          return morphs;
        },
        statements: [
          ["content","errorMessage.message",["loc",[null,[9,6],[9,30]]]],
          ["block","if",[["get","errorMessage.id",["loc",[null,[10,12],[10,27]]]]],[],0,null,["loc",[null,[10,6],[12,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/login.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[18,13],[18,24]]]]
          ],
          locals: ["message"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","fullErrors",["loc",[null,[17,16],[17,26]]]]],[],0,null,["loc",[null,[17,8],[19,17]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 9
            },
            "end": {
              "line": 36,
              "column": 49
            }
          },
          "moduleName": "kodr/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Sign Up");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 60
            }
          },
          "moduleName": "kodr/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Did you forget your password?");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/login.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","page-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Sign in");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-sm-8 col-sm-offset-2");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group text-center");
        var el5 = dom.createTextNode("\n        \n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","identification");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Username or Email");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","password");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"type","submit");
        dom.setAttribute(el4,"class","submit btn btn-primary");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-unlock-alt");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Sign in");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      or ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 3]);
        var element3 = dom.childAt(element2, [4]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element2,1,1);
        morphs[1] = dom.createMorphAt(element2,2,2);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]),3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5]),3,3);
        morphs[5] = dom.createMorphAt(element3,9,9);
        morphs[6] = dom.createMorphAt(element3,13,13);
        return morphs;
      },
      statements: [
        ["block","if",[["get","errorMessage",["loc",[null,[7,10],[7,22]]]]],[],0,null,["loc",[null,[7,4],[14,11]]]],
        ["block","if",[["get","fullErrors",["loc",[null,[15,10],[15,20]]]]],[],1,null,["loc",[null,[15,4],[21,11]]]],
        ["element","action",["validate"],["on","submit"],["loc",[null,[23,10],[23,43]]]],
        ["inline","input",[],["type","text","class","form-control","id","identification","value",["subexpr","@mut",[["get","identification",["loc",[null,[29,75],[29,89]]]]],[],[]],"autofocus","autofocus"],["loc",[null,[29,8],[29,113]]]],
        ["inline","input",[],["type","password","class","form-control","id","password","value",["subexpr","@mut",[["get","password",["loc",[null,[33,73],[33,81]]]]],[],[]]],["loc",[null,[33,8],[33,83]]]],
        ["block","link-to",["signup"],["class","btn"],2,null,["loc",[null,[36,9],[36,61]]]],
        ["block","link-to",["forgotpass"],[],3,null,["loc",[null,[38,6],[38,72]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('kodr/templates/profile', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/profile.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/quest', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/quest.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","bread-crumbs",["loc",[null,[1,0],[1,16]]]],
        ["content","outlet",["loc",[null,[2,0],[2,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/quest/assign', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/assign.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#remove");
          dom.setAttribute(el2,"class","quest-member-remove pull-right");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-cross");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Un-assign\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["element","action",["remove",["get","userQuest",["loc",[null,[46,44],[46,53]]]]],[],["loc",[null,[46,26],[46,56]]]],
          ["content","userQuest.user.username",["loc",[null,[49,8],[49,35]]]]
        ],
        locals: ["userQuest"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/assign.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      This Quest is not assigned to anyone\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/quest/assign.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","quest-save");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-save");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Assign");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","editable col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Assign Users");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","editable col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Assign Group");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-users");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Assigned Users");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","item-group");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1, 1]);
        var element3 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [1, 1]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [3, 1]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4, 1, 3]),1,1);
        return morphs;
      },
      statements: [
        ["element","action",["assign"],[],["loc",[null,[3,8],[3,27]]]],
        ["inline","ember-selectize",[],["name","users","multiple",true,"content",["subexpr","@mut",[["get","unassignedUsersOptions",["loc",[null,[16,18],[16,40]]]]],[],[]],"optionValuePath","content","optionLabelPath","content.username","selection",["subexpr","@mut",[["get","selected",["loc",[null,[19,20],[19,28]]]]],[],[]],"class","quest-users form-control"],["loc",[null,[13,6],[21,12]]]],
        ["inline","ember-selectize",[],["name","users","multiple",true,"content",["subexpr","@mut",[["get","groupsOptions",["loc",[null,[30,18],[30,31]]]]],[],[]],"optionValuePath","content","optionLabelPath","content.name","selection",["subexpr","@mut",[["get","selectedGroups",["loc",[null,[33,20],[33,34]]]]],[],[]],"class","quest-group form-control"],["loc",[null,[27,6],[35,12]]]],
        ["block","each",[["get","model.userQuests",["loc",[null,[44,12],[44,28]]]]],[],0,1,["loc",[null,[44,4],[53,13]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/quest/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/quest/edit.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","edit-requirement",[],["model",["subexpr","@mut",[["get","req",["loc",[null,[35,16],[35,19]]]]],[],[]],"challenges",["subexpr","@mut",[["get","challenges",["loc",[null,[36,21],[36,31]]]]],[],[]],"arenas",["subexpr","@mut",[["get","arenas",["loc",[null,[37,17],[37,23]]]]],[],[]],"removeAction","removeReq","requirementChangeAction","requirementChanged"],["loc",[null,[34,8],[39,56]]]]
        ],
        locals: ["req"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/edit.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("\n         ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","partial",["_requirement"],[],["loc",[null,[52,9],[52,36]]]]
        ],
        locals: ["req"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Does not have any requirements\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/quest/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-save");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Save");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"title","after publishing you can no longer change the value of this quest");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-ok-circle");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Publish");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","quest-delete");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-remove");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Delete");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Quest name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","description");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Quest description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Quest Requires");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"class","btn btn-sm btn-default");
        var el6 = dom.createTextNode("add Requirement");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        \n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","quest-requirements");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Requirements");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","item-group");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element0, [5]);
        var element4 = dom.childAt(fragment, [2, 1]);
        var element5 = dom.childAt(element4, [5, 1]);
        var element6 = dom.childAt(element5, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [1, 1]),3,3);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [3, 1]),3,3);
        morphs[7] = dom.createElementMorph(element6);
        morphs[8] = dom.createMorphAt(element5,5,5);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [4, 1, 3]),1,1);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",[["subexpr","if",[["get","model.shouldSave",["loc",[null,[3,38],[3,54]]]],"","disabled"],[],["loc",[null,[3,33],[3,70]]]]," quest-save"]]],
        ["element","action",["save"],[],["loc",[null,[3,8],[3,25]]]],
        ["attribute","class",["concat",[["subexpr","if",[["get","model.canPublish",["loc",[null,[6,41],[6,57]]]],"","disabled"],[],["loc",[null,[6,36],[6,73]]]]," quest-publish"]]],
        ["element","action",["publish"],[],["loc",[null,[6,8],[6,28]]]],
        ["element","action",["delete"],[],["loc",[null,[9,8],[9,28]]]],
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","model.name",["loc",[null,[19,30],[19,40]]]]],[],[]],"class","quest-name form-control"],["loc",[null,[19,6],[19,74]]]],
        ["inline","textarea",[],["id","description","value",["subexpr","@mut",[["get","model.description",["loc",[null,[25,40],[25,57]]]]],[],[]],"class","quest-description form-control"],["loc",[null,[25,6],[25,98]]]],
        ["element","action",["add"],[],["loc",[null,[31,14],[31,30]]]],
        ["block","each",[["get","model.requirements",["loc",[null,[33,14],[33,32]]]]],[],0,null,["loc",[null,[33,6],[41,15]]]],
        ["block","each",[["get","model.requirements",["loc",[null,[50,12],[50,30]]]]],[],1,2,["loc",[null,[50,4],[56,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/quest/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 12
              },
              "end": {
                "line": 4,
                "column": 71
              }
            },
            "moduleName": "kodr/templates/quest/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 12
              },
              "end": {
                "line": 5,
                "column": 75
              }
            },
            "moduleName": "kodr/templates/quest/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Assign");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 8
            }
          },
          "moduleName": "kodr/templates/quest/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["quest.edit",["get","model",["loc",[null,[4,36],[4,41]]]]],["class","btn pull-right"],0,null,["loc",[null,[4,12],[4,83]]]],
          ["block","link-to",["quest.assign",["get","model",["loc",[null,[5,38],[5,43]]]]],["class","btn pull-right"],1,null,["loc",[null,[5,12],[5,87]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("\n         ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","partial",["_requirement"],[],["loc",[null,[16,9],[16,36]]]]
        ],
        locals: ["req"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Does not have any requirements\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 14
              },
              "end": {
                "line": 30,
                "column": 14
              }
            },
            "moduleName": "kodr/templates/quest/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","userQuest.user.username",["loc",[null,[29,16],[29,43]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","link-to",["user",["get","userQuest.user",["loc",[null,[28,32],[28,46]]]]],["class","user-name"],0,null,["loc",[null,[28,14],[30,26]]]]
        ],
        locals: ["userQuest"],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/quest/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      This Quest is not assigned to anyone\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 7
          }
        },
        "moduleName": "kodr/templates/quest/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12 text-center");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode("Requirements");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("    \n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","item-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [10]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[3,14],[3,36]]]]],[],0,null,["loc",[null,[3,8],[6,15]]]],
        ["content","model.name",["loc",[null,[7,21],[7,35]]]],
        ["content","model.description",["loc",[null,[8,11],[8,32]]]],
        ["block","each",[["get","requirements",["loc",[null,[14,8],[14,20]]]]],[],1,2,["loc",[null,[14,0],[20,13]]]],
        ["block","each",[["get","model.userQuests",["loc",[null,[25,12],[25,28]]]]],[],3,4,["loc",[null,[25,4],[35,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('kodr/templates/quests/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 132
            }
          },
          "moduleName": "kodr/templates/quests/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Create Quest");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 16
              },
              "end": {
                "line": 13,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/quests/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-save");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Assign\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 16
              },
              "end": {
                "line": 16,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/quests/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Edit\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 16
              },
              "end": {
                "line": 23,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/quests/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","quest.name",["loc",[null,[22,20],[22,34]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/quests/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("small");
          dom.setAttribute(el3,"class","pull-right");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4,"href","#remove");
          dom.setAttribute(el4,"class","quest-delete");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("i");
          dom.setAttribute(el5,"class","glyphicon glyphicon-trash");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Delete\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [4]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createMorphAt(element1,2,2);
          morphs[2] = dom.createElementMorph(element2);
          morphs[3] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["block","link-to",["quest.assign",["get","quest",["loc",[null,[11,42],[11,47]]]]],["class","quest-assign"],0,null,["loc",[null,[11,16],[13,28]]]],
          ["block","link-to",["quest.edit",["get","quest",["loc",[null,[14,40],[14,45]]]]],["class","quest-edit"],1,null,["loc",[null,[14,16],[16,28]]]],
          ["element","action",["remove",["get","quest",["loc",[null,[17,52],[17,57]]]]],[],["loc",[null,[17,34],[17,60]]]],
          ["block","link-to",["quest",["get","quest",["loc",[null,[21,35],[21,40]]]]],["class","quest-name"],2,null,["loc",[null,[21,16],[23,28]]]]
        ],
        locals: ["quest"],
        templates: [child0, child1, child2]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/quests/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Quests set yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/quests/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Quests");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["quests.create"],["class","btn btn-primary pull-right .create-quest"],0,null,["loc",[null,[2,0],[2,144]]]],
        ["block","each",[["get","model",["loc",[null,[7,8],[7,13]]]]],[],1,2,["loc",[null,[7,0],[28,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/signup', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/signup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","errorMessage",["loc",[null,[9,8],[9,24]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/signup.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[15,13],[15,24]]]]
          ],
          locals: ["message"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/signup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","fullErrors",["loc",[null,[14,17],[14,27]]]]],[],0,null,["loc",[null,[14,8],[16,17]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/signup.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","page-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Create Account");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-sm-8 col-sm-offset-2");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group text-center");
        var el5 = dom.createTextNode("\n        \n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","username");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Username");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","uniId");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Uni ID");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","lectureGroup");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Lecture Group");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","lectureGroup");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Lab Group");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","password");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("small");
        dom.setAttribute(el5,"class","help-block");
        var el6 = dom.createTextNode("Must be at least 8 characters long.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","form-group");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","passwordConfirmation");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("Confirm Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","well");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("\n          The GUC is constantly trying to help its students by by improving and developing its curriculum and teaching pedagogy. In order for us to provide you with the best learning experience, this system logs your activity and tries to monitor your learning. \n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("\n          Accordingly by signing up on this system you acknowledge that your activities will be logged and used for the purpose of research. ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("The data collected will not affect your grades");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("; however, using the system will help you practice and improve your performance, which will subsequently affect your grade in a good way.\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("\n          While using the system you will be randomly assigned to an experimental feature, meant to improve your learning. This will be used for the purpose of learning research, you can opt out of participating in the user settings.\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("hr");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        In order for us to properly assess your learning experience, we ask that you agree to the following ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("honor code");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(".\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("br");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("br");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ol");
        dom.setAttribute(el5,"class","");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("I will register for only one account.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("My answers to homework, questions, challenges, and other assessments will be my own work (except for when I am explicitly permit collaboration).");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("I will not make solutions to homework, questions, challenges, and other assessments available to anyone else (except to the extent an assessments explicitly permits sharing solutions). This includes both solutions written by me, as well as any solutions provided by the course staff or others.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("I will not engage in any other activities that will dishonestly improve my results or dishonestly improve or hurt the results of others.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("br");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" I understand and agree to follow the honor code");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"type","submit");
        dom.setAttribute(el4,"class","btn btn-success");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-rocket");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Sign up");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 3]);
        var element1 = dom.childAt(element0, [4]);
        var element2 = dom.childAt(element1, [17]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,2,2);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]),3,3);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [7]),3,3);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [9]),3,3);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [11]),3,3);
        morphs[8] = dom.createMorphAt(dom.childAt(element1, [13]),3,3);
        morphs[9] = dom.createMorphAt(dom.childAt(element1, [15, 18]),0,0);
        morphs[10] = dom.createAttrMorph(element2, 'disabled');
        return morphs;
      },
      statements: [
        ["block","if",[["get","errorMessage",["loc",[null,[7,10],[7,22]]]]],[],0,null,["loc",[null,[7,4],[11,11]]]],
        ["block","if",[["get","fullErrors",["loc",[null,[12,10],[12,20]]]]],[],1,null,["loc",[null,[12,4],[18,11]]]],
        ["element","action",["signup"],["on","submit"],["loc",[null,[20,10],[20,41]]]],
        ["inline","input",[],["type","text","class","form-control","value",["subexpr","@mut",[["get","username",["loc",[null,[26,55],[26,63]]]]],[],[]],"autofocus","autofocus"],["loc",[null,[26,8],[26,87]]]],
        ["inline","input",[],["type","text","class","form-control","value",["subexpr","@mut",[["get","uniId",["loc",[null,[30,55],[30,60]]]]],[],[]]],["loc",[null,[30,8],[30,62]]]],
        ["inline","ember-selectize",[],["name","id1","content",["subexpr","@mut",[["get","lectureGroups",["loc",[null,[35,30],[35,43]]]]],[],[]],"optionValuePath","content","optionLabelPath","content","value",["subexpr","@mut",[["get","lectureGroup",["loc",[null,[38,28],[38,40]]]]],[],[]],"multiple",false,"class","requirement-model1"],["loc",[null,[34,8],[41,24]]]],
        ["inline","ember-selectize",[],["name","id1","multiple",false,"content",["subexpr","@mut",[["get","labGroups",["loc",[null,[47,30],[47,39]]]]],[],[]],"optionValuePath","content","optionLabelPath","content","value",["subexpr","@mut",[["get","labGroup",["loc",[null,[50,28],[50,36]]]]],[],[]],"class","requirement-model1"],["loc",[null,[45,8],[52,24]]]],
        ["inline","input",[],["type","password","class","form-control","value",["subexpr","@mut",[["get","password",["loc",[null,[56,59],[56,67]]]]],[],[]]],["loc",[null,[56,8],[56,69]]]],
        ["inline","input",[],["type","password","class","form-control","value",["subexpr","@mut",[["get","passwordConfirmation",["loc",[null,[61,59],[61,79]]]]],[],[]]],["loc",[null,[61,8],[61,81]]]],
        ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","hasHonor",["loc",[null,[83,47],[83,55]]]]],[],[]]],["loc",[null,[83,15],[83,57]]]],
        ["attribute","disabled",["concat",[["get","isProcessing",["loc",[null,[85,64],[85,76]]]]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/trial', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 6
          }
        },
        "moduleName": "kodr/templates/trial.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","description panel panel-default");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","pull-right label label-primary");
        var el4 = dom.createTextNode("awards ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Exp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","panel-title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","model.challenge.exp",["loc",[null,[3,56],[3,79]]]],
        ["content","model.challenge.name",["loc",[null,[4,28],[4,52]]]],
        ["inline","component",[["subexpr","concat",["challenge/challenge-trial-"],[],["loc",[null,[8,12],[8,49]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[9,10],[9,15]]]]],[],[]],"challenge",["subexpr","@mut",[["get","challenge",["loc",[null,[10,14],[10,23]]]]],[],[]],"run","run","test","test"],["loc",[null,[8,0],[13,6]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/user-arena', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/user-arena.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","bread-crumbs",["loc",[null,[1,0],[1,16]]]],
        ["content","outlet",["loc",[null,[2,0],[2,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/user-arena/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 61
              }
            },
            "moduleName": "kodr/templates/user-arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Edit");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/user-arena/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["arena.edit",["get","arena",["loc",[null,[4,26],[4,31]]]]],["class","btn pull-right"],0,null,["loc",[null,[4,2],[4,73]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/user-arena/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","pull-right");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" XP");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.exp",["loc",[null,[9,29],[9,42]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/user-arena/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","glyphicon glyphicon-star");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            morphs[2] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["btn  ",["subexpr","if",[["get","trial.complete",["loc",[null,[17,59],[17,73]]]],"btn-success"],[],["loc",[null,[17,54],[17,89]]]]," col-md-4"]]],
            ["element","action",["try",["get","trial",["loc",[null,[17,33],[17,38]]]]],[],["loc",[null,[17,18],[17,41]]]],
            ["content","trial.challenge.exp",["loc",[null,[18,14],[18,37]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/user-arena/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","trial.challenge.isPublished",["loc",[null,[16,14],[16,41]]]]],[],0,null,["loc",[null,[16,8],[20,15]]]]
        ],
        locals: ["trial"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/user-arena/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12 text-center");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        morphs[3] = dom.createMorphAt(element1,7,7);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[3,6],[3,28]]]]],[],0,null,["loc",[null,[3,0],[5,7]]]],
        ["content","arena.name",["loc",[null,[6,17],[6,31]]]],
        ["content","arena.description",["loc",[null,[7,7],[7,28]]]],
        ["block","if",[["get","model.exp",["loc",[null,[8,10],[8,19]]]]],[],1,null,["loc",[null,[8,4],[10,11]]]],
        ["block","each",[["get","trials",["loc",[null,[15,12],[15,18]]]]],[],2,null,["loc",[null,[15,4],[21,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/user-arena/trial', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/user-arena/trial.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/user-arenas', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "kodr/templates/user-arenas.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/user-arenas/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "kodr/templates/user-arenas/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","glyphicon glyphicon-play");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" Try\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/user-arenas/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","list-group-item-heading");
            var el2 = dom.createTextNode("\n        \n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","pull-right");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        \n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            \n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
            morphs[1] = dom.createMorphAt(element0,3,3);
            return morphs;
          },
          statements: [
            ["block","link-to",["userArena",["get","userArena",["loc",[null,[9,31],[9,40]]]]],["class","btn-primary btn-sm user-arena-try"],0,null,["loc",[null,[9,8],[11,20]]]],
            ["content","userArena.arena.name",["loc",[null,[14,8],[14,32]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/user-arenas/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["userArena",["get","userArena",["loc",[null,[5,27],[5,36]]]]],["class","user-arena-name","class","list-group-item"],0,null,["loc",[null,[5,4],[16,16]]]]
        ],
        locals: ["userArena"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/user-arenas/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Arenas are published yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 6
          }
        },
        "moduleName": "kodr/templates/user-arenas/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Arenas");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[4,8],[4,13]]]]],[],0,1,["loc",[null,[4,0],[19,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('kodr/templates/user/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "kodr/templates/user/edit.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","user-activate");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"href","#");
            var el3 = dom.createElement("i");
            dom.setAttribute(el3,"class","glyphicon glyphicon-ok-circle");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" Activate");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","user-verify");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"href","#");
            var el3 = dom.createElement("i");
            dom.setAttribute(el3,"class","glyphicon glyphicon-send");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" Send Verification Email");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [
            ["element","action",["activate"],[],["loc",[null,[9,10],[9,31]]]],
            ["element","action",["verify"],[],["loc",[null,[12,10],[12,29]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/user/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","glyphicon glyphicon-remove");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Delete");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("      \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createAttrMorph(element4, 'class');
          morphs[2] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","model.activated",["loc",[null,[8,14],[8,29]]]]],[],0,null,["loc",[null,[8,4],[15,15]]]],
          ["attribute","class",["concat",[["subexpr","if",[["get","model.isAdmin",["loc",[null,[17,41],[17,54]]]],"disabled"],[],["loc",[null,[17,36],[17,67]]]]," user-delete"]]],
          ["element","action",["delete"],[],["loc",[null,[17,8],[17,28]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "moduleName": "kodr/templates/user/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","form-group");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-lg-12");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3,"for","description");
          dom.setAttribute(el3,"class","control-label");
          var el4 = dom.createTextNode("User role");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),3,3);
          return morphs;
        },
        statements: [
          ["inline","ember-selectize",[],["name","id1","content",["subexpr","@mut",[["get","model.roles",["loc",[null,[48,16],[48,27]]]]],[],[]],"value",["subexpr","@mut",[["get","model.role",["loc",[null,[49,14],[49,24]]]]],[],[]],"optionValuePath","content","optionLabelPath","content","class","user-role form-control"],["loc",[null,[47,6],[53,10]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/user/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1,"class","user-password-reset row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2,"role","form-horizontal col-md-6 col-md-offset-1");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("fieldset");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("legend");
          var el5 = dom.createTextNode("Change Password");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","form-group");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5,"for","name");
          dom.setAttribute(el5,"class","control-label");
          var el6 = dom.createTextNode("New Password");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","form-group");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5,"for","name");
          dom.setAttribute(el5,"class","control-label");
          var el6 = dom.createTextNode("New Password Confirmation");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4,"class","btn btn-default");
          var el5 = dom.createTextNode("Change");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1, 1]);
          var element1 = dom.childAt(element0, [7]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),3,3);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [5]),3,3);
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","password",["loc",[null,[67,40],[67,48]]]]],[],[]],"class","form-control"],["loc",[null,[67,10],[67,71]]]],
          ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","passwordConfirmation",["loc",[null,[71,40],[71,60]]]]],[],[]],"class","form-control"],["loc",[null,[71,10],[71,83]]]],
          ["element","action",["changePass"],[],["loc",[null,[73,14],[73,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/user/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","user-controlles row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills pull-right");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","glyphicon glyphicon-save");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Save");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","user-settings row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"role","form");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("User name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","description");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("User email");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-12");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5,"for","name");
        dom.setAttribute(el5,"class","control-label");
        var el6 = dom.createTextNode("User Uni Id");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0, 1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element6, 'class');
        morphs[1] = dom.createElementMorph(element6);
        morphs[2] = dom.createMorphAt(element5,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [1, 1]),3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element7, [3, 1]),3,3);
        morphs[5] = dom.createMorphAt(dom.childAt(element7, [5, 1]),3,3);
        morphs[6] = dom.createMorphAt(element7,7,7);
        morphs[7] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",[["subexpr","if",[["get","model.hasDirtyAttributes",["loc",[null,[3,38],[3,62]]]],"","disabled"],[],["loc",[null,[3,33],[3,78]]]]," user-save"]]],
        ["element","action",["save"],[],["loc",[null,[3,8],[3,25]]]],
        ["block","unless",[["get","isCreating",["loc",[null,[6,14],[6,24]]]]],[],0,null,["loc",[null,[6,4],[20,15]]]],
        ["inline","input",[],["id","name","value",["subexpr","@mut",[["get","model.username",["loc",[null,[28,30],[28,44]]]]],[],[]],"class","user-username form-control"],["loc",[null,[28,6],[28,81]]]],
        ["inline","input",[],["id","description","value",["subexpr","@mut",[["get","model.email",["loc",[null,[34,37],[34,48]]]]],[],[]],"class","user-email form-control"],["loc",[null,[34,6],[34,82]]]],
        ["inline","input",[],["id","uniId","value",["subexpr","@mut",[["get","model.uniId",["loc",[null,[40,31],[40,42]]]]],[],[]],"class","user-uniId form-control"],["loc",[null,[40,6],[40,76]]]],
        ["block","if",[["get","isCreatingOrNotAdmin",["loc",[null,[43,8],[43,28]]]]],[],1,null,["loc",[null,[43,2],[56,9]]]],
        ["block","unless",[["get","isCreating",["loc",[null,[59,10],[59,20]]]]],[],2,null,["loc",[null,[59,0],[77,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/user/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item text-right");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pull-left");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Email");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),2,2);
          return morphs;
        },
        statements: [
          ["content","model.email",["loc",[null,[9,99],[9,114]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 16,
                "column": 6
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","member.gname",["loc",[null,[15,8],[15,24]]]]
          ],
          locals: ["member"],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 18,
                "column": 6
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        You have Yet to join a group\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item text-right");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","pull-left");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Group");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),2,2);
          return morphs;
        },
        statements: [
          ["block","each",[["get","model.memberships",["loc",[null,[14,14],[14,31]]]]],[],0,1,["loc",[null,[14,6],[18,15]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 28,
                "column": 8
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2,"href","#progress");
            dom.setAttribute(el2,"role","tab");
            dom.setAttribute(el2,"data-toggle","tab");
            var el3 = dom.createTextNode("Progress");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","active");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#quests");
          dom.setAttribute(el2,"role","tab");
          dom.setAttribute(el2,"data-toggle","tab");
          var el3 = dom.createTextNode("Quests");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","session.isStudent",["loc",[null,[26,18],[26,35]]]]],[],0,null,["loc",[null,[26,8],[28,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","active");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#groups");
          dom.setAttribute(el2,"role","tab");
          dom.setAttribute(el2,"data-toggle","tab");
          var el3 = dom.createTextNode("Groups");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#settings");
          dom.setAttribute(el2,"role","tab");
          dom.setAttribute(el2,"data-toggle","tab");
          var el3 = dom.createTextNode("Settings");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 18
                },
                "end": {
                  "line": 52,
                  "column": 18
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","pull-right");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","glyphicon glyphicon-ok-circle");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 16
                },
                "end": {
                  "line": 64,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["content","quest.description",["loc",[null,[62,20],[62,41]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 24
                  },
                  "end": {
                    "line": 71,
                    "column": 24
                  }
                },
                "moduleName": "kodr/templates/user/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","pull-right text-success");
                var el2 = dom.createElement("i");
                dom.setAttribute(el2,"class","glyphicon glyphicon-ok-circle");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 75,
                        "column": 31
                      },
                      "end": {
                        "line": 77,
                        "column": 32
                      }
                    },
                    "moduleName": "kodr/templates/user/index.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                 ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["content","req.model1",["loc",[null,[76,33],[76,47]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 74,
                      "column": 30
                    },
                    "end": {
                      "line": 78,
                      "column": 30
                    }
                  },
                  "moduleName": "kodr/templates/user/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","link-to",["challengeTrial",["get","req.id1",["loc",[null,[75,59],[75,66]]]]],[],0,null,["loc",[null,[75,31],[77,44]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 79,
                        "column": 32
                      },
                      "end": {
                        "line": 81,
                        "column": 32
                      }
                    },
                    "moduleName": "kodr/templates/user/index.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["content","req.model1",["loc",[null,[80,34],[80,48]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 78,
                      "column": 30
                    },
                    "end": {
                      "line": 82,
                      "column": 30
                    }
                  },
                  "moduleName": "kodr/templates/user/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","link-to",["userArena",["get","req.id1",["loc",[null,[79,55],[79,62]]]]],[],0,null,["loc",[null,[79,32],[81,44]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 73,
                    "column": 26
                  },
                  "end": {
                    "line": 83,
                    "column": 26
                  }
                },
                "moduleName": "kodr/templates/user/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["get","req.isChallenge",["loc",[null,[74,36],[74,51]]]]],[],0,1,["loc",[null,[74,30],[82,37]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          var child2 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 84,
                      "column": 30
                    },
                    "end": {
                      "line": 86,
                      "column": 30
                    }
                  },
                  "moduleName": "kodr/templates/user/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("strong");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
                  return morphs;
                },
                statements: [
                  ["content","req.times",["loc",[null,[85,42],[85,55]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 89,
                        "column": 34
                      },
                      "end": {
                        "line": 91,
                        "column": 34
                      }
                    },
                    "moduleName": "kodr/templates/user/index.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["content","req.model2",["loc",[null,[90,36],[90,50]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 87,
                      "column": 30
                    },
                    "end": {
                      "line": 92,
                      "column": 34
                    }
                  },
                  "moduleName": "kodr/templates/user/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                                  Challange(s) in\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","link-to",["userArena",["get","req.id2",["loc",[null,[89,57],[89,64]]]]],[],0,null,["loc",[null,[89,34],[91,46]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            var child2 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 93,
                        "column": 34
                      },
                      "end": {
                        "line": 95,
                        "column": 34
                      }
                    },
                    "moduleName": "kodr/templates/user/index.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["content","req.model1",["loc",[null,[94,36],[94,50]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 92,
                      "column": 34
                    },
                    "end": {
                      "line": 96,
                      "column": 30
                    }
                  },
                  "moduleName": "kodr/templates/user/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","link-to",["arenas"],[],0,null,["loc",[null,[93,34],[95,46]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 26
                  },
                  "end": {
                    "line": 97,
                    "column": 26
                  }
                },
                "moduleName": "kodr/templates/user/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["get","req.times",["loc",[null,[84,36],[84,45]]]]],[],0,null,["loc",[null,[84,30],[86,37]]]],
                ["block","if",[["get","req.id2",["loc",[null,[87,36],[87,43]]]]],[],1,2,["loc",[null,[87,30],[96,37]]]]
              ],
              locals: [],
              templates: [child0, child1, child2]
            };
          }());
          var child3 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 99,
                    "column": 25
                  },
                  "end": {
                    "line": 107,
                    "column": 25
                  }
                },
                "moduleName": "kodr/templates/user/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                           ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                dom.setAttribute(el1,"class","list-group-item-text");
                var el2 = dom.createTextNode("\n                             ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","progress");
                var el3 = dom.createTextNode("\n                              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"role","progressbar");
                dom.setAttribute(el3,"aria-valuemin","0");
                var el4 = dom.createTextNode("\n                                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("/");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                              ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                           ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1, 1, 1]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element7, 'class');
                morphs[1] = dom.createAttrMorph(element7, 'aria-valuenow');
                morphs[2] = dom.createAttrMorph(element7, 'aria-valuemax');
                morphs[3] = dom.createAttrMorph(element7, 'style');
                morphs[4] = dom.createMorphAt(element7,1,1);
                morphs[5] = dom.createMorphAt(element7,3,3);
                return morphs;
              },
              statements: [
                ["attribute","class",["concat",["progress-bar ",["subexpr","if",[["get","req.complete",["loc",[null,[102,79],[102,91]]]],"progress-bar-success"],[],["loc",[null,[102,74],[102,116]]]]]]],
                ["attribute","aria-valuenow",["subexpr","if",[["get","req.completed",["loc",[null,[102,137],[102,150]]]]],[],["loc",[null,[102,132],[102,152]]]]],
                ["attribute","aria-valuemax",["get","req.times",["loc",[null,[102,187],[102,196]]]]],
                ["attribute","style",["get","req.progressInCSS",["loc",[null,[102,207],[102,224]]]]],
                ["content","req.completed",["loc",[null,[103,32],[103,49]]]],
                ["content","req.times",["loc",[null,[103,50],[103,63]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 67,
                  "column": 18
                },
                "end": {
                  "line": 109,
                  "column": 18
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","list-group-item");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                         Complete \n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element8,1,1);
              morphs[1] = dom.createMorphAt(element8,3,3);
              morphs[2] = dom.createMorphAt(element8,4,4);
              return morphs;
            },
            statements: [
              ["block","if",[["get","req.complete",["loc",[null,[69,30],[69,42]]]]],[],0,null,["loc",[null,[69,24],[71,31]]]],
              ["block","unless",[["get","req.isAny1",["loc",[null,[73,36],[73,46]]]]],[],1,2,["loc",[null,[73,26],[97,37]]]],
              ["block","if",[["get","req.isMultiple",["loc",[null,[99,31],[99,45]]]]],[],3,null,["loc",[null,[99,25],[107,32]]]]
            ],
            locals: ["req"],
            templates: [child0, child1, child2, child3]
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 109,
                  "column": 18
                },
                "end": {
                  "line": 111,
                  "column": 18
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                      Does not have any requirements\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 10
              },
              "end": {
                "line": 115,
                "column": 10
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","panel-heading");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h4");
            dom.setAttribute(el3,"class","panel-title");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                  ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4,"data-toggle","collapse");
            dom.setAttribute(el4,"data-parent","#questAccordion");
            var el5 = dom.createTextNode("\n                    ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                  ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","panel-collapse collapse");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","panel-body");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3,"class","list-group");
            var el4 = dom.createTextNode("    \n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var element10 = dom.childAt(element9, [1, 1]);
            var element11 = dom.childAt(element10, [3]);
            var element12 = dom.childAt(element9, [3]);
            var morphs = new Array(7);
            morphs[0] = dom.createAttrMorph(element9, 'class');
            morphs[1] = dom.createMorphAt(element10,1,1);
            morphs[2] = dom.createAttrMorph(element11, 'href');
            morphs[3] = dom.createMorphAt(element11,1,1);
            morphs[4] = dom.createAttrMorph(element12, 'id');
            morphs[5] = dom.createMorphAt(dom.childAt(element12, [1]),1,1);
            morphs[6] = dom.createMorphAt(dom.childAt(element12, [3]),1,1);
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["panel ",["subexpr","if",[["get","quest.complete",["loc",[null,[47,35],[47,49]]]],"panel-success","panel-default"],[],["loc",[null,[47,30],[47,83]]]]]]],
            ["block","if",[["get","quest.complete",["loc",[null,[50,24],[50,38]]]]],[],0,null,["loc",[null,[50,18],[52,25]]]],
            ["attribute","href",["get","quest.hash",["loc",[null,[53,81],[53,91]]]]],
            ["content","quest.name",["loc",[null,[54,20],[54,34]]]],
            ["attribute","id",["get","quest.id",["loc",[null,[58,24],[58,32]]]]],
            ["block","if",[["get","quest.description",["loc",[null,[60,22],[60,39]]]]],[],1,null,["loc",[null,[60,16],[64,23]]]],
            ["block","each",[["get","quest.requirements",["loc",[null,[67,26],[67,44]]]]],[],2,3,["loc",[null,[67,18],[111,27]]]]
          ],
          locals: ["quest"],
          templates: [child0, child1, child2, child3]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 115,
                "column": 10
              },
              "end": {
                "line": 119,
                "column": 10
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","col-md-12");
            var el3 = dom.createTextNode("You do not have any quests");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","tab-pane");
          dom.setAttribute(el1,"id","progress");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","tab-pane active");
          dom.setAttribute(el1,"id","quests");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","panel-group");
          dom.setAttribute(el2,"id","questAccordion");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","high-chart",[],["chartId","revenue-by-product","series",["subexpr","@mut",[["get","activitySeries",["loc",[null,[42,59],[42,73]]]]],[],[]]],["loc",[null,[42,10],[42,76]]]],
          ["block","each",[["get","model.userQuests",["loc",[null,[46,18],[46,34]]]]],[],0,1,["loc",[null,[46,10],[119,19]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 130,
                    "column": 26
                  },
                  "end": {
                    "line": 132,
                    "column": 26
                  }
                },
                "moduleName": "kodr/templates/user/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" Edit\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 129,
                  "column": 24
                },
                "end": {
                  "line": 133,
                  "column": 24
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",["group.edit",["get","member.group",["loc",[null,[130,50],[130,62]]]]],["class","group-edit"],0,null,["loc",[null,[130,26],[132,38]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 138,
                  "column": 22
                },
                "end": {
                  "line": 140,
                  "column": 22
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","member.gname",["loc",[null,[139,26],[139,42]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 125,
                "column": 12
              },
              "end": {
                "line": 143,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","list-group-item");
            var el2 = dom.createTextNode("            \n                  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            dom.setAttribute(el2,"class","list-group-item-heading");
            var el3 = dom.createTextNode("\n                      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("small");
            dom.setAttribute(el3,"class","pull-right");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("                  ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]),1,1);
            morphs[1] = dom.createMorphAt(element6,3,3);
            return morphs;
          },
          statements: [
            ["block","if",[["get","member.isLeader",["loc",[null,[129,30],[129,45]]]]],[],0,null,["loc",[null,[129,24],[133,31]]]],
            ["block","link-to",["group",["get","member.group",["loc",[null,[138,41],[138,53]]]]],["class","group-name"],1,null,["loc",[null,[138,22],[140,34]]]]
          ],
          locals: ["member"],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 143,
                "column": 12
              },
              "end": {
                "line": 145,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("               ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode(" Not a member of any group");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 148,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("         ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","tab-pane active");
          dom.setAttribute(el1,"id","groups");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","list-group");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","model.memberships",["loc",[null,[125,20],[125,37]]]]],[],0,1,["loc",[null,[125,12],[145,21]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child7 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 155,
                "column": 16
              },
              "end": {
                "line": 157,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Leave ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2,1,1);
            return morphs;
          },
          statements: [
            ["element","action",["leave",["get","member",["loc",[null,[156,43],[156,49]]]]],[],["loc",[null,[156,26],[156,52]]]],
            ["content","member.gname",["loc",[null,[156,83],[156,99]]]]
          ],
          locals: ["member"],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 157,
                "column": 16
              },
              "end": {
                "line": 159,
                "column": 16
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                 ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("You have yet to Join any group");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 162,
                "column": 10
              },
              "end": {
                "line": 180,
                "column": 10
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","row");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("form");
            dom.setAttribute(el2,"class","form-horizontal col-md-11");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("fieldset");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("legend");
            var el5 = dom.createTextNode("Join Group");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4,"class","form-group");
            var el5 = dom.createTextNode("\n                  ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4,"class","btn btn-primary");
            var el5 = dom.createTextNode("Join");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            \n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1, 1]);
            var element1 = dom.childAt(element0, [5]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [
            ["inline","ember-selectize",[],["content",["subexpr","@mut",[["get","groupOptions",["loc",[null,[169,30],[169,42]]]]],[],[]],"optionValuePath","content","optionLabelPath","content.name","selection",["subexpr","@mut",[["get","group",["loc",[null,[172,32],[172,37]]]]],[],[]],"class","group-options form-control col-md-12"],["loc",[null,[168,18],[174,24]]]],
            ["element","action",["join",["get","group",["loc",[null,[176,40],[176,45]]]]],[],["loc",[null,[176,24],[176,48]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 183,
                  "column": 14
                },
                "end": {
                  "line": 185,
                  "column": 14
                }
              },
              "moduleName": "kodr/templates/user/index.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["content","message",["loc",[null,[184,19],[184,30]]]]
            ],
            locals: ["message"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 181,
                "column": 10
              },
              "end": {
                "line": 187,
                "column": 10
              }
            },
            "moduleName": "kodr/templates/user/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","alert alert-danger");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","fullErrors",["loc",[null,[183,22],[183,32]]]]],[],0,null,["loc",[null,[183,14],[185,23]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 6
            }
          },
          "moduleName": "kodr/templates/user/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","tab-pane");
          dom.setAttribute(el1,"id","settings");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          var el4 = dom.createTextNode("Groups");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","col-md-12");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","row");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("form");
          dom.setAttribute(el3,"role","form-horizontal col-md-12");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("fieldset");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("legend");
          var el6 = dom.createTextNode("Change Password");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","form-group");
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6,"for","name");
          dom.setAttribute(el6,"class","control-label");
          var el7 = dom.createTextNode("New Password");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5,"class","form-group");
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6,"for","name");
          dom.setAttribute(el6,"class","control-label");
          var el7 = dom.createTextNode("New Password Confirmation");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                    ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          dom.setAttribute(el5,"class","btn btn-default");
          var el6 = dom.createTextNode("Change");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [6, 1, 1]);
          var element5 = dom.childAt(element4, [7]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 3]),1,1);
          morphs[1] = dom.createMorphAt(element3,3,3);
          morphs[2] = dom.createMorphAt(element3,4,4);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [3]),3,3);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [5]),3,3);
          morphs[5] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [
          ["block","each",[["get","model.memberships",["loc",[null,[155,24],[155,41]]]]],[],0,1,["loc",[null,[155,16],[159,25]]]],
          ["block","if",[["get","canJoinGroups",["loc",[null,[162,16],[162,29]]]]],[],2,null,["loc",[null,[162,10],[180,17]]]],
          ["block","if",[["get","fullErrors",["loc",[null,[181,16],[181,26]]]]],[],3,null,["loc",[null,[181,10],[187,17]]]],
          ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","password",["loc",[null,[194,50],[194,58]]]]],[],[]],"class","form-control"],["loc",[null,[194,20],[194,81]]]],
          ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","passwordConfirmation",["loc",[null,[198,50],[198,70]]]]],[],[]],"class","form-control"],["loc",[null,[198,20],[198,93]]]],
          ["element","action",["changePass"],[],["loc",[null,[200,24],[200,47]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 209,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/user/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","col-md-4");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","center-block clearfix");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","list-group-item text-muted");
        var el4 = dom.createTextNode("Profile");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3,"class","list-group-item text-right");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","pull-left");
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Experience");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","col-md-8");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-tabs");
        dom.setAttribute(el2,"role","tablist");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" Tab panes ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("     \n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [0]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element13, [3]);
        var element16 = dom.childAt(fragment, [2]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element16, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(element14,1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element14, [3]),0,0);
        morphs[2] = dom.createMorphAt(element15,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element15, [5]),2,2);
        morphs[4] = dom.createMorphAt(element15,7,7);
        morphs[5] = dom.createMorphAt(element17,1,1);
        morphs[6] = dom.createMorphAt(element17,2,2);
        morphs[7] = dom.createMorphAt(element18,1,1);
        morphs[8] = dom.createMorphAt(element18,3,3);
        return morphs;
      },
      statements: [
        ["inline","profile-icon",[],["seed",["subexpr","@mut",[["get","model.username",["loc",[null,[3,24],[3,38]]]]],[],[]],"class","pull-right"],["loc",[null,[3,4],[3,59]]]],
        ["content","model.username",["loc",[null,[3,64],[3,82]]]],
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[8,10],[8,32]]]]],[],0,null,["loc",[null,[8,4],[10,11]]]],
        ["content","model.exp",["loc",[null,[11,102],[11,115]]]],
        ["block","if",[["get","model.isStudent",["loc",[null,[12,10],[12,25]]]]],[],1,null,["loc",[null,[12,4],[20,11]]]],
        ["block","if",[["get","model.isStudent",["loc",[null,[25,12],[25,27]]]]],[],2,3,["loc",[null,[25,6],[32,13]]]],
        ["block","if",[["get","isOwnPage",["loc",[null,[33,12],[33,21]]]]],[],4,null,["loc",[null,[33,6],[35,13]]]],
        ["block","if",[["get","model.isStudent",["loc",[null,[40,12],[40,27]]]]],[],5,6,["loc",[null,[40,6],[148,13]]]],
        ["block","if",[["get","isOwnPage",["loc",[null,[150,12],[150,21]]]]],[],7,null,["loc",[null,[150,6],[205,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('kodr/templates/users/-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/users/-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"value","Save");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["save"],["on","submit"],["loc",[null,[1,6],[1,35]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/users/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/users/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Edit User");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","link-to",["User list","users.index"],[],["loc",[null,[2,2],[2,40]]]],
        ["inline","partial",["users/form"],[],["loc",[null,[6,0],[6,24]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/users/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 131
              }
            },
            "moduleName": "kodr/templates/users/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","glyphicon glyphicon-plus");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Create User");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/users/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["users.create"],["class","btn btn-primary pull-right .create-user"],0,null,["loc",[null,[3,2],[3,143]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 16
                },
                "end": {
                  "line": 15,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/users/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","label label-default");
              var el2 = dom.createTextNode("student");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 16
                },
                "end": {
                  "line": 18,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/users/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","label label-default");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["content","user.group.name",["loc",[null,[17,52],[17,71]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 20
                    },
                    "end": {
                      "line": 23,
                      "column": 20
                    }
                  },
                  "moduleName": "kodr/templates/users/index.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("i");
                  dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" Edit\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 18
                  },
                  "end": {
                    "line": 27,
                    "column": 18
                  }
                },
                "moduleName": "kodr/templates/users/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1,"href","#remove");
                dom.setAttribute(el1,"class","user-delete");
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2,"class","glyphicon glyphicon-trash");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" Delete\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [2]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createElementMorph(element1);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [
                ["block","link-to",["user.edit",["get","user",["loc",[null,[21,43],[21,47]]]]],["class","user-edit"],0,null,["loc",[null,[21,20],[23,32]]]],
                ["element","action",["remove",["get","user",["loc",[null,[24,56],[24,60]]]]],[],["loc",[null,[24,38],[24,63]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 16
                },
                "end": {
                  "line": 28,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/users/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","session.isAdmin",["loc",[null,[20,24],[20,39]]]]],[],0,null,["loc",[null,[20,18],[27,25]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child3 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 20
                  },
                  "end": {
                    "line": 31,
                    "column": 20
                  }
                },
                "moduleName": "kodr/templates/users/index.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","glyphicon glyphicon-pencil");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" Edit\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 16
                },
                "end": {
                  "line": 35,
                  "column": 16
                }
              },
              "moduleName": "kodr/templates/users/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1,"href","#remove");
              dom.setAttribute(el1,"class","user-delete");
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","glyphicon glyphicon-trash");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Delete\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [2]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createElementMorph(element0);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [
              ["block","link-to",["user.edit",["get","user",["loc",[null,[29,43],[29,47]]]]],["class","user-edit"],0,null,["loc",[null,[29,20],[31,32]]]],
              ["element","action",["remove",["get","user",["loc",[null,[32,56],[32,60]]]]],[],["loc",[null,[32,38],[32,63]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 12
              },
              "end": {
                "line": 37,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/users/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("                \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","user.isStudent",["loc",[null,[13,22],[13,36]]]]],[],0,null,["loc",[null,[13,16],[15,23]]]],
            ["block","if",[["get","user.group",["loc",[null,[16,22],[16,32]]]]],[],1,null,["loc",[null,[16,16],[18,23]]]],
            ["block","if",[["get","user.isTeacher",["loc",[null,[19,22],[19,36]]]]],[],2,3,["loc",[null,[19,16],[35,23]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 12
              },
              "end": {
                "line": 42,
                "column": 12
              }
            },
            "moduleName": "kodr/templates/users/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" | ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" | ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
            return morphs;
          },
          statements: [
            ["content","user.uniId",["loc",[null,[41,16],[41,30]]]],
            ["content","user.username",["loc",[null,[41,33],[41,50]]]],
            ["content","user.email",["loc",[null,[41,53],[41,67]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 45,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/users/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("            \n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","list-group-item-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("small");
          dom.setAttribute(el3,"class","pull-right");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
          morphs[1] = dom.createMorphAt(element2,3,3);
          return morphs;
        },
        statements: [
          ["block","unless",[["get","session.isStudent",["loc",[null,[12,22],[12,39]]]]],[],0,null,["loc",[null,[12,12],[37,23]]]],
          ["block","link-to",["user",["get","user",["loc",[null,[40,30],[40,34]]]]],["class","user-name"],1,null,["loc",[null,[40,12],[42,24]]]]
        ],
        locals: ["user"],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 0
            }
          },
          "moduleName": "kodr/templates/users/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("No Users");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/users/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Users");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","session.atLeastTeacher",["loc",[null,[2,6],[2,28]]]]],[],0,null,["loc",[null,[2,0],[4,7]]]],
        ["block","each",[["get","model",["loc",[null,[8,8],[8,13]]]]],[],1,2,["loc",[null,[8,0],[47,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('kodr/templates/users/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/users/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("New User");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","link-to",["User list","users.index"],[],["loc",[null,[2,2],[2,40]]]],
        ["inline","partial",["users/form"],[],["loc",[null,[6,0],[6,24]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/templates/users/show', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "kodr/templates/users/show.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("User show");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["inline","link-to",["User list","users.index"],[],["loc",[null,[2,2],[2,40]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('kodr/tests/acceptance/arenas-test', ['ember', 'qunit', 'kodr/tests/helpers/start-app'], function (Ember, qunit, startApp) {

  'use strict';

  var application;
  var originalConfirm;
  var confirmCalledWith;

  function defineFixturesFor(name, fixtures) {
    var modelClass = application.__container__.lookupFactory('model:' + name);
    modelClass.FIXTURES = fixtures;
  }

  qunit.module('Acceptance: Arena', {
    beforeEach: function beforeEach() {
      application = startApp['default']();
      defineFixturesFor('arena', []);
      originalConfirm = window.confirm;
      window.confirm = function () {
        confirmCalledWith = [].slice.call(arguments);
        return true;
      };
    },
    afterEach: function afterEach() {
      Ember['default'].run(application, 'destroy');
      window.confirm = originalConfirm;
      confirmCalledWith = null;
    }
  });

  qunit.test('visiting /arenas without data', function (assert) {
    visit('/arenas');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.index');
      assert.equal(find('#blankslate').text().trim(), 'No Arenas found');
    });
  });

  qunit.test('visiting /arenas with data', function (assert) {
    defineFixturesFor('arena', [{ id: 1 }]);
    visit('/arenas');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.index');
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('create a new arena', function (assert) {
    visit('/arenas');
    click('a:contains(New Arena)');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.new');

      click('input:submit');
    });

    andThen(function () {
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('update an existing arena', function (assert) {
    defineFixturesFor('arena', [{ id: 1 }]);
    visit('/arenas');
    click('a:contains(Edit)');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.edit');

      click('input:submit');
    });

    andThen(function () {
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('show an existing arena', function (assert) {
    defineFixturesFor('arena', [{ id: 1 }]);
    visit('/arenas');
    click('a:contains(Show)');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.show');
    });
  });

  qunit.test('delete a arena', function (assert) {
    defineFixturesFor('arena', [{ id: 1 }]);
    visit('/arenas');
    click('a:contains(Remove)');

    andThen(function () {
      assert.equal(currentPath(), 'arenas.index');
      assert.deepEqual(confirmCalledWith, ['Are you sure?']);
      assert.equal(find('#blankslate').length, 1);
    });
  });

});
define('kodr/tests/acceptance/arenas-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - acceptance');
  QUnit.test('acceptance/arenas-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'acceptance/arenas-test.js should pass jshint.'); 
  });

});
define('kodr/tests/acceptance/users-test', ['ember', 'qunit', 'kodr/tests/helpers/start-app'], function (Ember, qunit, startApp) {

  'use strict';

  var application;
  var originalConfirm;
  var confirmCalledWith;

  function defineFixturesFor(name, fixtures) {
    var modelClass = application.__container__.lookupFactory('model:' + name);
    modelClass.FIXTURES = fixtures;
  }

  qunit.module('Acceptance: User', {
    beforeEach: function beforeEach() {
      application = startApp['default']();
      defineFixturesFor('user', []);
      originalConfirm = window.confirm;
      window.confirm = function () {
        confirmCalledWith = [].slice.call(arguments);
        return true;
      };
    },
    afterEach: function afterEach() {
      Ember['default'].run(application, 'destroy');
      window.confirm = originalConfirm;
      confirmCalledWith = null;
    }
  });

  qunit.test('visiting /users without data', function (assert) {
    visit('/users');

    andThen(function () {
      assert.equal(currentPath(), 'users.index');
      assert.equal(find('#blankslate').text().trim(), 'No Users found');
    });
  });

  qunit.test('visiting /users with data', function (assert) {
    defineFixturesFor('user', [{ id: 1 }]);
    visit('/users');

    andThen(function () {
      assert.equal(currentPath(), 'users.index');
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('create a new user', function (assert) {
    visit('/users');
    click('a:contains(New User)');

    andThen(function () {
      assert.equal(currentPath(), 'users.new');

      click('input:submit');
    });

    andThen(function () {
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('update an existing user', function (assert) {
    defineFixturesFor('user', [{ id: 1 }]);
    visit('/users');
    click('a:contains(Edit)');

    andThen(function () {
      assert.equal(currentPath(), 'users.edit');

      click('input:submit');
    });

    andThen(function () {
      assert.equal(find('#blankslate').length, 0);
      assert.equal(find('table tbody tr').length, 1);
    });
  });

  qunit.test('show an existing user', function (assert) {
    defineFixturesFor('user', [{ id: 1 }]);
    visit('/users');
    click('a:contains(Show)');

    andThen(function () {
      assert.equal(currentPath(), 'users.show');
    });
  });

  qunit.test('delete a user', function (assert) {
    defineFixturesFor('user', [{ id: 1 }]);
    visit('/users');
    click('a:contains(Remove)');

    andThen(function () {
      assert.equal(currentPath(), 'users.index');
      assert.deepEqual(confirmCalledWith, ['Are you sure?']);
      assert.equal(find('#blankslate').length, 1);
    });
  });

});
define('kodr/tests/acceptance/users-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - acceptance');
  QUnit.test('acceptance/users-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'acceptance/users-test.js should pass jshint.'); 
  });

});
define('kodr/tests/adapters/application.jshint', function () {

  'use strict';

  QUnit.module('JSHint - adapters');
  QUnit.test('adapters/application.js should pass jshint', function(assert) { 
    assert.ok(true, 'adapters/application.js should pass jshint.'); 
  });

});
define('kodr/tests/app.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('app.js should pass jshint', function(assert) { 
    assert.ok(false, 'app.js should pass jshint.\napp.js: line 9, col 48, Missing semicolon.\napp.js: line 10, col 30, Expected an assignment or function call and instead saw an expression.\napp.js: line 12, col 40, Expected an assignment or function call and instead saw an expression.\napp.js: line 15, col 36, Missing semicolon.\n\n4 errors'); 
  });

});
define('kodr/tests/authenticators/custom.jshint', function () {

  'use strict';

  QUnit.module('JSHint - authenticators');
  QUnit.test('authenticators/custom.js should pass jshint', function(assert) { 
    assert.ok(true, 'authenticators/custom.js should pass jshint.'); 
  });

});
define('kodr/tests/components/bread-crumbs.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/bread-crumbs.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/bread-crumbs.js should pass jshint.'); 
  });

});
define('kodr/tests/components/bs-modal/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/bs-modal');
  QUnit.test('components/bs-modal/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/bs-modal/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/challenge-edit-/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/challenge-edit-');
  QUnit.test('components/challenge/challenge-edit-/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/challenge-edit-/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/challenge-settings-/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/challenge-settings-');
  QUnit.test('components/challenge/challenge-settings-/component.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/challenge/challenge-settings-/component.js should pass jshint.\ncomponents/challenge/challenge-settings-/component.js: line 8, col 28, \'requirejs\' is not defined.\n\n1 error'); 
  });

});
define('kodr/tests/components/challenge/challenge-trial-/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/challenge-trial-');
  QUnit.test('components/challenge/challenge-trial-/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/challenge-trial-/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/choose-code/challenge-edit-choose-code/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/choose-code/challenge-edit-choose-code');
  QUnit.test('components/challenge/choose-code/challenge-edit-choose-code/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/choose-code/challenge-edit-choose-code/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/choose-code/challenge-settings-choose-code/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/choose-code/challenge-settings-choose-code');
  QUnit.test('components/challenge/choose-code/challenge-settings-choose-code/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/choose-code/challenge-settings-choose-code/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/java/challenge-edit-java/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/java/challenge-edit-java');
  QUnit.test('components/challenge/java/challenge-edit-java/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/java/challenge-edit-java/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/java/challenge-settings-java/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/java/challenge-settings-java');
  QUnit.test('components/challenge/java/challenge-settings-java/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/java/challenge-settings-java/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/java/challenge-trial-java/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/java/challenge-trial-java');
  QUnit.test('components/challenge/java/challenge-trial-java/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/java/challenge-trial-java/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/javascript/challenge-edit-javascript/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/javascript/challenge-edit-javascript');
  QUnit.test('components/challenge/javascript/challenge-edit-javascript/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/javascript/challenge-edit-javascript/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/javascript/challenge-settings-javascript/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/javascript/challenge-settings-javascript');
  QUnit.test('components/challenge/javascript/challenge-settings-javascript/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/javascript/challenge-settings-javascript/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/javascript/challenge-trial-javascript/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/javascript/challenge-trial-javascript');
  QUnit.test('components/challenge/javascript/challenge-trial-javascript/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/javascript/challenge-trial-javascript/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/python/challenge-edit-python/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/python/challenge-edit-python');
  QUnit.test('components/challenge/python/challenge-edit-python/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/python/challenge-edit-python/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/python/challenge-settings-python/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/python/challenge-settings-python');
  QUnit.test('components/challenge/python/challenge-settings-python/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/python/challenge-settings-python/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/challenge/python/challenge-trial-python/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/challenge/python/challenge-trial-python');
  QUnit.test('components/challenge/python/challenge-trial-python/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/challenge/python/challenge-trial-python/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/code-console.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/code-console.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/code-console.js should pass jshint.\ncomponents/code-console.js: line 71, col 29, Missing \'new\' prefix when invoking a constructor.\n\n1 error'); 
  });

});
define('kodr/tests/components/code-editor.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/code-editor.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/code-editor.js should pass jshint.'); 
  });

});
define('kodr/tests/components/edit-requirement/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/edit-requirement');
  QUnit.test('components/edit-requirement/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/edit-requirement/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/editor-container.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/editor-container.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/editor-container.js should pass jshint.'); 
  });

});
define('kodr/tests/components/editor-run/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/editor-run');
  QUnit.test('components/editor-run/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/editor-run/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/export-arena-modal/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/export-arena-modal');
  QUnit.test('components/export-arena-modal/component.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/export-arena-modal/component.js should pass jshint.\ncomponents/export-arena-modal/component.js: line 2, col 8, \'DS\' is defined but never used.\ncomponents/export-arena-modal/component.js: line 7, col 13, \'model\' is defined but never used.\n\n2 errors'); 
  });

});
define('kodr/tests/components/export-modal/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/export-modal');
  QUnit.test('components/export-modal/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/export-modal/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/iframe-sandbox.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/iframe-sandbox.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/iframe-sandbox.js should pass jshint.'); 
  });

});
define('kodr/tests/components/import-arena-modal/component.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/import-arena-modal');
  QUnit.test('components/import-arena-modal/component.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/import-arena-modal/component.js should pass jshint.'); 
  });

});
define('kodr/tests/components/marked-math.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/marked-math.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/marked-math.js should pass jshint.\ncomponents/marked-math.js: line 73, col 13, \'component\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/components/profile-icon.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/profile-icon.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/profile-icon.js should pass jshint.\ncomponents/profile-icon.js: line 8, col 20, \'blockies\' is not defined.\n\n1 error'); 
  });

});
define('kodr/tests/components/py-console.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/py-console.js should pass jshint', function(assert) { 
    assert.ok(false, 'components/py-console.js should pass jshint.\ncomponents/py-console.js: line 57, col 21, Missing \'new\' prefix when invoking a constructor.\n\n1 error'); 
  });

});
define('kodr/tests/components/x-select.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/x-select.js should pass jshint', function(assert) { 
    assert.ok(true, 'components/x-select.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/application.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/application.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/application.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/arena-try.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/arena-try.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/arena-try.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/arena.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/arena.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/arena/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/arena');
  QUnit.test('controllers/arena/edit.js should pass jshint', function(assert) { 
    assert.ok(false, 'controllers/arena/edit.js should pass jshint.\ncontrollers/arena/edit.js: line 45, col 17, \'model\' is defined but never used.\ncontrollers/arena/edit.js: line 48, col 56, \'ch\' is defined but never used.\ncontrollers/arena/edit.js: line 57, col 52, \'ch\' is defined but never used.\n\n3 errors'); 
  });

});
define('kodr/tests/controllers/arena/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/arena');
  QUnit.test('controllers/arena/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/arena/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/arenas/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/arenas');
  QUnit.test('controllers/arenas/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/arenas/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/challenge.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/challenge.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/challenge.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/challenge/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/challenge');
  QUnit.test('controllers/challenge/edit.js should pass jshint', function(assert) { 
    assert.ok(false, 'controllers/challenge/edit.js should pass jshint.\ncontrollers/challenge/edit.js: line 63, col 48, \'ch\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/controllers/forgotpass.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/forgotpass.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/forgotpass.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/group.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/group.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/group/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/group');
  QUnit.test('controllers/group/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/group/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/group/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/group');
  QUnit.test('controllers/group/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/group/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/groups.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/groups.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/groups.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/groups/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/groups');
  QUnit.test('controllers/groups/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/groups/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/groups/make.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/groups');
  QUnit.test('controllers/groups/make.js should pass jshint', function(assert) { 
    assert.ok(false, 'controllers/groups/make.js should pass jshint.\ncontrollers/groups/make.js: line 5, col 26, \'group\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/controllers/login.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/login.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/login.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/quest.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/quest.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/quest.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/quest/assign.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/quest');
  QUnit.test('controllers/quest/assign.js should pass jshint', function(assert) { 
    assert.ok(false, 'controllers/quest/assign.js should pass jshint.\ncontrollers/quest/assign.js: line 4, col 5, Redefinition of \'toastr\'.\n\n1 error'); 
  });

});
define('kodr/tests/controllers/quest/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/quest');
  QUnit.test('controllers/quest/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/quest/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/quest/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/quest');
  QUnit.test('controllers/quest/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/quest/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/quests/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/quests');
  QUnit.test('controllers/quests/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/quests/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/signup.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/signup.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/signup.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/trial.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/trial.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/trial.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/user-arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/user-arena.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/user-arena.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/user-arena/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/user-arena');
  QUnit.test('controllers/user-arena/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/user-arena/index.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/user.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/user.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/user.js should pass jshint.'); 
  });

});
define('kodr/tests/controllers/user/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/user');
  QUnit.test('controllers/user/edit.js should pass jshint', function(assert) { 
    assert.ok(false, 'controllers/user/edit.js should pass jshint.\ncontrollers/user/edit.js: line 91, col 25, Expected \'{\' and instead saw \'errors\'.\n\n1 error'); 
  });

});
define('kodr/tests/controllers/users.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/users.js should pass jshint', function(assert) { 
    assert.ok(true, 'controllers/users.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-callbacks.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-callbacks.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-callbacks.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-description.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-description.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-description.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-setup.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-setup.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-setup.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-solution.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-solution.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-solution.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-structure.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-structure.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-structure.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/basic-test-tests.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/basic-test-tests.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/basic-test-tests.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/cow-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/cow-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/cow-test.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/cow.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/cow.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/cow.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/empty.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/empty.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/empty.js should pass jshint.'); 
  });

});
define('kodr/tests/demo/iframe.jshint', function () {

  'use strict';

  QUnit.module('JSHint - demo');
  QUnit.test('demo/iframe.js should pass jshint', function(assert) { 
    assert.ok(true, 'demo/iframe.js should pass jshint.'); 
  });

});
define('kodr/tests/helpers/is-equal.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/is-equal.js should pass jshint', function(assert) { 
    assert.ok(true, 'helpers/is-equal.js should pass jshint.'); 
  });

});
define('kodr/tests/helpers/is-not.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/is-not.js should pass jshint', function(assert) { 
    assert.ok(true, 'helpers/is-not.js should pass jshint.'); 
  });

});
define('kodr/tests/helpers/markdown-helper.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/markdown-helper.js should pass jshint', function(assert) { 
    assert.ok(false, 'helpers/markdown-helper.js should pass jshint.\nhelpers/markdown-helper.js: line 13, col 5, \'marked\' is not defined.\nhelpers/markdown-helper.js: line 14, col 23, \'marked\' is not defined.\nhelpers/markdown-helper.js: line 16, col 20, \'require\' is not defined.\nhelpers/markdown-helper.js: line 26, col 12, \'marked\' is not defined.\nhelpers/markdown-helper.js: line 12, col 75, \'options\' is defined but never used.\n\n5 errors'); 
  });

});
define('kodr/tests/helpers/read-path.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/read-path.js should pass jshint', function(assert) { 
    assert.ok(true, 'helpers/read-path.js should pass jshint.'); 
  });

});
define('kodr/tests/helpers/register-select-helper', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = function () {
    Ember['default'].Test.registerAsyncHelper('select', function (app, selector) {
      for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        texts[_key - 2] = arguments[_key];
      }

      var $options = app.testHelpers.findWithAssert(selector + ' option');

      $options.each(function () {
        var _this = this;

        var $option = Ember['default'].$(this);

        Ember['default'].run(function () {
          _this.selected = texts.some(function (text) {
            return $option.is(':contains(\'' + text + '\')');
          });
          $option.trigger('change');
        });
      });

      return app.testHelpers.wait();
    });
  }

});
define('kodr/tests/helpers/resolver', ['exports', 'ember/resolver', 'kodr/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('kodr/tests/helpers/resolver.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { 
    assert.ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('kodr/tests/helpers/start-app', ['exports', 'ember', 'kodr/app', 'kodr/router', 'kodr/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('kodr/tests/helpers/start-app.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { 
    assert.ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('kodr/tests/iframe-main.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('iframe-main.js should pass jshint', function(assert) { 
    assert.ok(true, 'iframe-main.js should pass jshint.'); 
  });

});
define('kodr/tests/initializers/authentication.jshint', function () {

  'use strict';

  QUnit.module('JSHint - initializers');
  QUnit.test('initializers/authentication.js should pass jshint', function(assert) { 
    assert.ok(true, 'initializers/authentication.js should pass jshint.'); 
  });

});
define('kodr/tests/initializers/event-bus.jshint', function () {

  'use strict';

  QUnit.module('JSHint - initializers');
  QUnit.test('initializers/event-bus.js should pass jshint', function(assert) { 
    assert.ok(true, 'initializers/event-bus.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/bs-modal/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('bs-modal', 'Integration | Component | bs modal', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 12
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'bs-modal', ['loc', [null, [1, 0], [1, 12]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'bs-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/bs-modal/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/bs-modal');
  QUnit.test('integration/components/bs-modal/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/bs-modal/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challegne/challenge-java/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challegne/challenge-java', 'Integration | Component | challegne/challenge java', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 28
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challegne/challenge-java', ['loc', [null, [1, 0], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challegne/challenge-java', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challegne/challenge-java/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challegne/challenge-java');
  QUnit.test('integration/components/challegne/challenge-java/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challegne/challenge-java/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-edit-/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-edit-', 'Integration | Component | challenge edit ', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 19
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-edit-', ['loc', [null, [1, 0], [1, 19]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-edit-', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-edit-/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-edit-');
  QUnit.test('integration/components/challenge-edit-/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-edit-/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-edit-java/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-edit-java', 'Integration | Component | challenge edit java', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 23
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-edit-java', ['loc', [null, [1, 0], [1, 23]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-edit-java', [], [], 0, null, ['loc', [null, [2, 4], [4, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-edit-java/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-edit-java');
  QUnit.test('integration/components/challenge-edit-java/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-edit-java/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-edit-javascrpt/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-edit-javascrpt', 'Integration | Component | challenge edit javascrpt', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 28
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-edit-javascrpt', ['loc', [null, [1, 0], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-edit-javascrpt', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-edit-javascrpt/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-edit-javascrpt');
  QUnit.test('integration/components/challenge-edit-javascrpt/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-edit-javascrpt/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-edit-python/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-edit-python', 'Integration | Component | challenge edit python', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-edit-python', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-edit-python', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-edit-python/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-edit-python');
  QUnit.test('integration/components/challenge-edit-python/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-edit-python/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-java-trial-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-java-trial', 'Integration | Component | challenge java trial', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 24
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-java-trial', ['loc', [null, [1, 0], [1, 24]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-java-trial', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-java-trial-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/challenge-java-trial-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-java-trial-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-java-trial/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-java-trial', 'Integration | Component | challenge java trial', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 24
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-java-trial', ['loc', [null, [1, 0], [1, 24]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-java-trial', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-java-trial/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-java-trial');
  QUnit.test('integration/components/challenge-java-trial/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-java-trial/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-javascript-trial/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-javascript-trial', 'Integration | Component | challenge javascript trial', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 30
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-javascript-trial', ['loc', [null, [1, 0], [1, 30]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-javascript-trial', [], [], 0, null, ['loc', [null, [2, 4], [4, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-javascript-trial/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-javascript-trial');
  QUnit.test('integration/components/challenge-javascript-trial/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-javascript-trial/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-settings-java/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-settings-java', 'Integration | Component | challenge settings java', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 27
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-settings-java', ['loc', [null, [1, 0], [1, 27]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-settings-java', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-settings-java/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-settings-java');
  QUnit.test('integration/components/challenge-settings-java/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-settings-java/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-settings-javascript/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-settings-javascript', 'Integration | Component | challenge settings javascript', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 33
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-settings-javascript', ['loc', [null, [1, 0], [1, 33]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-settings-javascript', [], [], 0, null, ['loc', [null, [2, 4], [4, 38]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-settings-javascript/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-settings-javascript');
  QUnit.test('integration/components/challenge-settings-javascript/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-settings-javascript/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-settings-python/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-settings-python', 'Integration | Component | challenge settings python', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 29
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-settings-python', ['loc', [null, [1, 0], [1, 29]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-settings-python', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-settings-python/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-settings-python');
  QUnit.test('integration/components/challenge-settings-python/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-settings-python/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-settings/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-settings', 'Integration | Component | challenge settings', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-settings', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-settings', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-settings/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-settings');
  QUnit.test('integration/components/challenge-settings/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-settings/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-trial-/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-trial-', 'Integration | Component | challenge trial ', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 20
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-trial-', ['loc', [null, [1, 0], [1, 20]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-trial-', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-trial-/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-trial-');
  QUnit.test('integration/components/challenge-trial-/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-trial-/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge-trial-python/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge-trial-python', 'Integration | Component | challenge trial python', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge-trial-python', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge-trial-python', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge-trial-python/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge-trial-python');
  QUnit.test('integration/components/challenge-trial-python/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge-trial-python/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/challenge-java/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/challenge-java', 'Integration | Component | challenge/challenge java', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 28
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/challenge-java', ['loc', [null, [1, 0], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/challenge-java', [], [], 0, null, ['loc', [null, [2, 4], [4, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/challenge-java/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/challenge-java');
  QUnit.test('integration/components/challenge/challenge-java/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/challenge-java/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/choose-code/challenge-edit-choose-code/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/choose-code/challenge-edit-choose-code', 'Integration | Component | challenge/choose code/challenge edit choose code', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 52
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/choose-code/challenge-edit-choose-code', ['loc', [null, [1, 0], [1, 52]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/choose-code/challenge-edit-choose-code', [], [], 0, null, ['loc', [null, [2, 4], [4, 57]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/choose-code/challenge-edit-choose-code/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/choose-code/challenge-edit-choose-code');
  QUnit.test('integration/components/challenge/choose-code/challenge-edit-choose-code/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/choose-code/challenge-edit-choose-code/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/choose-code/challenge-settings-choose-code/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/choose-code/challenge-settings-choose-code', 'Integration | Component | challenge/choose code/challenge settings choose code', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 56
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/choose-code/challenge-settings-choose-code', ['loc', [null, [1, 0], [1, 56]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/choose-code/challenge-settings-choose-code', [], [], 0, null, ['loc', [null, [2, 4], [4, 61]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/choose-code/challenge-settings-choose-code/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/choose-code/challenge-settings-choose-code');
  QUnit.test('integration/components/challenge/choose-code/challenge-settings-choose-code/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/choose-code/challenge-settings-choose-code/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/console-copy/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/console-copy', 'Integration | Component | challenge/console copy', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/console-copy', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/console-copy', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/console-copy/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/console-copy');
  QUnit.test('integration/components/challenge/console-copy/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/console-copy/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/game/challenge-trial-game/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/game/challenge-trial-game', 'Integration | Component | challenge/game/challenge trial game', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 39
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/game/challenge-trial-game', ['loc', [null, [1, 0], [1, 39]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/game/challenge-trial-game', [], [], 0, null, ['loc', [null, [2, 4], [4, 44]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/game/challenge-trial-game/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/game/challenge-trial-game');
  QUnit.test('integration/components/challenge/game/challenge-trial-game/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/game/challenge-trial-game/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/challenge/java/challenge-java-container/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('challenge/java/challenge-java-container', 'Integration | Component | challenge/java/challenge java container', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 43
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'challenge/java/challenge-java-container', ['loc', [null, [1, 0], [1, 43]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'challenge/java/challenge-java-container', [], [], 0, null, ['loc', [null, [2, 4], [4, 48]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/challenge/java/challenge-java-container/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/challenge/java/challenge-java-container');
  QUnit.test('integration/components/challenge/java/challenge-java-container/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/challenge/java/challenge-java-container/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/edit-requirement/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('edit-requirement', 'Integration | Component | edit requirement', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 20
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'edit-requirement', ['loc', [null, [1, 0], [1, 20]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'edit-requirement', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/edit-requirement/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/edit-requirement');
  QUnit.test('integration/components/edit-requirement/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/edit-requirement/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/export-arena-modal/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('export-arena-modal', 'Integration | Component | export arena modal', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'export-arena-modal', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'export-arena-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/export-arena-modal/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/export-arena-modal');
  QUnit.test('integration/components/export-arena-modal/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/export-arena-modal/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/export-modal/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('export-modal', 'Integration | Component | export modal', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 16
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'export-modal', ['loc', [null, [1, 0], [1, 16]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'export-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/export-modal/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/export-modal');
  QUnit.test('integration/components/export-modal/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/export-modal/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/integration/components/import-arena-modal/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('import-arena-modal', 'Integration | Component | import arena modal', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 22
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'import-arena-modal', ['loc', [null, [1, 0], [1, 22]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'import-arena-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('kodr/tests/integration/components/import-arena-modal/component-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components/import-arena-modal');
  QUnit.test('integration/components/import-arena-modal/component-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'integration/components/import-arena-modal/component-test.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/arena/modal-methods.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/arena');
  QUnit.test('mixins/arena/modal-methods.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/arena/modal-methods.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/arenas/save-model-mixin.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/arenas');
  QUnit.test('mixins/arenas/save-model-mixin.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/arenas/save-model-mixin.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/challenge/challenge-common.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/challenge');
  QUnit.test('mixins/challenge/challenge-common.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/challenge/challenge-common.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/challenge/java/challenge-common-java.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/challenge/java');
  QUnit.test('mixins/challenge/java/challenge-common-java.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/challenge/java/challenge-common-java.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/challenge/javascript/challenge-common-javascript.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/challenge/javascript');
  QUnit.test('mixins/challenge/javascript/challenge-common-javascript.js should pass jshint', function(assert) { 
    assert.ok(false, 'mixins/challenge/javascript/challenge-common-javascript.js should pass jshint.\nmixins/challenge/javascript/challenge-common-javascript.js: line 12, col 9, \'JSHINT\' is not defined.\nmixins/challenge/javascript/challenge-common-javascript.js: line 30, col 22, \'JSHINT\' is not defined.\n\n2 errors'); 
  });

});
define('kodr/tests/mixins/challenge/python/challenge-common-python.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/challenge/python');
  QUnit.test('mixins/challenge/python/challenge-common-python.js should pass jshint', function(assert) { 
    assert.ok(false, 'mixins/challenge/python/challenge-common-python.js should pass jshint.\nmixins/challenge/python/challenge-common-python.js: line 42, col 13, \'t0\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/mixins/serializable.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins');
  QUnit.test('mixins/serializable.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/serializable.js should pass jshint.'); 
  });

});
define('kodr/tests/mixins/users/save-model-mixin.jshint', function () {

  'use strict';

  QUnit.module('JSHint - mixins/users');
  QUnit.test('mixins/users/save-model-mixin.js should pass jshint', function(assert) { 
    assert.ok(true, 'mixins/users/save-model-mixin.js should pass jshint.'); 
  });

});
define('kodr/tests/modals/import-arena-modal/controller.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modals/import-arena-modal');
  QUnit.test('modals/import-arena-modal/controller.js should pass jshint', function(assert) { 
    assert.ok(true, 'modals/import-arena-modal/controller.js should pass jshint.'); 
  });

});
define('kodr/tests/models/arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/arena.js should pass jshint', function(assert) { 
    assert.ok(false, 'models/arena.js should pass jshint.\nmodels/arena.js: line 40, col 21, \'Ember\' is not defined.\nmodels/arena.js: line 2, col 5, \'_\' is defined but never used.\n\n2 errors'); 
  });

});
define('kodr/tests/models/challenge-content.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/challenge-content.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/challenge-content.js should pass jshint.'); 
  });

});
define('kodr/tests/models/challenge.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/challenge.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/challenge.js should pass jshint.'); 
  });

});
define('kodr/tests/models/group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/group.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/group.js should pass jshint.'); 
  });

});
define('kodr/tests/models/member.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/member.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/member.js should pass jshint.'); 
  });

});
define('kodr/tests/models/mixed.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/mixed.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/mixed.js should pass jshint.'); 
  });

});
define('kodr/tests/models/quest.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/quest.js should pass jshint', function(assert) { 
    assert.ok(false, 'models/quest.js should pass jshint.\nmodels/quest.js: line 2, col 8, \'Requirement\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/models/requirement.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/requirement.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/requirement.js should pass jshint.'); 
  });

});
define('kodr/tests/models/trial.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/trial.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/trial.js should pass jshint.'); 
  });

});
define('kodr/tests/models/user-arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/user-arena.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/user-arena.js should pass jshint.'); 
  });

});
define('kodr/tests/models/user-quest.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/user-quest.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/user-quest.js should pass jshint.'); 
  });

});
define('kodr/tests/models/user.jshint', function () {

  'use strict';

  QUnit.module('JSHint - models');
  QUnit.test('models/user.js should pass jshint', function(assert) { 
    assert.ok(true, 'models/user.js should pass jshint.'); 
  });

});
define('kodr/tests/router.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('router.js should pass jshint', function(assert) { 
    assert.ok(false, 'router.js should pass jshint.\nrouter.js: line 10, col 16, \'ga\' is not defined.\n\n1 error'); 
  });

});
define('kodr/tests/routes/application.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/application.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/application.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/arena.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arena.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arena/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arena');
  QUnit.test('routes/arena/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arena/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arena/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arena');
  QUnit.test('routes/arena/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arena/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arenas.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/arenas.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arenas.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arenas/create.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arenas');
  QUnit.test('routes/arenas/create.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arenas/create.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arenas/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arenas');
  QUnit.test('routes/arenas/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arenas/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arenas/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arenas');
  QUnit.test('routes/arenas/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arenas/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/arenas/new.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/arenas');
  QUnit.test('routes/arenas/new.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/arenas/new.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge-trial.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/challenge-trial.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge-trial.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/challenge.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge/copy.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/challenge');
  QUnit.test('routes/challenge/copy.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge/copy.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/challenge');
  QUnit.test('routes/challenge/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/challenge');
  QUnit.test('routes/challenge/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenge/try.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/challenge');
  QUnit.test('routes/challenge/try.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenge/try.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenges.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/challenges.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/challenges.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/challenges/create.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/challenges');
  QUnit.test('routes/challenges/create.js should pass jshint', function(assert) { 
    assert.ok(false, 'routes/challenges/create.js should pass jshint.\nroutes/challenges/create.js: line 23, col 19, \'params\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/routes/group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/group.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/group.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/group/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/group');
  QUnit.test('routes/group/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/group/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/group/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/group');
  QUnit.test('routes/group/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/group/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/groups.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/groups.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/groups.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/groups/create.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/groups');
  QUnit.test('routes/groups/create.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/groups/create.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/groups/make.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/groups');
  QUnit.test('routes/groups/make.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/groups/make.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/profile.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/profile.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/profile.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/quest.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/quest.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/quest.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/quest/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/quest');
  QUnit.test('routes/quest/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/quest/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/quest/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/quest');
  QUnit.test('routes/quest/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/quest/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/quests.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/quests.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/quests.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/quests/create.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/quests');
  QUnit.test('routes/quests/create.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/quests/create.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/signup.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/signup.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/signup.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/trial.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/trial.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/trial.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/user-arena.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/user-arena.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/user-arena.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/user-arena/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/user-arena');
  QUnit.test('routes/user-arena/index.js should pass jshint', function(assert) { 
    assert.ok(false, 'routes/user-arena/index.js should pass jshint.\nroutes/user-arena/index.js: line 13, col 21, \'params\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/routes/user-arena/trial.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/user-arena');
  QUnit.test('routes/user-arena/trial.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/user-arena/trial.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/user-arena/try.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/user-arena');
  QUnit.test('routes/user-arena/try.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/user-arena/try.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/user-arenas.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/user-arenas.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/user-arenas.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/user-arenas/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/user-arenas');
  QUnit.test('routes/user-arenas/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/user-arenas/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/users.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/users.js should pass jshint', function(assert) { 
    assert.ok(false, 'routes/users.js should pass jshint.\nroutes/users.js: line 16, col 19, \'params\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/routes/users/create.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/users');
  QUnit.test('routes/users/create.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/users/create.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/users/edit.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/users');
  QUnit.test('routes/users/edit.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/users/edit.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/users/index.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/users');
  QUnit.test('routes/users/index.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/users/index.js should pass jshint.'); 
  });

});
define('kodr/tests/routes/users/new.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/users');
  QUnit.test('routes/users/new.js should pass jshint', function(assert) { 
    assert.ok(true, 'routes/users/new.js should pass jshint.'); 
  });

});
define('kodr/tests/runners/runner.jshint', function () {

  'use strict';

  QUnit.module('JSHint - runners');
  QUnit.test('runners/runner.js should pass jshint', function(assert) { 
    assert.ok(true, 'runners/runner.js should pass jshint.'); 
  });

});
define('kodr/tests/sandbox/iframe-sandbox.jshint', function () {

  'use strict';

  QUnit.module('JSHint - sandbox');
  QUnit.test('sandbox/iframe-sandbox.js should pass jshint', function(assert) { 
    assert.ok(false, 'sandbox/iframe-sandbox.js should pass jshint.\nsandbox/iframe-sandbox.js: line 25, col 43, Missing semicolon.\nsandbox/iframe-sandbox.js: line 46, col 23, Expected \'===\' and instead saw \'==\'.\n\n2 errors'); 
  });

});
define('kodr/tests/sandbox/iframe-utils.jshint', function () {

  'use strict';

  QUnit.module('JSHint - sandbox');
  QUnit.test('sandbox/iframe-utils.js should pass jshint', function(assert) { 
    assert.ok(true, 'sandbox/iframe-utils.js should pass jshint.'); 
  });

});
define('kodr/tests/sandbox/stuff.jshint', function () {

  'use strict';

  QUnit.module('JSHint - sandbox');
  QUnit.test('sandbox/stuff.js should pass jshint', function(assert) { 
    assert.ok(false, 'sandbox/stuff.js should pass jshint.\nsandbox/stuff.js: line 1, col 1, Use the function form of "use strict".\nsandbox/stuff.js: line 26, col 14, Expected \'{\' and instead saw \'cb\'.\nsandbox/stuff.js: line 68, col 21, Expected \'{\' and instead saw \'parent\'.\nsandbox/stuff.js: line 92, col 54, Expected \'{\' and instead saw \'sandbox\'.\nsandbox/stuff.js: line 93, col 58, Expected \'{\' and instead saw \'sandbox\'.\nsandbox/stuff.js: line 111, col 43, Expected \'{\' and instead saw \'cb\'.\nsandbox/stuff.js: line 115, col 25, Expected \'{\' and instead saw \'return\'.\nsandbox/stuff.js: line 117, col 39, Expected \'{\' and instead saw \'cb\'.\nsandbox/stuff.js: line 134, col 37, Expected \'{\' and instead saw \'return\'.\nsandbox/stuff.js: line 211, col 23, Expected \'{\' and instead saw \'callbacks\'.\n\n10 errors'); 
  });

});
define('kodr/tests/serializers/application.jshint', function () {

  'use strict';

  QUnit.module('JSHint - serializers');
  QUnit.test('serializers/application.js should pass jshint', function(assert) { 
    assert.ok(true, 'serializers/application.js should pass jshint.'); 
  });

});
define('kodr/tests/serializers/group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - serializers');
  QUnit.test('serializers/group.js should pass jshint', function(assert) { 
    assert.ok(true, 'serializers/group.js should pass jshint.'); 
  });

});
define('kodr/tests/services/event-bus.jshint', function () {

  'use strict';

  QUnit.module('JSHint - services');
  QUnit.test('services/event-bus.js should pass jshint', function(assert) { 
    assert.ok(true, 'services/event-bus.js should pass jshint.'); 
  });

});
define('kodr/tests/sessions/custom.jshint', function () {

  'use strict';

  QUnit.module('JSHint - sessions');
  QUnit.test('sessions/custom.js should pass jshint', function(assert) { 
    assert.ok(true, 'sessions/custom.js should pass jshint.'); 
  });

});
define('kodr/tests/test-helper', ['kodr/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('kodr/tests/test-helper.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('test-helper.js should pass jshint', function(assert) { 
    assert.ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('kodr/tests/transforms/java-input.jshint', function () {

  'use strict';

  QUnit.module('JSHint - transforms');
  QUnit.test('transforms/java-input.js should pass jshint', function(assert) { 
    assert.ok(true, 'transforms/java-input.js should pass jshint.'); 
  });

});
define('kodr/tests/transforms/mixed.jshint', function () {

  'use strict';

  QUnit.module('JSHint - transforms');
  QUnit.test('transforms/mixed.js should pass jshint', function(assert) { 
    assert.ok(false, 'transforms/mixed.js should pass jshint.\ntransforms/mixed.js: line 2, col 8, \'Ember\' is defined but never used.\n\n1 error'); 
  });

});
define('kodr/tests/transforms/quest-requirement.jshint', function () {

  'use strict';

  QUnit.module('JSHint - transforms');
  QUnit.test('transforms/quest-requirement.js should pass jshint', function(assert) { 
    assert.ok(true, 'transforms/quest-requirement.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:application', 'Unit | Adapter | application', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('kodr/tests/unit/adapters/application-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/adapters');
  QUnit.test('unit/adapters/application-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/challenge/challenge-content/model-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('challenge/challenge-content', 'Unit | Model | challenge/challenge content', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('kodr/tests/unit/challenge/challenge-content/model-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/challenge/challenge-content');
  QUnit.test('unit/challenge/challenge-content/model-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/challenge/challenge-content/model-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/bread-crumbs-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('bread-crumbs', 'Unit | Component | bread crumbs', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/bread-crumbs-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/bread-crumbs-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/bread-crumbs-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/chosen-select-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('chosen-select', 'Unit | Component | chosen select', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/chosen-select-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/chosen-select-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/chosen-select-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/code-console-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('code-console', 'Unit | Component | code console', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/code-console-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/code-console-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/code-console-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/code-editor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('code-editor', 'Unit | Component | code editor', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/code-editor-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/code-editor-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/code-editor-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/iframe-sandbox-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('iframe-sandbox', 'Unit | Component | iframe sandbox', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/iframe-sandbox-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/iframe-sandbox-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/iframe-sandbox-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/marked-math-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('marked-math', 'Unit | Component | marked math', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/marked-math-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/marked-math-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/marked-math-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/my-tabs-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('my-tabs', 'Unit | Component | my tabs', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/my-tabs-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/my-tabs-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/my-tabs-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/profil-icon-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('profil-icon', 'Unit | Component | profil icon', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/profil-icon-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/profil-icon-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/profil-icon-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/profile-icon-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('profile-icon', 'Unit | Component | profile icon', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/profile-icon-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/profile-icon-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/profile-icon-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/components/x-select-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('x-select', 'Unit | Component | x select', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar'],
    unit: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('kodr/tests/unit/components/x-select-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/x-select-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/components/x-select-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/controllers/arena-trial-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:arena-trial', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('kodr/tests/unit/controllers/arena-trial-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/controllers');
  QUnit.test('unit/controllers/arena-trial-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/controllers/arena-trial-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/controllers/signup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('kodr/tests/unit/controllers/signup-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/controllers');
  QUnit.test('unit/controllers/signup-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/controllers/signup-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/controllers/user-arenas-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:user-arenas', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('kodr/tests/unit/controllers/user-arenas-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/controllers');
  QUnit.test('unit/controllers/user-arenas-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/controllers/user-arenas-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/helpers/is-equal-test', ['kodr/helpers/is-equal', 'qunit'], function (is_equal, qunit) {

  'use strict';

  qunit.module('Unit | Helper | is equal');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var result = is_equal.isEqual(42);
    assert.ok(result);
  });

});
define('kodr/tests/unit/helpers/is-equal-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/helpers');
  QUnit.test('unit/helpers/is-equal-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/helpers/is-equal-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/helpers/profile-icon-test', ['kodr/helpers/profile-icon', 'qunit'], function (profile_icon, qunit) {

  'use strict';

  qunit.module('Unit | Helper | profile icon');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var result = profile_icon.profileIcon(42);
    assert.ok(result);
  });

});
define('kodr/tests/unit/helpers/profile-icon-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/helpers');
  QUnit.test('unit/helpers/profile-icon-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/helpers/profile-icon-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/initializers/auth-test', ['ember', 'kodr/initializers/auth', 'qunit'], function (Ember, auth, qunit) {

  'use strict';

  var container, application;

  qunit.module('Unit | Initializer | auth', {
    beforeEach: function beforeEach() {
      Ember['default'].run(function () {
        application = Ember['default'].Application.create();
        container = application.__container__;
        application.deferReadiness();
      });
    }
  });

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    auth.initialize(container, application);

    // you would normally confirm the results of the initializer here
    assert.ok(true);
  });

});
define('kodr/tests/unit/initializers/auth-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/initializers');
  QUnit.test('unit/initializers/auth-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/initializers/auth-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/arena/modal-methods-test', ['ember', 'kodr/tests/mixins/arena/modal-methods', 'qunit'], function (Ember, ArenaModalMethodsMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | arena/modal methods');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ArenaModalMethodsObject = Ember['default'].Object.extend(ArenaModalMethodsMixin['default']);
    var subject = ArenaModalMethodsObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/arena/modal-methods-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/arena');
  QUnit.test('unit/mixins/arena/modal-methods-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/arena/modal-methods-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/challenge-common-test', ['ember', 'kodr/tests/mixins/challenge/challenge-common', 'qunit'], function (Ember, ChallengeChallengeCommonMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/challenge common');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengeChallengeCommonObject = Ember['default'].Object.extend(ChallengeChallengeCommonMixin['default']);
    var subject = ChallengeChallengeCommonObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/challenge-common-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge');
  QUnit.test('unit/mixins/challenge/challenge-common-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/challenge-common-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/java/actions-test', ['ember', 'kodr/tests/unit/mixins/challenge/java/actions', 'qunit'], function (Ember, ChallengeJavaActionsMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/java/actions');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengeJavaActionsObject = Ember['default'].Object.extend(ChallengeJavaActionsMixin['default']);
    var subject = ChallengeJavaActionsObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/java/actions-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge/java');
  QUnit.test('unit/mixins/challenge/java/actions-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/java/actions-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/java/challange-common-java-test', ['ember', 'kodr/tests/unit/mixins/challenge/java/challange-common-java', 'qunit'], function (Ember, ChallengeJavaChallangeCommonJavaMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/java/challange common java');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengeJavaChallangeCommonJavaObject = Ember['default'].Object.extend(ChallengeJavaChallangeCommonJavaMixin['default']);
    var subject = ChallengeJavaChallangeCommonJavaObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/java/challange-common-java-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge/java');
  QUnit.test('unit/mixins/challenge/java/challange-common-java-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/java/challange-common-java-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/java/challenge-common-java-test', ['ember', 'kodr/tests/unit/mixins/challenge/java/challenge-common-java', 'qunit'], function (Ember, ChallengeJavaChallengeCommonJavaMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/java/challenge common java');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengeJavaChallengeCommonJavaObject = Ember['default'].Object.extend(ChallengeJavaChallengeCommonJavaMixin['default']);
    var subject = ChallengeJavaChallengeCommonJavaObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/java/challenge-common-java-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge/java');
  QUnit.test('unit/mixins/challenge/java/challenge-common-java-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/java/challenge-common-java-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/javascript/challenge-common-javascript-test', ['ember', 'kodr/tests/unit/mixins/challenge/javascript/challenge-common-javascript', 'qunit'], function (Ember, ChallengeJavascriptChallengeCommonJavascriptMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/javascript/challenge common javascript');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengeJavascriptChallengeCommonJavascriptObject = Ember['default'].Object.extend(ChallengeJavascriptChallengeCommonJavascriptMixin['default']);
    var subject = ChallengeJavascriptChallengeCommonJavascriptObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/javascript/challenge-common-javascript-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge/javascript');
  QUnit.test('unit/mixins/challenge/javascript/challenge-common-javascript-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/javascript/challenge-common-javascript-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/challenge/python/challenge-common-python-test', ['ember', 'kodr/tests/unit/mixins/challenge/python/challenge-common-python', 'qunit'], function (Ember, ChallengePythonChallengeCommonPythonMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | challenge/python/challenge common python');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ChallengePythonChallengeCommonPythonObject = Ember['default'].Object.extend(ChallengePythonChallengeCommonPythonMixin['default']);
    var subject = ChallengePythonChallengeCommonPythonObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/challenge/python/challenge-common-python-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins/challenge/python');
  QUnit.test('unit/mixins/challenge/python/challenge-common-python-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/challenge/python/challenge-common-python-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/mixins/serializable-test', ['ember', 'kodr/mixins/serializable', 'qunit'], function (Ember, SerializableMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | serializable');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var SerializableObject = Ember['default'].Object.extend(SerializableMixin['default']);
    var subject = SerializableObject.create();
    assert.ok(subject);
  });

});
define('kodr/tests/unit/mixins/serializable-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins');
  QUnit.test('unit/mixins/serializable-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/mixins/serializable-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/modal/import-arena-modal/controller-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:modal/import-arena-modal', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

});
define('kodr/tests/unit/modal/import-arena-modal/controller-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/modal/import-arena-modal');
  QUnit.test('unit/modal/import-arena-modal/controller-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/modal/import-arena-modal/controller-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/models/user-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('user', 'Unit | Model | user', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('kodr/tests/unit/models/user-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/models');
  QUnit.test('unit/models/user-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/models/user-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/challenge/copy-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:challenge/copy', 'Unit | Route | challenge/copy', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/challenge/copy-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes/challenge');
  QUnit.test('unit/routes/challenge/copy-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/challenge/copy-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/profile-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:profile', 'Unit | Route | profile', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/profile-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes');
  QUnit.test('unit/routes/profile-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/profile-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/signup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:signup', 'Unit | Route | signup', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/signup-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes');
  QUnit.test('unit/routes/signup-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/signup-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/trial-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:trial', 'Unit | Route | trial', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/trial-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes');
  QUnit.test('unit/routes/trial-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/trial-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/user-arena/trial-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:user-arena/trial', 'Unit | Route | user arena/trial', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/user-arena/trial-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes/user-arena');
  QUnit.test('unit/routes/user-arena/trial-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/user-arena/trial-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/user-arenas-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:user-arenas', 'Unit | Route | user arenas', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/user-arenas-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes');
  QUnit.test('unit/routes/user-arenas-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/user-arenas-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/routes/user-arenas/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:user-arenas/index', 'Unit | Route | user arenas/index', {
    // Specify the other units that are required for this test.
    // needs: ['controller:foo']
  });

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

});
define('kodr/tests/unit/routes/user-arenas/index-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/routes/user-arenas');
  QUnit.test('unit/routes/user-arenas/index-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/routes/user-arenas/index-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/services/event-bus-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('service:event-bus', 'Unit | Service | event bus', {
    // Specify the other units that are required for this test.
    // needs: ['service:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });

});
define('kodr/tests/unit/services/event-bus-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/services');
  QUnit.test('unit/services/event-bus-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/services/event-bus-test.js should pass jshint.'); 
  });

});
define('kodr/tests/unit/transforms/mixed-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('transform:mixed', 'Unit | Transform | mixed', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var transform = this.subject();
    assert.ok(transform);
  });

});
define('kodr/tests/unit/transforms/mixed-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/transforms');
  QUnit.test('unit/transforms/mixed-test.js should pass jshint', function(assert) { 
    assert.ok(true, 'unit/transforms/mixed-test.js should pass jshint.'); 
  });

});
define('kodr/tests/utils/debounce.jshint', function () {

  'use strict';

  QUnit.module('JSHint - utils');
  QUnit.test('utils/debounce.js should pass jshint', function(assert) { 
    assert.ok(true, 'utils/debounce.js should pass jshint.'); 
  });

});
define('kodr/tests/utils/local-storage-shim.jshint', function () {

  'use strict';

  QUnit.module('JSHint - utils');
  QUnit.test('utils/local-storage-shim.js should pass jshint', function(assert) { 
    assert.ok(true, 'utils/local-storage-shim.js should pass jshint.'); 
  });

});
define('kodr/transforms/java-input', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var JavaInputTransform = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized.map(function (req) {
        return Object.create({ value: req });
      });
    },
    serialize: function serialize(deserialized) {
      return deserialized.mapBy("value");
    }
  });

  exports['default'] = JavaInputTransform;

});
define('kodr/transforms/mixed', ['exports', 'ember-data', 'ember', 'kodr/models/mixed'], function (exports, DS, Ember, Mixed) {

    'use strict';

    exports['default'] = DS['default'].Transform.extend({
        deserialize: function deserialize(serialized) {
            return Mixed['default'].create(serialized);
        },

        serialize: function serialize(deserialized) {
            return deserialized.toJSON ? deserialized.toJSON() : deserialized;
        }
    });

});
define('kodr/transforms/quest-requirement', ['exports', 'ember-data', 'kodr/models/requirement'], function (exports, DS, Requirement) {

  'use strict';

  var QuestRequirementTransform = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized.map(function (req) {
        return Requirement['default'].create(req);
      });
    },
    serialize: function serialize(deserialized) {
      console.log('serializing', deserialized);
      return deserialized.map(function (req) {
        return req.serialize();
      });
    }
  });

  exports['default'] = QuestRequirementTransform;

});
define('kodr/utils/debounce', ['exports'], function (exports) {

    'use strict';


    exports['default'] = debounce;
    /**
     * Debounces a function by the given threshold.
     *
     * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
     * @param {Function} function to wrap
     * @param {Number} timeout in ms (`100`)
     * @param {Boolean} whether to execute at the beginning (`false`)
     * @api public
     */
    function debounce(func, threshold, execAsap) {
        var timeout;

        return function debounced() {
            var obj = this,
                args = arguments;

            function delayed() {
                if (!execAsap) {
                    func.apply(obj, args);
                }
                timeout = null;
            }

            if (timeout) {
                clearTimeout(timeout);
            } else if (execAsap) {
                func.apply(obj, args);
            }

            timeout = setTimeout(delayed, threshold || 100);
        };
    }

});
define('kodr/utils/local-storage-shim', function () {

    'use strict';

    /* jshint ignore:start */
    if (!window.localStorage) {
        window.localStorage = {
            getItem: function getItem(sKey) {
                if (!sKey || !this.hasOwnProperty(sKey)) {
                    return null;
                }
                return unescape(document.cookie.replace(new RegExp("(?:^|.*;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
            },
            key: function key(nKeyId) {
                return unescape(document.cookie.replace(/\s*\=(?:.(?!;))*$/, "").split(/\s*\=(?:[^;](?!;))*[^;]?;\s*/)[nKeyId]);
            },
            setItem: function setItem(sKey, sValue) {
                if (!sKey) {
                    return;
                }
                document.cookie = escape(sKey) + "=" + escape(sValue) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";
                this.length = document.cookie.match(/\=/g).length;
            },
            length: 0,
            removeItem: function removeItem(sKey) {
                if (!sKey || !this.hasOwnProperty(sKey)) {
                    return;
                }
                document.cookie = escape(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
                this.length--;
            },
            hasOwnProperty: function hasOwnProperty(sKey) {
                return new RegExp("(?:^|;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
            }
        };
        window.localStorage.length = (document.cookie.match(/\=/g) || window.localStorage).length;
    }
    /* jshint ignore:end */

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('kodr/config/environment', ['ember'], function(Ember) {
  var prefix = 'kodr';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("kodr/tests/test-helper");
} else {
  require("kodr/app")["default"].create({"API_HOST":"http://localhost:9000","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"name":"kodr","version":"0.0.0+90b22963"});
}

/* jshint ignore:end */
//# sourceMappingURL=kodr.map